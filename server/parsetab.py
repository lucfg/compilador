
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALPHANUMERIC AND ASSIGN BOOL BOOLEAN BOOLEAN CHAR CHARACTER COMMA COMMENT_LINE DECIM DECIMAL DECREMENT DIVIDE DOT_COMMA ELSE END_LINE EQUAL FUNCTION ID IF INCREMENT INT INTEGER LESS_EQUAL LESS_THAN L_BRACK L_KEY L_PAR MAIN MINUS MOD MORE_EQUAL MORE_THAN NOT_EQUAL OR PLUS PRINT PROGRAM READ RETURN R_BRACK R_KEY R_PAR STRING TIMES VAR WHILEprogram : PROGRAM ID L_BRACK variables functions mainBody R_BRACKmainBody : MAIN L_PAR R_PAR L_BRACK variables statements R_BRACKbody : L_BRACK statements R_BRACKvariables :\n               | VAR type ID DOT_COMMA variables\n  \t       | VAR type assignment DOT_COMMA variables\n  \t       | VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variablesfunctions :\n               | FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACKfunctionsHelp :\n  \t\t   | type ID\n  \t\t   | type ID COMMA functionsHelp2functionsHelp2 : type ID\n                    | type ID COMMA functionsHelp2type : INT\n  \t  | DECIM\n          | BOOL\n          | CHAR\n          | STRINGstatements :\n                | statement statementsstatement :\n                | assignment DOT_COMMA\n  \t\t| functionCall DOT_COMMA\n                | ifBlock\n                | whileBlock\n                | print DOT_COMMA\n                | read DOT_COMMA\n                | lineComment\n                | return DOT_COMMAreturn : RETURN megaExpassignment : idCall ASSIGN megaExp\n                | idCall ASSIGN functionCall\n                | assignIncr\n                | assignDecrassignIncr : idCall INCREMENTassignDecr : idCall DECREMENTfunctionCall : ID L_PAR functionCallParams R_PARfunctionCallParams :\n                        | functionCallParamsOptionalfunctionCallParamsOptional : megaExp COMMA functionCallParamsOptional\n                                | megaExpifBlock : IF L_PAR megaExp R_PAR body optionalElseoptionalElse : \n  \t\t  | ELSE bodywhileBlock : WHILE L_PAR megaExp R_PAR bodymegaExp : superExp\n             | superExp AND superExp\n             | superExp OR superExpsuperExp : exp\n              | exp MORE_THAN exp\n              | exp LESS_THAN exp\n              | exp MORE_EQUAL exp\n              | exp LESS_EQUAL exp\n              | exp EQUAL exp\n              | exp NOT_EQUAL expexp : term\n          | term PLUS exp\n          | term MINUS expterm : factor\n           | factor TIMES term\n           | factor DIVIDE term\n           | factor MOD termfactor : INTEGER\n             | DECIMAL\n             | ALPHANUMERIC \n             | CHARACTER\n             | BOOLEAN\n             | idCall\n             | L_PAR megaExp R_PAR\n             | functionCallidCall : ID\n  \t    | ID L_KEY exp R_KEYprint : PRINT L_PAR print_help R_PARprint_help : \n  \t\t| ALPHANUMERIC\n  \t\t| idCall\n  \t\t| functionCall\n  \t\t| megaExpread : READ L_PAR idCall R_PARlineComment : COMMENT_LINE ALPHANUMERIC END_LINE'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,23,],[0,-1,]),'ID':([2,9,10,11,12,13,14,17,26,27,28,29,34,45,47,54,55,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,75,81,97,100,101,104,111,113,115,116,119,120,121,122,123,124,125,126,127,130,132,143,152,153,154,156,159,160,],[3,18,-15,-16,-17,-18,-19,25,-4,35,-4,51,-5,35,-6,-4,76,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,51,-4,51,-25,-26,-29,35,-4,35,-7,-23,-24,-27,-28,-30,35,35,35,142,144,51,-81,-44,51,-46,-43,-45,-3,]),'L_BRACK':([3,32,77,146,147,157,],[4,54,113,153,153,153,]),'FUNCTION':([4,5,26,28,34,47,81,116,],[-4,8,-4,-4,-5,-6,-4,-7,]),'MAIN':([4,5,7,26,28,34,47,81,116,151,],[-4,-8,16,-4,-4,-5,-6,-4,-7,-9,]),'VAR':([4,26,28,54,81,113,],[6,6,6,6,6,6,]),'INT':([6,8,33,112,150,],[10,10,10,10,10,]),'DECIM':([6,8,33,112,150,],[11,11,11,11,11,]),'BOOL':([6,8,33,112,150,],[12,12,12,12,12,]),'CHAR':([6,8,33,112,150,],[13,13,13,13,13,]),'STRING':([6,8,33,112,150,],[14,14,14,14,14,]),'R_BRACK':([15,26,28,34,47,54,75,81,96,97,100,101,104,113,116,117,118,119,120,121,122,123,132,143,145,152,153,154,156,158,159,160,],[23,-4,-4,-5,-6,-4,-20,-4,117,-20,-25,-26,-29,-4,-7,-2,-21,-23,-24,-27,-28,-30,-20,-81,151,-44,-20,-46,-43,160,-45,-3,]),'L_PAR':([16,25,27,29,35,45,51,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,106,107,108,109,111,115,124,125,126,],[24,33,45,45,58,45,58,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,124,125,126,127,45,45,45,45,45,]),'DOT_COMMA':([18,19,21,22,30,31,35,38,39,40,41,42,43,44,46,48,49,50,51,52,53,59,60,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,99,102,103,105,114,129,148,149,],[26,28,-34,-35,-36,-37,-72,-57,-60,-65,-66,-67,-68,-69,-71,-32,-33,-47,-72,-50,-64,81,-73,-58,-59,-61,-62,-63,-70,-48,-49,-51,-52,-53,-54,-55,-56,119,120,121,122,123,-38,-31,-74,-80,]),'L_KEY':([18,35,51,142,],[27,57,57,57,]),'ASSIGN':([18,20,51,60,],[-72,29,-72,-73,]),'INCREMENT':([18,20,51,60,],[-72,30,-72,-73,]),'DECREMENT':([18,20,51,60,],[-72,31,-72,-73,]),'R_PAR':([24,33,35,38,39,40,41,42,43,44,46,50,52,53,56,58,60,66,76,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,114,126,131,133,134,135,136,137,138,139,140,141,142,144,155,],[32,-10,-72,-57,-60,-65,-66,-67,-68,-69,-71,-47,-50,-64,77,-39,-73,87,-11,114,-40,-42,-58,-59,-61,-62,-63,-70,-48,-49,-51,-52,-53,-54,-55,-56,-38,-75,-12,-41,146,147,148,-66,-69,-71,-79,149,-72,-13,-14,]),'IF':([26,28,34,47,54,75,81,97,100,101,104,113,116,119,120,121,122,123,132,143,152,153,154,156,159,160,],[-4,-4,-5,-6,-4,106,-4,106,-25,-26,-29,-4,-7,-23,-24,-27,-28,-30,106,-81,-44,106,-46,-43,-45,-3,]),'WHILE':([26,28,34,47,54,75,81,97,100,101,104,113,116,119,120,121,122,123,132,143,152,153,154,156,159,160,],[-4,-4,-5,-6,-4,107,-4,107,-25,-26,-29,-4,-7,-23,-24,-27,-28,-30,107,-81,-44,107,-46,-43,-45,-3,]),'PRINT':([26,28,34,47,54,75,81,97,100,101,104,113,116,119,120,121,122,123,132,143,152,153,154,156,159,160,],[-4,-4,-5,-6,-4,108,-4,108,-25,-26,-29,-4,-7,-23,-24,-27,-28,-30,108,-81,-44,108,-46,-43,-45,-3,]),'READ':([26,28,34,47,54,75,81,97,100,101,104,113,116,119,120,121,122,123,132,143,152,153,154,156,159,160,],[-4,-4,-5,-6,-4,109,-4,109,-25,-26,-29,-4,-7,-23,-24,-27,-28,-30,109,-81,-44,109,-46,-43,-45,-3,]),'COMMENT_LINE':([26,28,34,47,54,75,81,97,100,101,104,113,116,119,120,121,122,123,132,143,152,153,154,156,159,160,],[-4,-4,-5,-6,-4,110,-4,110,-25,-26,-29,-4,-7,-23,-24,-27,-28,-30,110,-81,-44,110,-46,-43,-45,-3,]),'RETURN':([26,28,34,47,54,75,81,97,100,101,104,113,116,119,120,121,122,123,132,143,152,153,154,156,159,160,],[-4,-4,-5,-6,-4,111,-4,111,-25,-26,-29,-4,-7,-23,-24,-27,-28,-30,111,-81,-44,111,-46,-43,-45,-3,]),'INTEGER':([27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,111,115,124,125,126,],[36,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'DECIMAL':([27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,111,115,124,125,126,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ALPHANUMERIC':([27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,110,111,115,124,125,126,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,128,41,41,41,41,137,]),'CHARACTER':([27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,111,115,124,125,126,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'BOOLEAN':([27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,111,115,124,125,126,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'TIMES':([35,36,39,40,41,42,43,44,46,49,51,53,60,87,114,137,138,139,],[-72,-64,63,-65,-66,-67,-68,-69,-71,-71,-72,-64,-73,-70,-38,-66,-69,-71,]),'DIVIDE':([35,36,39,40,41,42,43,44,46,49,51,53,60,87,114,137,138,139,],[-72,-64,64,-65,-66,-67,-68,-69,-71,-71,-72,-64,-73,-70,-38,-66,-69,-71,]),'MOD':([35,36,39,40,41,42,43,44,46,49,51,53,60,87,114,137,138,139,],[-72,-64,65,-65,-66,-67,-68,-69,-71,-71,-72,-64,-73,-70,-38,-66,-69,-71,]),'PLUS':([35,36,38,39,40,41,42,43,44,46,49,51,53,60,84,85,86,87,114,137,138,139,],[-72,-64,61,-60,-65,-66,-67,-68,-69,-71,-71,-72,-64,-73,-61,-62,-63,-70,-38,-66,-69,-71,]),'MINUS':([35,36,38,39,40,41,42,43,44,46,49,51,53,60,84,85,86,87,114,137,138,139,],[-72,-64,62,-60,-65,-66,-67,-68,-69,-71,-71,-72,-64,-73,-61,-62,-63,-70,-38,-66,-69,-71,]),'R_KEY':([35,36,37,38,39,40,41,42,43,44,46,53,60,82,83,84,85,86,87,114,],[-72,59,60,-57,-60,-65,-66,-67,-68,-69,-71,-64,-73,-58,-59,-61,-62,-63,-70,-38,]),'MORE_THAN':([35,38,39,40,41,42,43,44,46,49,51,52,53,60,82,83,84,85,86,87,114,137,138,139,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-71,-72,69,-64,-73,-58,-59,-61,-62,-63,-70,-38,-66,-69,-71,]),'LESS_THAN':([35,38,39,40,41,42,43,44,46,49,51,52,53,60,82,83,84,85,86,87,114,137,138,139,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-71,-72,70,-64,-73,-58,-59,-61,-62,-63,-70,-38,-66,-69,-71,]),'MORE_EQUAL':([35,38,39,40,41,42,43,44,46,49,51,52,53,60,82,83,84,85,86,87,114,137,138,139,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-71,-72,71,-64,-73,-58,-59,-61,-62,-63,-70,-38,-66,-69,-71,]),'LESS_EQUAL':([35,38,39,40,41,42,43,44,46,49,51,52,53,60,82,83,84,85,86,87,114,137,138,139,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-71,-72,72,-64,-73,-58,-59,-61,-62,-63,-70,-38,-66,-69,-71,]),'EQUAL':([35,38,39,40,41,42,43,44,46,49,51,52,53,60,82,83,84,85,86,87,114,137,138,139,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-71,-72,73,-64,-73,-58,-59,-61,-62,-63,-70,-38,-66,-69,-71,]),'NOT_EQUAL':([35,38,39,40,41,42,43,44,46,49,51,52,53,60,82,83,84,85,86,87,114,137,138,139,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-71,-72,74,-64,-73,-58,-59,-61,-62,-63,-70,-38,-66,-69,-71,]),'AND':([35,38,39,40,41,42,43,44,46,49,50,51,52,53,60,82,83,84,85,86,87,90,91,92,93,94,95,114,137,138,139,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-71,67,-72,-50,-64,-73,-58,-59,-61,-62,-63,-70,-51,-52,-53,-54,-55,-56,-38,-66,-69,-71,]),'OR':([35,38,39,40,41,42,43,44,46,49,50,51,52,53,60,82,83,84,85,86,87,90,91,92,93,94,95,114,137,138,139,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-71,68,-72,-50,-64,-73,-58,-59,-61,-62,-63,-70,-51,-52,-53,-54,-55,-56,-38,-66,-69,-71,]),'COMMA':([35,38,39,40,41,42,43,44,46,50,52,53,60,76,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,114,144,],[-72,-57,-60,-65,-66,-67,-68,-69,-71,-47,-50,-64,-73,112,115,-58,-59,-61,-62,-63,-70,-48,-49,-51,-52,-53,-54,-55,-56,-38,150,]),'END_LINE':([128,],[143,]),'ELSE':([152,160,],[157,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variables':([4,26,28,54,81,113,],[5,34,47,75,116,132,]),'functions':([5,],[7,]),'type':([6,8,33,112,150,],[9,17,55,130,130,]),'mainBody':([7,],[15,]),'assignment':([9,75,97,132,153,],[19,98,98,98,98,]),'idCall':([9,27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,75,97,111,115,124,125,126,127,132,153,],[20,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,20,20,44,44,44,44,138,141,20,20,]),'assignIncr':([9,75,97,132,153,],[21,21,21,21,21,]),'assignDecr':([9,75,97,132,153,],[22,22,22,22,22,]),'exp':([27,29,45,57,58,61,62,67,68,69,70,71,72,73,74,111,115,124,125,126,],[37,52,52,37,52,82,83,52,52,90,91,92,93,94,95,52,52,52,52,52,]),'term':([27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,111,115,124,125,126,],[38,38,38,38,38,38,38,84,85,86,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'factor':([27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,111,115,124,125,126,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'functionCall':([27,29,45,57,58,61,62,63,64,65,67,68,69,70,71,72,73,74,75,97,111,115,124,125,126,132,153,],[46,49,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,99,99,46,46,46,46,139,99,99,]),'megaExp':([29,45,58,111,115,124,125,126,],[48,66,80,129,80,134,135,140,]),'superExp':([29,45,58,67,68,111,115,124,125,126,],[50,50,50,88,89,50,50,50,50,50,]),'functionsHelp':([33,],[56,]),'functionCallParams':([58,],[78,]),'functionCallParamsOptional':([58,115,],[79,133,]),'statements':([75,97,132,153,],[96,118,145,158,]),'statement':([75,97,132,153,],[97,97,97,97,]),'ifBlock':([75,97,132,153,],[100,100,100,100,]),'whileBlock':([75,97,132,153,],[101,101,101,101,]),'print':([75,97,132,153,],[102,102,102,102,]),'read':([75,97,132,153,],[103,103,103,103,]),'lineComment':([75,97,132,153,],[104,104,104,104,]),'return':([75,97,132,153,],[105,105,105,105,]),'functionsHelp2':([112,150,],[131,155,]),'print_help':([126,],[136,]),'body':([146,147,157,],[152,154,159,]),'optionalElse':([152,],[156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK','program',7,'p_program','parser.py',14),
  ('mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK','mainBody',7,'p_mainBody','parser.py',20),
  ('body -> L_BRACK statements R_BRACK','body',3,'p_body','parser.py',25),
  ('variables -> <empty>','variables',0,'p_variables','parser.py',30),
  ('variables -> VAR type ID DOT_COMMA variables','variables',5,'p_variables','parser.py',31),
  ('variables -> VAR type assignment DOT_COMMA variables','variables',5,'p_variables','parser.py',32),
  ('variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables','variables',8,'p_variables','parser.py',33),
  ('functions -> <empty>','functions',0,'p_functions','parser.py',43),
  ('functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK','functions',10,'p_functions','parser.py',44),
  ('functionsHelp -> <empty>','functionsHelp',0,'p_functionsHelp','parser.py',49),
  ('functionsHelp -> type ID','functionsHelp',2,'p_functionsHelp','parser.py',50),
  ('functionsHelp -> type ID COMMA functionsHelp2','functionsHelp',4,'p_functionsHelp','parser.py',51),
  ('functionsHelp2 -> type ID','functionsHelp2',2,'p_functionsHelp2','parser.py',58),
  ('functionsHelp2 -> type ID COMMA functionsHelp2','functionsHelp2',4,'p_functionsHelp2','parser.py',59),
  ('type -> INT','type',1,'p_type','parser.py',69),
  ('type -> DECIM','type',1,'p_type','parser.py',70),
  ('type -> BOOL','type',1,'p_type','parser.py',71),
  ('type -> CHAR','type',1,'p_type','parser.py',72),
  ('type -> STRING','type',1,'p_type','parser.py',73),
  ('statements -> <empty>','statements',0,'p_statements','parser.py',80),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',81),
  ('statement -> <empty>','statement',0,'p_statement','parser.py',89),
  ('statement -> assignment DOT_COMMA','statement',2,'p_statement','parser.py',90),
  ('statement -> functionCall DOT_COMMA','statement',2,'p_statement','parser.py',91),
  ('statement -> ifBlock','statement',1,'p_statement','parser.py',92),
  ('statement -> whileBlock','statement',1,'p_statement','parser.py',93),
  ('statement -> print DOT_COMMA','statement',2,'p_statement','parser.py',94),
  ('statement -> read DOT_COMMA','statement',2,'p_statement','parser.py',95),
  ('statement -> lineComment','statement',1,'p_statement','parser.py',96),
  ('statement -> return DOT_COMMA','statement',2,'p_statement','parser.py',97),
  ('return -> RETURN megaExp','return',2,'p_return','parser.py',103),
  ('assignment -> idCall ASSIGN megaExp','assignment',3,'p_assignment','parser.py',107),
  ('assignment -> idCall ASSIGN functionCall','assignment',3,'p_assignment','parser.py',108),
  ('assignment -> assignIncr','assignment',1,'p_assignment','parser.py',109),
  ('assignment -> assignDecr','assignment',1,'p_assignment','parser.py',110),
  ('assignIncr -> idCall INCREMENT','assignIncr',2,'p_assignIncr','parser.py',116),
  ('assignDecr -> idCall DECREMENT','assignDecr',2,'p_assignDecr','parser.py',119),
  ('functionCall -> ID L_PAR functionCallParams R_PAR','functionCall',4,'p_functionCall','parser.py',125),
  ('functionCallParams -> <empty>','functionCallParams',0,'p_functionCallParams','parser.py',129),
  ('functionCallParams -> functionCallParamsOptional','functionCallParams',1,'p_functionCallParams','parser.py',130),
  ('functionCallParamsOptional -> megaExp COMMA functionCallParamsOptional','functionCallParamsOptional',3,'p_functionCallParamsOptional','parser.py',137),
  ('functionCallParamsOptional -> megaExp','functionCallParamsOptional',1,'p_functionCallParamsOptional','parser.py',138),
  ('ifBlock -> IF L_PAR megaExp R_PAR body optionalElse','ifBlock',6,'p_ifBlock','parser.py',146),
  ('optionalElse -> <empty>','optionalElse',0,'p_optionalElse','parser.py',150),
  ('optionalElse -> ELSE body','optionalElse',2,'p_optionalElse','parser.py',151),
  ('whileBlock -> WHILE L_PAR megaExp R_PAR body','whileBlock',5,'p_whileBlock','parser.py',156),
  ('megaExp -> superExp','megaExp',1,'p_megaExp','parser.py',164),
  ('megaExp -> superExp AND superExp','megaExp',3,'p_megaExp','parser.py',165),
  ('megaExp -> superExp OR superExp','megaExp',3,'p_megaExp','parser.py',166),
  ('superExp -> exp','superExp',1,'p_superExp','parser.py',173),
  ('superExp -> exp MORE_THAN exp','superExp',3,'p_superExp','parser.py',174),
  ('superExp -> exp LESS_THAN exp','superExp',3,'p_superExp','parser.py',175),
  ('superExp -> exp MORE_EQUAL exp','superExp',3,'p_superExp','parser.py',176),
  ('superExp -> exp LESS_EQUAL exp','superExp',3,'p_superExp','parser.py',177),
  ('superExp -> exp EQUAL exp','superExp',3,'p_superExp','parser.py',178),
  ('superExp -> exp NOT_EQUAL exp','superExp',3,'p_superExp','parser.py',179),
  ('exp -> term','exp',1,'p_exp','parser.py',186),
  ('exp -> term PLUS exp','exp',3,'p_exp','parser.py',187),
  ('exp -> term MINUS exp','exp',3,'p_exp','parser.py',188),
  ('term -> factor','term',1,'p_term','parser.py',195),
  ('term -> factor TIMES term','term',3,'p_term','parser.py',196),
  ('term -> factor DIVIDE term','term',3,'p_term','parser.py',197),
  ('term -> factor MOD term','term',3,'p_term','parser.py',198),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',205),
  ('factor -> DECIMAL','factor',1,'p_factor','parser.py',206),
  ('factor -> ALPHANUMERIC','factor',1,'p_factor','parser.py',207),
  ('factor -> CHARACTER','factor',1,'p_factor','parser.py',208),
  ('factor -> BOOLEAN','factor',1,'p_factor','parser.py',209),
  ('factor -> idCall','factor',1,'p_factor','parser.py',210),
  ('factor -> L_PAR megaExp R_PAR','factor',3,'p_factor','parser.py',211),
  ('factor -> functionCall','factor',1,'p_factor','parser.py',212),
  ('idCall -> ID','idCall',1,'p_idCall','parser.py',222),
  ('idCall -> ID L_KEY exp R_KEY','idCall',4,'p_idCall','parser.py',223),
  ('print -> PRINT L_PAR print_help R_PAR','print',4,'p_print','parser.py',233),
  ('print_help -> <empty>','print_help',0,'p_print_help','parser.py',240),
  ('print_help -> ALPHANUMERIC','print_help',1,'p_print_help','parser.py',241),
  ('print_help -> idCall','print_help',1,'p_print_help','parser.py',242),
  ('print_help -> functionCall','print_help',1,'p_print_help','parser.py',243),
  ('print_help -> megaExp','print_help',1,'p_print_help','parser.py',244),
  ('read -> READ L_PAR idCall R_PAR','read',4,'p_read','parser.py',248),
  ('lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE','lineComment',3,'p_lineComment','parser.py',256),
]
