Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK
Rule 2     mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK
Rule 3     body -> L_BRACK statements R_BRACK
Rule 4     variables -> <empty>
Rule 5     variables -> VAR type ID DOT_COMMA variables
Rule 6     variables -> VAR type assignment DOT_COMMA variables
Rule 7     variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables
Rule 8     functions -> <empty>
Rule 9     functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
Rule 10    functionsHelp -> <empty>
Rule 11    functionsHelp -> type ID
Rule 12    functionsHelp -> type ID COMMA functionsHelp2
Rule 13    functionsHelp2 -> type ID
Rule 14    functionsHelp2 -> type ID COMMA functionsHelp2
Rule 15    type -> INT
Rule 16    type -> DECIM
Rule 17    type -> BOOL
Rule 18    type -> CHAR
Rule 19    type -> STRING
Rule 20    statements -> <empty>
Rule 21    statements -> statement statements
Rule 22    statement -> <empty>
Rule 23    statement -> assignment DOT_COMMA
Rule 24    statement -> functionCall DOT_COMMA
Rule 25    statement -> ifBlock
Rule 26    statement -> whileBlock
Rule 27    statement -> print DOT_COMMA
Rule 28    statement -> read DOT_COMMA
Rule 29    statement -> lineComment
Rule 30    statement -> return DOT_COMMA
Rule 31    return -> RETURN megaExp
Rule 32    assignment -> idCall ASSIGN megaExp
Rule 33    assignment -> idCall ASSIGN functionCall
Rule 34    assignment -> assignIncr
Rule 35    assignment -> assignDecr
Rule 36    assignIncr -> idCall INCREMENT
Rule 37    assignDecr -> idCall DECREMENT
Rule 38    functionCall -> ID L_PAR functionCallParams R_PAR
Rule 39    functionCallParams -> functionCallParamsOptional
Rule 40    functionCallParamsOptional -> <empty>
Rule 41    functionCallParamsOptional -> megaExp functionCallParamsMultiple
Rule 42    functionCallParamsMultiple -> <empty>
Rule 43    functionCallParamsMultiple -> COMMA functionCallParamsOptional
Rule 44    ifBlock -> IF L_PAR megaExp R_PAR body optionalElse
Rule 45    optionalElse -> <empty>
Rule 46    optionalElse -> ELSE body
Rule 47    whileBlock -> WHILE L_PAR megaExp R_PAR body
Rule 48    megaExp -> superExp
Rule 49    megaExp -> superExp AND superExp
Rule 50    megaExp -> superExp OR superExp
Rule 51    superExp -> exp
Rule 52    superExp -> exp MORE_THAN exp
Rule 53    superExp -> exp LESS_THAN exp
Rule 54    superExp -> exp MORE_EQUAL exp
Rule 55    superExp -> exp LESS_EQUAL exp
Rule 56    superExp -> exp EQUAL exp
Rule 57    superExp -> exp NOT_EQUAL exp
Rule 58    exp -> term
Rule 59    exp -> term PLUS exp
Rule 60    exp -> term MINUS exp
Rule 61    term -> factor
Rule 62    term -> factor TIMES term
Rule 63    term -> factor DIVIDE term
Rule 64    term -> factor MOD term
Rule 65    factor -> INTEGER
Rule 66    factor -> DECIMAL
Rule 67    factor -> ALPHANUMERIC
Rule 68    factor -> CHARACTER
Rule 69    factor -> BOOLEAN
Rule 70    factor -> idCall
Rule 71    factor -> L_PAR megaExp R_PAR
Rule 72    factor -> functionCall
Rule 73    idCall -> ID
Rule 74    idCall -> ID L_KEY exp R_KEY
Rule 75    print -> PRINT L_PAR print_help R_PAR
Rule 76    print_help -> <empty>
Rule 77    print_help -> ALPHANUMERIC
Rule 78    print_help -> idCall
Rule 79    print_help -> functionCall
Rule 80    print_help -> megaExp
Rule 81    read -> READ L_PAR idCall R_PAR
Rule 82    lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE

Terminals, with rules where they appear

ALPHANUMERIC         : 67 77 82
AND                  : 49
ASSIGN               : 32 33
BOOL                 : 17
BOOLEAN              : 69
CHAR                 : 18
CHARACTER            : 68
COMMA                : 12 14 43
COMMENT_LINE         : 82
DECIM                : 16
DECIMAL              : 66
DECREMENT            : 37
DIVIDE               : 63
DOT_COMMA            : 5 6 7 23 24 27 28 30
ELSE                 : 46
END_LINE             : 82
EQUAL                : 56
FUNCTION             : 9
ID                   : 1 5 7 9 11 12 13 14 38 73 74
IF                   : 44
INCREMENT            : 36
INT                  : 15
INTEGER              : 7 65
LESS_EQUAL           : 55
LESS_THAN            : 53
L_BRACK              : 1 2 3 9
L_KEY                : 7 74
L_PAR                : 2 9 38 44 47 71 75 81
MAIN                 : 2
MINUS                : 60
MOD                  : 64
MORE_EQUAL           : 54
MORE_THAN            : 52
NOT_EQUAL            : 57
OR                   : 50
PLUS                 : 59
PRINT                : 75
PROGRAM              : 1
READ                 : 81
RETURN               : 31
R_BRACK              : 1 2 3 9
R_KEY                : 7 74
R_PAR                : 2 9 38 44 47 71 75 81
STRING               : 19
TIMES                : 62
VAR                  : 5 6 7
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

assignDecr           : 35
assignIncr           : 34
assignment           : 6 23
body                 : 44 46 47
exp                  : 51 52 52 53 53 54 54 55 55 56 56 57 57 59 60 74
factor               : 61 62 63 64
functionCall         : 24 33 72 79
functionCallParams   : 38
functionCallParamsMultiple : 41
functionCallParamsOptional : 39 43
functions            : 1
functionsHelp        : 9
functionsHelp2       : 12 14
idCall               : 32 33 36 37 70 78 81
ifBlock              : 25
lineComment          : 29
mainBody             : 1
megaExp              : 31 32 41 44 47 71 80
optionalElse         : 44
print                : 27
print_help           : 75
program              : 0
read                 : 28
return               : 30
statement            : 21
statements           : 2 3 9 21
superExp             : 48 49 49 50 50
term                 : 58 59 60 62 63 64
type                 : 5 6 7 9 11 12 13 14
variables            : 1 2 5 6 7 9
whileBlock           : 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID L_BRACK variables functions mainBody R_BRACK

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID L_BRACK variables functions mainBody R_BRACK

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . L_BRACK variables functions mainBody R_BRACK

    L_BRACK         shift and go to state 4


state 4

    (1) program -> PROGRAM ID L_BRACK . variables functions mainBody R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables
    (7) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 5

state 5

    (1) program -> PROGRAM ID L_BRACK variables . functions mainBody R_BRACK
    (8) functions -> .
    (9) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    MAIN            reduce using rule 8 (functions -> .)
    FUNCTION        shift and go to state 8

    functions                      shift and go to state 7

state 6

    (5) variables -> VAR . type ID DOT_COMMA variables
    (6) variables -> VAR . type assignment DOT_COMMA variables
    (7) variables -> VAR . type ID L_KEY INTEGER R_KEY DOT_COMMA variables
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 9

state 7

    (1) program -> PROGRAM ID L_BRACK variables functions . mainBody R_BRACK
    (2) mainBody -> . MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK

    MAIN            shift and go to state 16

    mainBody                       shift and go to state 15

state 8

    (9) functions -> FUNCTION . type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 17

state 9

    (5) variables -> VAR type . ID DOT_COMMA variables
    (6) variables -> VAR type . assignment DOT_COMMA variables
    (7) variables -> VAR type . ID L_KEY INTEGER R_KEY DOT_COMMA variables
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

    ID              shift and go to state 18

    assignment                     shift and go to state 19
    idCall                         shift and go to state 20
    assignIncr                     shift and go to state 21
    assignDecr                     shift and go to state 22

state 10

    (15) type -> INT .

    ID              reduce using rule 15 (type -> INT .)


state 11

    (16) type -> DECIM .

    ID              reduce using rule 16 (type -> DECIM .)


state 12

    (17) type -> BOOL .

    ID              reduce using rule 17 (type -> BOOL .)


state 13

    (18) type -> CHAR .

    ID              reduce using rule 18 (type -> CHAR .)


state 14

    (19) type -> STRING .

    ID              reduce using rule 19 (type -> STRING .)


state 15

    (1) program -> PROGRAM ID L_BRACK variables functions mainBody . R_BRACK

    R_BRACK         shift and go to state 23


state 16

    (2) mainBody -> MAIN . L_PAR R_PAR L_BRACK variables statements R_BRACK

    L_PAR           shift and go to state 24


state 17

    (9) functions -> FUNCTION type . ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    ID              shift and go to state 25


state 18

    (5) variables -> VAR type ID . DOT_COMMA variables
    (7) variables -> VAR type ID . L_KEY INTEGER R_KEY DOT_COMMA variables
    (73) idCall -> ID .
    (74) idCall -> ID . L_KEY exp R_KEY

    DOT_COMMA       shift and go to state 26
    L_KEY           shift and go to state 27
    ASSIGN          reduce using rule 73 (idCall -> ID .)
    INCREMENT       reduce using rule 73 (idCall -> ID .)
    DECREMENT       reduce using rule 73 (idCall -> ID .)


state 19

    (6) variables -> VAR type assignment . DOT_COMMA variables

    DOT_COMMA       shift and go to state 28


state 20

    (32) assignment -> idCall . ASSIGN megaExp
    (33) assignment -> idCall . ASSIGN functionCall
    (36) assignIncr -> idCall . INCREMENT
    (37) assignDecr -> idCall . DECREMENT

    ASSIGN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 31


state 21

    (34) assignment -> assignIncr .

    DOT_COMMA       reduce using rule 34 (assignment -> assignIncr .)


state 22

    (35) assignment -> assignDecr .

    DOT_COMMA       reduce using rule 35 (assignment -> assignDecr .)


state 23

    (1) program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK .

    $end            reduce using rule 1 (program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK .)


state 24

    (2) mainBody -> MAIN L_PAR . R_PAR L_BRACK variables statements R_BRACK

    R_PAR           shift and go to state 32


state 25

    (9) functions -> FUNCTION type ID . L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    L_PAR           shift and go to state 33


state 26

    (5) variables -> VAR type ID DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables
    (7) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 34

state 27

    (7) variables -> VAR type ID L_KEY . INTEGER R_KEY DOT_COMMA variables
    (74) idCall -> ID L_KEY . exp R_KEY
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    exp                            shift and go to state 37
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 28

    (6) variables -> VAR type assignment DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables
    (7) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 47

state 29

    (32) assignment -> idCall ASSIGN . megaExp
    (33) assignment -> idCall ASSIGN . functionCall
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 51
    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45

    idCall                         shift and go to state 44
    megaExp                        shift and go to state 48
    functionCall                   shift and go to state 49
    superExp                       shift and go to state 50
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39

state 30

    (36) assignIncr -> idCall INCREMENT .

    DOT_COMMA       reduce using rule 36 (assignIncr -> idCall INCREMENT .)


state 31

    (37) assignDecr -> idCall DECREMENT .

    DOT_COMMA       reduce using rule 37 (assignDecr -> idCall DECREMENT .)


state 32

    (2) mainBody -> MAIN L_PAR R_PAR . L_BRACK variables statements R_BRACK

    L_BRACK         shift and go to state 54


state 33

    (9) functions -> FUNCTION type ID L_PAR . functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (10) functionsHelp -> .
    (11) functionsHelp -> . type ID
    (12) functionsHelp -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    R_PAR           reduce using rule 10 (functionsHelp -> .)
    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 55
    functionsHelp                  shift and go to state 56

state 34

    (5) variables -> VAR type ID DOT_COMMA variables .

    FUNCTION        reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    MAIN            reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    ID              reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    IF              reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    WHILE           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    PRINT           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    READ            reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    RETURN          reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    R_BRACK         reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)


state 35

    (73) idCall -> ID .
    (74) idCall -> ID . L_KEY exp R_KEY
    (38) functionCall -> ID . L_PAR functionCallParams R_PAR

    TIMES           reduce using rule 73 (idCall -> ID .)
    DIVIDE          reduce using rule 73 (idCall -> ID .)
    MOD             reduce using rule 73 (idCall -> ID .)
    PLUS            reduce using rule 73 (idCall -> ID .)
    MINUS           reduce using rule 73 (idCall -> ID .)
    R_KEY           reduce using rule 73 (idCall -> ID .)
    MORE_THAN       reduce using rule 73 (idCall -> ID .)
    LESS_THAN       reduce using rule 73 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 73 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 73 (idCall -> ID .)
    EQUAL           reduce using rule 73 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 73 (idCall -> ID .)
    AND             reduce using rule 73 (idCall -> ID .)
    OR              reduce using rule 73 (idCall -> ID .)
    R_PAR           reduce using rule 73 (idCall -> ID .)
    COMMA           reduce using rule 73 (idCall -> ID .)
    DOT_COMMA       reduce using rule 73 (idCall -> ID .)
    L_KEY           shift and go to state 57
    L_PAR           shift and go to state 58


state 36

    (7) variables -> VAR type ID L_KEY INTEGER . R_KEY DOT_COMMA variables
    (65) factor -> INTEGER .

  ! shift/reduce conflict for R_KEY resolved as shift
    R_KEY           shift and go to state 59
    TIMES           reduce using rule 65 (factor -> INTEGER .)
    DIVIDE          reduce using rule 65 (factor -> INTEGER .)
    MOD             reduce using rule 65 (factor -> INTEGER .)
    PLUS            reduce using rule 65 (factor -> INTEGER .)
    MINUS           reduce using rule 65 (factor -> INTEGER .)

  ! R_KEY           [ reduce using rule 65 (factor -> INTEGER .) ]


state 37

    (74) idCall -> ID L_KEY exp . R_KEY

    R_KEY           shift and go to state 60


state 38

    (58) exp -> term .
    (59) exp -> term . PLUS exp
    (60) exp -> term . MINUS exp

    R_KEY           reduce using rule 58 (exp -> term .)
    MORE_THAN       reduce using rule 58 (exp -> term .)
    LESS_THAN       reduce using rule 58 (exp -> term .)
    MORE_EQUAL      reduce using rule 58 (exp -> term .)
    LESS_EQUAL      reduce using rule 58 (exp -> term .)
    EQUAL           reduce using rule 58 (exp -> term .)
    NOT_EQUAL       reduce using rule 58 (exp -> term .)
    AND             reduce using rule 58 (exp -> term .)
    OR              reduce using rule 58 (exp -> term .)
    DOT_COMMA       reduce using rule 58 (exp -> term .)
    R_PAR           reduce using rule 58 (exp -> term .)
    COMMA           reduce using rule 58 (exp -> term .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 39

    (61) term -> factor .
    (62) term -> factor . TIMES term
    (63) term -> factor . DIVIDE term
    (64) term -> factor . MOD term

    PLUS            reduce using rule 61 (term -> factor .)
    MINUS           reduce using rule 61 (term -> factor .)
    R_KEY           reduce using rule 61 (term -> factor .)
    MORE_THAN       reduce using rule 61 (term -> factor .)
    LESS_THAN       reduce using rule 61 (term -> factor .)
    MORE_EQUAL      reduce using rule 61 (term -> factor .)
    LESS_EQUAL      reduce using rule 61 (term -> factor .)
    EQUAL           reduce using rule 61 (term -> factor .)
    NOT_EQUAL       reduce using rule 61 (term -> factor .)
    AND             reduce using rule 61 (term -> factor .)
    OR              reduce using rule 61 (term -> factor .)
    DOT_COMMA       reduce using rule 61 (term -> factor .)
    R_PAR           reduce using rule 61 (term -> factor .)
    COMMA           reduce using rule 61 (term -> factor .)
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65


state 40

    (66) factor -> DECIMAL .

    TIMES           reduce using rule 66 (factor -> DECIMAL .)
    DIVIDE          reduce using rule 66 (factor -> DECIMAL .)
    MOD             reduce using rule 66 (factor -> DECIMAL .)
    PLUS            reduce using rule 66 (factor -> DECIMAL .)
    MINUS           reduce using rule 66 (factor -> DECIMAL .)
    R_KEY           reduce using rule 66 (factor -> DECIMAL .)
    MORE_THAN       reduce using rule 66 (factor -> DECIMAL .)
    LESS_THAN       reduce using rule 66 (factor -> DECIMAL .)
    MORE_EQUAL      reduce using rule 66 (factor -> DECIMAL .)
    LESS_EQUAL      reduce using rule 66 (factor -> DECIMAL .)
    EQUAL           reduce using rule 66 (factor -> DECIMAL .)
    NOT_EQUAL       reduce using rule 66 (factor -> DECIMAL .)
    AND             reduce using rule 66 (factor -> DECIMAL .)
    OR              reduce using rule 66 (factor -> DECIMAL .)
    DOT_COMMA       reduce using rule 66 (factor -> DECIMAL .)
    R_PAR           reduce using rule 66 (factor -> DECIMAL .)
    COMMA           reduce using rule 66 (factor -> DECIMAL .)


state 41

    (67) factor -> ALPHANUMERIC .

    TIMES           reduce using rule 67 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 67 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 67 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 67 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_KEY           reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 67 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 67 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 67 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 67 (factor -> ALPHANUMERIC .)
    DOT_COMMA       reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 67 (factor -> ALPHANUMERIC .)
    COMMA           reduce using rule 67 (factor -> ALPHANUMERIC .)


state 42

    (68) factor -> CHARACTER .

    TIMES           reduce using rule 68 (factor -> CHARACTER .)
    DIVIDE          reduce using rule 68 (factor -> CHARACTER .)
    MOD             reduce using rule 68 (factor -> CHARACTER .)
    PLUS            reduce using rule 68 (factor -> CHARACTER .)
    MINUS           reduce using rule 68 (factor -> CHARACTER .)
    R_KEY           reduce using rule 68 (factor -> CHARACTER .)
    MORE_THAN       reduce using rule 68 (factor -> CHARACTER .)
    LESS_THAN       reduce using rule 68 (factor -> CHARACTER .)
    MORE_EQUAL      reduce using rule 68 (factor -> CHARACTER .)
    LESS_EQUAL      reduce using rule 68 (factor -> CHARACTER .)
    EQUAL           reduce using rule 68 (factor -> CHARACTER .)
    NOT_EQUAL       reduce using rule 68 (factor -> CHARACTER .)
    AND             reduce using rule 68 (factor -> CHARACTER .)
    OR              reduce using rule 68 (factor -> CHARACTER .)
    DOT_COMMA       reduce using rule 68 (factor -> CHARACTER .)
    R_PAR           reduce using rule 68 (factor -> CHARACTER .)
    COMMA           reduce using rule 68 (factor -> CHARACTER .)


state 43

    (69) factor -> BOOLEAN .

    TIMES           reduce using rule 69 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 69 (factor -> BOOLEAN .)
    MOD             reduce using rule 69 (factor -> BOOLEAN .)
    PLUS            reduce using rule 69 (factor -> BOOLEAN .)
    MINUS           reduce using rule 69 (factor -> BOOLEAN .)
    R_KEY           reduce using rule 69 (factor -> BOOLEAN .)
    MORE_THAN       reduce using rule 69 (factor -> BOOLEAN .)
    LESS_THAN       reduce using rule 69 (factor -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 69 (factor -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 69 (factor -> BOOLEAN .)
    EQUAL           reduce using rule 69 (factor -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 69 (factor -> BOOLEAN .)
    AND             reduce using rule 69 (factor -> BOOLEAN .)
    OR              reduce using rule 69 (factor -> BOOLEAN .)
    DOT_COMMA       reduce using rule 69 (factor -> BOOLEAN .)
    R_PAR           reduce using rule 69 (factor -> BOOLEAN .)
    COMMA           reduce using rule 69 (factor -> BOOLEAN .)


state 44

    (70) factor -> idCall .

    TIMES           reduce using rule 70 (factor -> idCall .)
    DIVIDE          reduce using rule 70 (factor -> idCall .)
    MOD             reduce using rule 70 (factor -> idCall .)
    PLUS            reduce using rule 70 (factor -> idCall .)
    MINUS           reduce using rule 70 (factor -> idCall .)
    R_KEY           reduce using rule 70 (factor -> idCall .)
    MORE_THAN       reduce using rule 70 (factor -> idCall .)
    LESS_THAN       reduce using rule 70 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 70 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 70 (factor -> idCall .)
    EQUAL           reduce using rule 70 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 70 (factor -> idCall .)
    AND             reduce using rule 70 (factor -> idCall .)
    OR              reduce using rule 70 (factor -> idCall .)
    DOT_COMMA       reduce using rule 70 (factor -> idCall .)
    R_PAR           reduce using rule 70 (factor -> idCall .)
    COMMA           reduce using rule 70 (factor -> idCall .)


state 45

    (71) factor -> L_PAR . megaExp R_PAR
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    megaExp                        shift and go to state 66
    superExp                       shift and go to state 50
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 46

    (72) factor -> functionCall .

    TIMES           reduce using rule 72 (factor -> functionCall .)
    DIVIDE          reduce using rule 72 (factor -> functionCall .)
    MOD             reduce using rule 72 (factor -> functionCall .)
    PLUS            reduce using rule 72 (factor -> functionCall .)
    MINUS           reduce using rule 72 (factor -> functionCall .)
    R_KEY           reduce using rule 72 (factor -> functionCall .)
    MORE_THAN       reduce using rule 72 (factor -> functionCall .)
    LESS_THAN       reduce using rule 72 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 72 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 72 (factor -> functionCall .)
    EQUAL           reduce using rule 72 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 72 (factor -> functionCall .)
    AND             reduce using rule 72 (factor -> functionCall .)
    OR              reduce using rule 72 (factor -> functionCall .)
    R_PAR           reduce using rule 72 (factor -> functionCall .)
    COMMA           reduce using rule 72 (factor -> functionCall .)
    DOT_COMMA       reduce using rule 72 (factor -> functionCall .)


state 47

    (6) variables -> VAR type assignment DOT_COMMA variables .

    FUNCTION        reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    MAIN            reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    ID              reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    IF              reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    WHILE           reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    PRINT           reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    READ            reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    RETURN          reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    R_BRACK         reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)


state 48

    (32) assignment -> idCall ASSIGN megaExp .

    DOT_COMMA       reduce using rule 32 (assignment -> idCall ASSIGN megaExp .)


state 49

    (33) assignment -> idCall ASSIGN functionCall .
    (72) factor -> functionCall .

  ! reduce/reduce conflict for DOT_COMMA resolved using rule 33 (assignment -> idCall ASSIGN functionCall .)
    DOT_COMMA       reduce using rule 33 (assignment -> idCall ASSIGN functionCall .)
    TIMES           reduce using rule 72 (factor -> functionCall .)
    DIVIDE          reduce using rule 72 (factor -> functionCall .)
    MOD             reduce using rule 72 (factor -> functionCall .)
    PLUS            reduce using rule 72 (factor -> functionCall .)
    MINUS           reduce using rule 72 (factor -> functionCall .)
    MORE_THAN       reduce using rule 72 (factor -> functionCall .)
    LESS_THAN       reduce using rule 72 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 72 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 72 (factor -> functionCall .)
    EQUAL           reduce using rule 72 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 72 (factor -> functionCall .)
    AND             reduce using rule 72 (factor -> functionCall .)
    OR              reduce using rule 72 (factor -> functionCall .)

  ! DOT_COMMA       [ reduce using rule 72 (factor -> functionCall .) ]


state 50

    (48) megaExp -> superExp .
    (49) megaExp -> superExp . AND superExp
    (50) megaExp -> superExp . OR superExp

    DOT_COMMA       reduce using rule 48 (megaExp -> superExp .)
    R_PAR           reduce using rule 48 (megaExp -> superExp .)
    COMMA           reduce using rule 48 (megaExp -> superExp .)
    AND             shift and go to state 67
    OR              shift and go to state 68


state 51

    (38) functionCall -> ID . L_PAR functionCallParams R_PAR
    (73) idCall -> ID .
    (74) idCall -> ID . L_KEY exp R_KEY

    L_PAR           shift and go to state 58
    TIMES           reduce using rule 73 (idCall -> ID .)
    DIVIDE          reduce using rule 73 (idCall -> ID .)
    MOD             reduce using rule 73 (idCall -> ID .)
    PLUS            reduce using rule 73 (idCall -> ID .)
    MINUS           reduce using rule 73 (idCall -> ID .)
    MORE_THAN       reduce using rule 73 (idCall -> ID .)
    LESS_THAN       reduce using rule 73 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 73 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 73 (idCall -> ID .)
    EQUAL           reduce using rule 73 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 73 (idCall -> ID .)
    AND             reduce using rule 73 (idCall -> ID .)
    OR              reduce using rule 73 (idCall -> ID .)
    DOT_COMMA       reduce using rule 73 (idCall -> ID .)
    ASSIGN          reduce using rule 73 (idCall -> ID .)
    INCREMENT       reduce using rule 73 (idCall -> ID .)
    DECREMENT       reduce using rule 73 (idCall -> ID .)
    L_KEY           shift and go to state 57


state 52

    (51) superExp -> exp .
    (52) superExp -> exp . MORE_THAN exp
    (53) superExp -> exp . LESS_THAN exp
    (54) superExp -> exp . MORE_EQUAL exp
    (55) superExp -> exp . LESS_EQUAL exp
    (56) superExp -> exp . EQUAL exp
    (57) superExp -> exp . NOT_EQUAL exp

    AND             reduce using rule 51 (superExp -> exp .)
    OR              reduce using rule 51 (superExp -> exp .)
    DOT_COMMA       reduce using rule 51 (superExp -> exp .)
    R_PAR           reduce using rule 51 (superExp -> exp .)
    COMMA           reduce using rule 51 (superExp -> exp .)
    MORE_THAN       shift and go to state 69
    LESS_THAN       shift and go to state 70
    MORE_EQUAL      shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUAL           shift and go to state 73
    NOT_EQUAL       shift and go to state 74


state 53

    (65) factor -> INTEGER .

    TIMES           reduce using rule 65 (factor -> INTEGER .)
    DIVIDE          reduce using rule 65 (factor -> INTEGER .)
    MOD             reduce using rule 65 (factor -> INTEGER .)
    PLUS            reduce using rule 65 (factor -> INTEGER .)
    MINUS           reduce using rule 65 (factor -> INTEGER .)
    MORE_THAN       reduce using rule 65 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 65 (factor -> INTEGER .)
    MORE_EQUAL      reduce using rule 65 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 65 (factor -> INTEGER .)
    EQUAL           reduce using rule 65 (factor -> INTEGER .)
    NOT_EQUAL       reduce using rule 65 (factor -> INTEGER .)
    AND             reduce using rule 65 (factor -> INTEGER .)
    OR              reduce using rule 65 (factor -> INTEGER .)
    DOT_COMMA       reduce using rule 65 (factor -> INTEGER .)
    R_PAR           reduce using rule 65 (factor -> INTEGER .)
    R_KEY           reduce using rule 65 (factor -> INTEGER .)
    COMMA           reduce using rule 65 (factor -> INTEGER .)


state 54

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK . variables statements R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables
    (7) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 75

state 55

    (11) functionsHelp -> type . ID
    (12) functionsHelp -> type . ID COMMA functionsHelp2

    ID              shift and go to state 76


state 56

    (9) functions -> FUNCTION type ID L_PAR functionsHelp . R_PAR L_BRACK variables statements R_BRACK

    R_PAR           shift and go to state 77


state 57

    (74) idCall -> ID L_KEY . exp R_KEY
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    exp                            shift and go to state 37
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 58

    (38) functionCall -> ID L_PAR . functionCallParams R_PAR
    (39) functionCallParams -> . functionCallParamsOptional
    (40) functionCallParamsOptional -> .
    (41) functionCallParamsOptional -> . megaExp functionCallParamsMultiple
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    R_PAR           reduce using rule 40 (functionCallParamsOptional -> .)
    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    functionCallParams             shift and go to state 78
    functionCallParamsOptional     shift and go to state 79
    megaExp                        shift and go to state 80
    superExp                       shift and go to state 50
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 59

    (7) variables -> VAR type ID L_KEY INTEGER R_KEY . DOT_COMMA variables

    DOT_COMMA       shift and go to state 81


state 60

    (74) idCall -> ID L_KEY exp R_KEY .

    ASSIGN          reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    INCREMENT       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    DECREMENT       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    TIMES           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    DIVIDE          reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    MOD             reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    PLUS            reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    MINUS           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    R_KEY           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    MORE_THAN       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    LESS_THAN       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    MORE_EQUAL      reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    LESS_EQUAL      reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    EQUAL           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    NOT_EQUAL       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    AND             reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    OR              reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    DOT_COMMA       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    R_PAR           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    COMMA           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)


state 61

    (59) exp -> term PLUS . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    term                           shift and go to state 38
    exp                            shift and go to state 82
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 62

    (60) exp -> term MINUS . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    term                           shift and go to state 38
    exp                            shift and go to state 83
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 63

    (62) term -> factor TIMES . term
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    factor                         shift and go to state 39
    term                           shift and go to state 84
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 64

    (63) term -> factor DIVIDE . term
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    factor                         shift and go to state 39
    term                           shift and go to state 85
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 65

    (64) term -> factor MOD . term
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    factor                         shift and go to state 39
    term                           shift and go to state 86
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 66

    (71) factor -> L_PAR megaExp . R_PAR

    R_PAR           shift and go to state 87


state 67

    (49) megaExp -> superExp AND . superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    superExp                       shift and go to state 88
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 68

    (50) megaExp -> superExp OR . superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    superExp                       shift and go to state 89
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 69

    (52) superExp -> exp MORE_THAN . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    exp                            shift and go to state 90
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 70

    (53) superExp -> exp LESS_THAN . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    exp                            shift and go to state 91
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 71

    (54) superExp -> exp MORE_EQUAL . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    exp                            shift and go to state 92
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 72

    (55) superExp -> exp LESS_EQUAL . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    exp                            shift and go to state 93
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 73

    (56) superExp -> exp EQUAL . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    exp                            shift and go to state 94
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 74

    (57) superExp -> exp NOT_EQUAL . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    exp                            shift and go to state 95
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 75

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . print DOT_COMMA
    (28) statement -> . read DOT_COMMA
    (29) statement -> . lineComment
    (30) statement -> . return DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (44) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (47) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (75) print -> . PRINT L_PAR print_help R_PAR
    (81) read -> . READ L_PAR idCall R_PAR
    (82) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (31) return -> . RETURN megaExp
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 51
    IF              shift and go to state 106
    WHILE           shift and go to state 107
    PRINT           shift and go to state 108
    READ            shift and go to state 109
    COMMENT_LINE    shift and go to state 110
    RETURN          shift and go to state 111

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! RETURN          [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 96
    statement                      shift and go to state 97
    assignment                     shift and go to state 98
    functionCall                   shift and go to state 99
    ifBlock                        shift and go to state 100
    whileBlock                     shift and go to state 101
    print                          shift and go to state 102
    read                           shift and go to state 103
    lineComment                    shift and go to state 104
    return                         shift and go to state 105
    idCall                         shift and go to state 20
    assignIncr                     shift and go to state 21
    assignDecr                     shift and go to state 22

state 76

    (11) functionsHelp -> type ID .
    (12) functionsHelp -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 11 (functionsHelp -> type ID .)
    COMMA           shift and go to state 112


state 77

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR . L_BRACK variables statements R_BRACK

    L_BRACK         shift and go to state 113


state 78

    (38) functionCall -> ID L_PAR functionCallParams . R_PAR

    R_PAR           shift and go to state 114


state 79

    (39) functionCallParams -> functionCallParamsOptional .

    R_PAR           reduce using rule 39 (functionCallParams -> functionCallParamsOptional .)


state 80

    (41) functionCallParamsOptional -> megaExp . functionCallParamsMultiple
    (42) functionCallParamsMultiple -> .
    (43) functionCallParamsMultiple -> . COMMA functionCallParamsOptional

    R_PAR           reduce using rule 42 (functionCallParamsMultiple -> .)
    COMMA           shift and go to state 116

    functionCallParamsMultiple     shift and go to state 115

state 81

    (7) variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables
    (7) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 117

state 82

    (59) exp -> term PLUS exp .

    R_KEY           reduce using rule 59 (exp -> term PLUS exp .)
    MORE_THAN       reduce using rule 59 (exp -> term PLUS exp .)
    LESS_THAN       reduce using rule 59 (exp -> term PLUS exp .)
    MORE_EQUAL      reduce using rule 59 (exp -> term PLUS exp .)
    LESS_EQUAL      reduce using rule 59 (exp -> term PLUS exp .)
    EQUAL           reduce using rule 59 (exp -> term PLUS exp .)
    NOT_EQUAL       reduce using rule 59 (exp -> term PLUS exp .)
    AND             reduce using rule 59 (exp -> term PLUS exp .)
    OR              reduce using rule 59 (exp -> term PLUS exp .)
    DOT_COMMA       reduce using rule 59 (exp -> term PLUS exp .)
    R_PAR           reduce using rule 59 (exp -> term PLUS exp .)
    COMMA           reduce using rule 59 (exp -> term PLUS exp .)


state 83

    (60) exp -> term MINUS exp .

    R_KEY           reduce using rule 60 (exp -> term MINUS exp .)
    MORE_THAN       reduce using rule 60 (exp -> term MINUS exp .)
    LESS_THAN       reduce using rule 60 (exp -> term MINUS exp .)
    MORE_EQUAL      reduce using rule 60 (exp -> term MINUS exp .)
    LESS_EQUAL      reduce using rule 60 (exp -> term MINUS exp .)
    EQUAL           reduce using rule 60 (exp -> term MINUS exp .)
    NOT_EQUAL       reduce using rule 60 (exp -> term MINUS exp .)
    AND             reduce using rule 60 (exp -> term MINUS exp .)
    OR              reduce using rule 60 (exp -> term MINUS exp .)
    DOT_COMMA       reduce using rule 60 (exp -> term MINUS exp .)
    R_PAR           reduce using rule 60 (exp -> term MINUS exp .)
    COMMA           reduce using rule 60 (exp -> term MINUS exp .)


state 84

    (62) term -> factor TIMES term .

    PLUS            reduce using rule 62 (term -> factor TIMES term .)
    MINUS           reduce using rule 62 (term -> factor TIMES term .)
    R_KEY           reduce using rule 62 (term -> factor TIMES term .)
    MORE_THAN       reduce using rule 62 (term -> factor TIMES term .)
    LESS_THAN       reduce using rule 62 (term -> factor TIMES term .)
    MORE_EQUAL      reduce using rule 62 (term -> factor TIMES term .)
    LESS_EQUAL      reduce using rule 62 (term -> factor TIMES term .)
    EQUAL           reduce using rule 62 (term -> factor TIMES term .)
    NOT_EQUAL       reduce using rule 62 (term -> factor TIMES term .)
    AND             reduce using rule 62 (term -> factor TIMES term .)
    OR              reduce using rule 62 (term -> factor TIMES term .)
    DOT_COMMA       reduce using rule 62 (term -> factor TIMES term .)
    R_PAR           reduce using rule 62 (term -> factor TIMES term .)
    COMMA           reduce using rule 62 (term -> factor TIMES term .)


state 85

    (63) term -> factor DIVIDE term .

    PLUS            reduce using rule 63 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 63 (term -> factor DIVIDE term .)
    R_KEY           reduce using rule 63 (term -> factor DIVIDE term .)
    MORE_THAN       reduce using rule 63 (term -> factor DIVIDE term .)
    LESS_THAN       reduce using rule 63 (term -> factor DIVIDE term .)
    MORE_EQUAL      reduce using rule 63 (term -> factor DIVIDE term .)
    LESS_EQUAL      reduce using rule 63 (term -> factor DIVIDE term .)
    EQUAL           reduce using rule 63 (term -> factor DIVIDE term .)
    NOT_EQUAL       reduce using rule 63 (term -> factor DIVIDE term .)
    AND             reduce using rule 63 (term -> factor DIVIDE term .)
    OR              reduce using rule 63 (term -> factor DIVIDE term .)
    DOT_COMMA       reduce using rule 63 (term -> factor DIVIDE term .)
    R_PAR           reduce using rule 63 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 63 (term -> factor DIVIDE term .)


state 86

    (64) term -> factor MOD term .

    PLUS            reduce using rule 64 (term -> factor MOD term .)
    MINUS           reduce using rule 64 (term -> factor MOD term .)
    R_KEY           reduce using rule 64 (term -> factor MOD term .)
    MORE_THAN       reduce using rule 64 (term -> factor MOD term .)
    LESS_THAN       reduce using rule 64 (term -> factor MOD term .)
    MORE_EQUAL      reduce using rule 64 (term -> factor MOD term .)
    LESS_EQUAL      reduce using rule 64 (term -> factor MOD term .)
    EQUAL           reduce using rule 64 (term -> factor MOD term .)
    NOT_EQUAL       reduce using rule 64 (term -> factor MOD term .)
    AND             reduce using rule 64 (term -> factor MOD term .)
    OR              reduce using rule 64 (term -> factor MOD term .)
    DOT_COMMA       reduce using rule 64 (term -> factor MOD term .)
    R_PAR           reduce using rule 64 (term -> factor MOD term .)
    COMMA           reduce using rule 64 (term -> factor MOD term .)


state 87

    (71) factor -> L_PAR megaExp R_PAR .

    TIMES           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    DIVIDE          reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    MOD             reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    PLUS            reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    MINUS           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    R_KEY           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    MORE_THAN       reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    LESS_THAN       reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    MORE_EQUAL      reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    LESS_EQUAL      reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    EQUAL           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    NOT_EQUAL       reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    AND             reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    OR              reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    DOT_COMMA       reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    R_PAR           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    COMMA           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)


state 88

    (49) megaExp -> superExp AND superExp .

    DOT_COMMA       reduce using rule 49 (megaExp -> superExp AND superExp .)
    R_PAR           reduce using rule 49 (megaExp -> superExp AND superExp .)
    COMMA           reduce using rule 49 (megaExp -> superExp AND superExp .)


state 89

    (50) megaExp -> superExp OR superExp .

    DOT_COMMA       reduce using rule 50 (megaExp -> superExp OR superExp .)
    R_PAR           reduce using rule 50 (megaExp -> superExp OR superExp .)
    COMMA           reduce using rule 50 (megaExp -> superExp OR superExp .)


state 90

    (52) superExp -> exp MORE_THAN exp .

    AND             reduce using rule 52 (superExp -> exp MORE_THAN exp .)
    OR              reduce using rule 52 (superExp -> exp MORE_THAN exp .)
    DOT_COMMA       reduce using rule 52 (superExp -> exp MORE_THAN exp .)
    R_PAR           reduce using rule 52 (superExp -> exp MORE_THAN exp .)
    COMMA           reduce using rule 52 (superExp -> exp MORE_THAN exp .)


state 91

    (53) superExp -> exp LESS_THAN exp .

    AND             reduce using rule 53 (superExp -> exp LESS_THAN exp .)
    OR              reduce using rule 53 (superExp -> exp LESS_THAN exp .)
    DOT_COMMA       reduce using rule 53 (superExp -> exp LESS_THAN exp .)
    R_PAR           reduce using rule 53 (superExp -> exp LESS_THAN exp .)
    COMMA           reduce using rule 53 (superExp -> exp LESS_THAN exp .)


state 92

    (54) superExp -> exp MORE_EQUAL exp .

    AND             reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)
    OR              reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)
    DOT_COMMA       reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)
    R_PAR           reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)
    COMMA           reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)


state 93

    (55) superExp -> exp LESS_EQUAL exp .

    AND             reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)
    OR              reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)
    DOT_COMMA       reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)
    R_PAR           reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)
    COMMA           reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)


state 94

    (56) superExp -> exp EQUAL exp .

    AND             reduce using rule 56 (superExp -> exp EQUAL exp .)
    OR              reduce using rule 56 (superExp -> exp EQUAL exp .)
    DOT_COMMA       reduce using rule 56 (superExp -> exp EQUAL exp .)
    R_PAR           reduce using rule 56 (superExp -> exp EQUAL exp .)
    COMMA           reduce using rule 56 (superExp -> exp EQUAL exp .)


state 95

    (57) superExp -> exp NOT_EQUAL exp .

    AND             reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)
    OR              reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)
    DOT_COMMA       reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)
    R_PAR           reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)
    COMMA           reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)


state 96

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements . R_BRACK

    R_BRACK         shift and go to state 118


state 97

    (21) statements -> statement . statements
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . print DOT_COMMA
    (28) statement -> . read DOT_COMMA
    (29) statement -> . lineComment
    (30) statement -> . return DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (44) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (47) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (75) print -> . PRINT L_PAR print_help R_PAR
    (81) read -> . READ L_PAR idCall R_PAR
    (82) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (31) return -> . RETURN megaExp
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 51
    IF              shift and go to state 106
    WHILE           shift and go to state 107
    PRINT           shift and go to state 108
    READ            shift and go to state 109
    COMMENT_LINE    shift and go to state 110
    RETURN          shift and go to state 111

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! RETURN          [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statement                      shift and go to state 97
    statements                     shift and go to state 119
    assignment                     shift and go to state 98
    functionCall                   shift and go to state 99
    ifBlock                        shift and go to state 100
    whileBlock                     shift and go to state 101
    print                          shift and go to state 102
    read                           shift and go to state 103
    lineComment                    shift and go to state 104
    return                         shift and go to state 105
    idCall                         shift and go to state 20
    assignIncr                     shift and go to state 21
    assignDecr                     shift and go to state 22

state 98

    (23) statement -> assignment . DOT_COMMA

    DOT_COMMA       shift and go to state 120


state 99

    (24) statement -> functionCall . DOT_COMMA

    DOT_COMMA       shift and go to state 121


state 100

    (25) statement -> ifBlock .

    ID              reduce using rule 25 (statement -> ifBlock .)
    IF              reduce using rule 25 (statement -> ifBlock .)
    WHILE           reduce using rule 25 (statement -> ifBlock .)
    PRINT           reduce using rule 25 (statement -> ifBlock .)
    READ            reduce using rule 25 (statement -> ifBlock .)
    COMMENT_LINE    reduce using rule 25 (statement -> ifBlock .)
    RETURN          reduce using rule 25 (statement -> ifBlock .)
    R_BRACK         reduce using rule 25 (statement -> ifBlock .)


state 101

    (26) statement -> whileBlock .

    ID              reduce using rule 26 (statement -> whileBlock .)
    IF              reduce using rule 26 (statement -> whileBlock .)
    WHILE           reduce using rule 26 (statement -> whileBlock .)
    PRINT           reduce using rule 26 (statement -> whileBlock .)
    READ            reduce using rule 26 (statement -> whileBlock .)
    COMMENT_LINE    reduce using rule 26 (statement -> whileBlock .)
    RETURN          reduce using rule 26 (statement -> whileBlock .)
    R_BRACK         reduce using rule 26 (statement -> whileBlock .)


state 102

    (27) statement -> print . DOT_COMMA

    DOT_COMMA       shift and go to state 122


state 103

    (28) statement -> read . DOT_COMMA

    DOT_COMMA       shift and go to state 123


state 104

    (29) statement -> lineComment .

    ID              reduce using rule 29 (statement -> lineComment .)
    IF              reduce using rule 29 (statement -> lineComment .)
    WHILE           reduce using rule 29 (statement -> lineComment .)
    PRINT           reduce using rule 29 (statement -> lineComment .)
    READ            reduce using rule 29 (statement -> lineComment .)
    COMMENT_LINE    reduce using rule 29 (statement -> lineComment .)
    RETURN          reduce using rule 29 (statement -> lineComment .)
    R_BRACK         reduce using rule 29 (statement -> lineComment .)


state 105

    (30) statement -> return . DOT_COMMA

    DOT_COMMA       shift and go to state 124


state 106

    (44) ifBlock -> IF . L_PAR megaExp R_PAR body optionalElse

    L_PAR           shift and go to state 125


state 107

    (47) whileBlock -> WHILE . L_PAR megaExp R_PAR body

    L_PAR           shift and go to state 126


state 108

    (75) print -> PRINT . L_PAR print_help R_PAR

    L_PAR           shift and go to state 127


state 109

    (81) read -> READ . L_PAR idCall R_PAR

    L_PAR           shift and go to state 128


state 110

    (82) lineComment -> COMMENT_LINE . ALPHANUMERIC END_LINE

    ALPHANUMERIC    shift and go to state 129


state 111

    (31) return -> RETURN . megaExp
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    megaExp                        shift and go to state 130
    superExp                       shift and go to state 50
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 112

    (12) functionsHelp -> type ID COMMA . functionsHelp2
    (13) functionsHelp2 -> . type ID
    (14) functionsHelp2 -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 131
    functionsHelp2                 shift and go to state 132

state 113

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK . variables statements R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables
    (7) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 133

state 114

    (38) functionCall -> ID L_PAR functionCallParams R_PAR .

    TIMES           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    DIVIDE          reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MOD             reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    PLUS            reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MINUS           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_KEY           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    DOT_COMMA       reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_THAN       reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_THAN       reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_EQUAL      reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_EQUAL      reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    EQUAL           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    NOT_EQUAL       reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    AND             reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    OR              reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_PAR           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    COMMA           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)


state 115

    (41) functionCallParamsOptional -> megaExp functionCallParamsMultiple .

    R_PAR           reduce using rule 41 (functionCallParamsOptional -> megaExp functionCallParamsMultiple .)


state 116

    (43) functionCallParamsMultiple -> COMMA . functionCallParamsOptional
    (40) functionCallParamsOptional -> .
    (41) functionCallParamsOptional -> . megaExp functionCallParamsMultiple
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    R_PAR           reduce using rule 40 (functionCallParamsOptional -> .)
    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    functionCallParamsOptional     shift and go to state 134
    megaExp                        shift and go to state 80
    superExp                       shift and go to state 50
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 117

    (7) variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .

    FUNCTION        reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    MAIN            reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    ID              reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    IF              reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    WHILE           reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    PRINT           reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    READ            reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    RETURN          reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    R_BRACK         reduce using rule 7 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)


state 118

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK .

    R_BRACK         reduce using rule 2 (mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK .)


state 119

    (21) statements -> statement statements .

    R_BRACK         reduce using rule 21 (statements -> statement statements .)


state 120

    (23) statement -> assignment DOT_COMMA .

    ID              reduce using rule 23 (statement -> assignment DOT_COMMA .)
    IF              reduce using rule 23 (statement -> assignment DOT_COMMA .)
    WHILE           reduce using rule 23 (statement -> assignment DOT_COMMA .)
    PRINT           reduce using rule 23 (statement -> assignment DOT_COMMA .)
    READ            reduce using rule 23 (statement -> assignment DOT_COMMA .)
    COMMENT_LINE    reduce using rule 23 (statement -> assignment DOT_COMMA .)
    RETURN          reduce using rule 23 (statement -> assignment DOT_COMMA .)
    R_BRACK         reduce using rule 23 (statement -> assignment DOT_COMMA .)


state 121

    (24) statement -> functionCall DOT_COMMA .

    ID              reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    IF              reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    WHILE           reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    PRINT           reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    READ            reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    COMMENT_LINE    reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    RETURN          reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    R_BRACK         reduce using rule 24 (statement -> functionCall DOT_COMMA .)


state 122

    (27) statement -> print DOT_COMMA .

    ID              reduce using rule 27 (statement -> print DOT_COMMA .)
    IF              reduce using rule 27 (statement -> print DOT_COMMA .)
    WHILE           reduce using rule 27 (statement -> print DOT_COMMA .)
    PRINT           reduce using rule 27 (statement -> print DOT_COMMA .)
    READ            reduce using rule 27 (statement -> print DOT_COMMA .)
    COMMENT_LINE    reduce using rule 27 (statement -> print DOT_COMMA .)
    RETURN          reduce using rule 27 (statement -> print DOT_COMMA .)
    R_BRACK         reduce using rule 27 (statement -> print DOT_COMMA .)


state 123

    (28) statement -> read DOT_COMMA .

    ID              reduce using rule 28 (statement -> read DOT_COMMA .)
    IF              reduce using rule 28 (statement -> read DOT_COMMA .)
    WHILE           reduce using rule 28 (statement -> read DOT_COMMA .)
    PRINT           reduce using rule 28 (statement -> read DOT_COMMA .)
    READ            reduce using rule 28 (statement -> read DOT_COMMA .)
    COMMENT_LINE    reduce using rule 28 (statement -> read DOT_COMMA .)
    RETURN          reduce using rule 28 (statement -> read DOT_COMMA .)
    R_BRACK         reduce using rule 28 (statement -> read DOT_COMMA .)


state 124

    (30) statement -> return DOT_COMMA .

    ID              reduce using rule 30 (statement -> return DOT_COMMA .)
    IF              reduce using rule 30 (statement -> return DOT_COMMA .)
    WHILE           reduce using rule 30 (statement -> return DOT_COMMA .)
    PRINT           reduce using rule 30 (statement -> return DOT_COMMA .)
    READ            reduce using rule 30 (statement -> return DOT_COMMA .)
    COMMENT_LINE    reduce using rule 30 (statement -> return DOT_COMMA .)
    RETURN          reduce using rule 30 (statement -> return DOT_COMMA .)
    R_BRACK         reduce using rule 30 (statement -> return DOT_COMMA .)


state 125

    (44) ifBlock -> IF L_PAR . megaExp R_PAR body optionalElse
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    megaExp                        shift and go to state 135
    superExp                       shift and go to state 50
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 126

    (47) whileBlock -> WHILE L_PAR . megaExp R_PAR body
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    ALPHANUMERIC    shift and go to state 41
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45
    ID              shift and go to state 35

    megaExp                        shift and go to state 136
    superExp                       shift and go to state 50
    exp                            shift and go to state 52
    term                           shift and go to state 38
    factor                         shift and go to state 39
    idCall                         shift and go to state 44
    functionCall                   shift and go to state 46

state 127

    (75) print -> PRINT L_PAR . print_help R_PAR
    (76) print_help -> .
    (77) print_help -> . ALPHANUMERIC
    (78) print_help -> . idCall
    (79) print_help -> . functionCall
    (80) print_help -> . megaExp
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall

    R_PAR           reduce using rule 76 (print_help -> .)
    ALPHANUMERIC    shift and go to state 138
    ID              shift and go to state 35
    INTEGER         shift and go to state 53
    DECIMAL         shift and go to state 40
    CHARACTER       shift and go to state 42
    BOOLEAN         shift and go to state 43
    L_PAR           shift and go to state 45

    print_help                     shift and go to state 137
    idCall                         shift and go to state 139
    functionCall                   shift and go to state 140
    megaExp                        shift and go to state 141
    exp                            shift and go to state 52
    superExp                       shift and go to state 50
    term                           shift and go to state 38
    factor                         shift and go to state 39

state 128

    (81) read -> READ L_PAR . idCall R_PAR
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 143

    idCall                         shift and go to state 142

state 129

    (82) lineComment -> COMMENT_LINE ALPHANUMERIC . END_LINE

    END_LINE        shift and go to state 144


state 130

    (31) return -> RETURN megaExp .

    DOT_COMMA       reduce using rule 31 (return -> RETURN megaExp .)


state 131

    (13) functionsHelp2 -> type . ID
    (14) functionsHelp2 -> type . ID COMMA functionsHelp2

    ID              shift and go to state 145


state 132

    (12) functionsHelp -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 12 (functionsHelp -> type ID COMMA functionsHelp2 .)


state 133

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . print DOT_COMMA
    (28) statement -> . read DOT_COMMA
    (29) statement -> . lineComment
    (30) statement -> . return DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (44) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (47) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (75) print -> . PRINT L_PAR print_help R_PAR
    (81) read -> . READ L_PAR idCall R_PAR
    (82) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (31) return -> . RETURN megaExp
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 51
    IF              shift and go to state 106
    WHILE           shift and go to state 107
    PRINT           shift and go to state 108
    READ            shift and go to state 109
    COMMENT_LINE    shift and go to state 110
    RETURN          shift and go to state 111

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! RETURN          [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 146
    statement                      shift and go to state 97
    assignment                     shift and go to state 98
    functionCall                   shift and go to state 99
    ifBlock                        shift and go to state 100
    whileBlock                     shift and go to state 101
    print                          shift and go to state 102
    read                           shift and go to state 103
    lineComment                    shift and go to state 104
    return                         shift and go to state 105
    idCall                         shift and go to state 20
    assignIncr                     shift and go to state 21
    assignDecr                     shift and go to state 22

state 134

    (43) functionCallParamsMultiple -> COMMA functionCallParamsOptional .

    R_PAR           reduce using rule 43 (functionCallParamsMultiple -> COMMA functionCallParamsOptional .)


state 135

    (44) ifBlock -> IF L_PAR megaExp . R_PAR body optionalElse

    R_PAR           shift and go to state 147


state 136

    (47) whileBlock -> WHILE L_PAR megaExp . R_PAR body

    R_PAR           shift and go to state 148


state 137

    (75) print -> PRINT L_PAR print_help . R_PAR

    R_PAR           shift and go to state 149


state 138

    (77) print_help -> ALPHANUMERIC .
    (67) factor -> ALPHANUMERIC .

  ! reduce/reduce conflict for R_PAR resolved using rule 67 (factor -> ALPHANUMERIC .)
    TIMES           reduce using rule 67 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 67 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 67 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 67 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 67 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 67 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 67 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 67 (factor -> ALPHANUMERIC .)

  ! R_PAR           [ reduce using rule 77 (print_help -> ALPHANUMERIC .) ]


state 139

    (78) print_help -> idCall .
    (70) factor -> idCall .

  ! reduce/reduce conflict for R_PAR resolved using rule 70 (factor -> idCall .)
    TIMES           reduce using rule 70 (factor -> idCall .)
    DIVIDE          reduce using rule 70 (factor -> idCall .)
    MOD             reduce using rule 70 (factor -> idCall .)
    PLUS            reduce using rule 70 (factor -> idCall .)
    MINUS           reduce using rule 70 (factor -> idCall .)
    MORE_THAN       reduce using rule 70 (factor -> idCall .)
    LESS_THAN       reduce using rule 70 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 70 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 70 (factor -> idCall .)
    EQUAL           reduce using rule 70 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 70 (factor -> idCall .)
    AND             reduce using rule 70 (factor -> idCall .)
    OR              reduce using rule 70 (factor -> idCall .)
    R_PAR           reduce using rule 70 (factor -> idCall .)

  ! R_PAR           [ reduce using rule 78 (print_help -> idCall .) ]


state 140

    (79) print_help -> functionCall .
    (72) factor -> functionCall .

  ! reduce/reduce conflict for R_PAR resolved using rule 72 (factor -> functionCall .)
    TIMES           reduce using rule 72 (factor -> functionCall .)
    DIVIDE          reduce using rule 72 (factor -> functionCall .)
    MOD             reduce using rule 72 (factor -> functionCall .)
    PLUS            reduce using rule 72 (factor -> functionCall .)
    MINUS           reduce using rule 72 (factor -> functionCall .)
    MORE_THAN       reduce using rule 72 (factor -> functionCall .)
    LESS_THAN       reduce using rule 72 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 72 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 72 (factor -> functionCall .)
    EQUAL           reduce using rule 72 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 72 (factor -> functionCall .)
    AND             reduce using rule 72 (factor -> functionCall .)
    OR              reduce using rule 72 (factor -> functionCall .)
    R_PAR           reduce using rule 72 (factor -> functionCall .)

  ! R_PAR           [ reduce using rule 79 (print_help -> functionCall .) ]


state 141

    (80) print_help -> megaExp .

    R_PAR           reduce using rule 80 (print_help -> megaExp .)


state 142

    (81) read -> READ L_PAR idCall . R_PAR

    R_PAR           shift and go to state 150


state 143

    (73) idCall -> ID .
    (74) idCall -> ID . L_KEY exp R_KEY

    R_PAR           reduce using rule 73 (idCall -> ID .)
    L_KEY           shift and go to state 57


state 144

    (82) lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .

    ID              reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    IF              reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    WHILE           reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    PRINT           reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    READ            reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    COMMENT_LINE    reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    RETURN          reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    R_BRACK         reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)


state 145

    (13) functionsHelp2 -> type ID .
    (14) functionsHelp2 -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 13 (functionsHelp2 -> type ID .)
    COMMA           shift and go to state 151


state 146

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements . R_BRACK

    R_BRACK         shift and go to state 152


state 147

    (44) ifBlock -> IF L_PAR megaExp R_PAR . body optionalElse
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 154

    body                           shift and go to state 153

state 148

    (47) whileBlock -> WHILE L_PAR megaExp R_PAR . body
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 154

    body                           shift and go to state 155

state 149

    (75) print -> PRINT L_PAR print_help R_PAR .

    DOT_COMMA       reduce using rule 75 (print -> PRINT L_PAR print_help R_PAR .)


state 150

    (81) read -> READ L_PAR idCall R_PAR .

    DOT_COMMA       reduce using rule 81 (read -> READ L_PAR idCall R_PAR .)


state 151

    (14) functionsHelp2 -> type ID COMMA . functionsHelp2
    (13) functionsHelp2 -> . type ID
    (14) functionsHelp2 -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 131
    functionsHelp2                 shift and go to state 156

state 152

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK .

    MAIN            reduce using rule 9 (functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK .)


state 153

    (44) ifBlock -> IF L_PAR megaExp R_PAR body . optionalElse
    (45) optionalElse -> .
    (46) optionalElse -> . ELSE body

    ID              reduce using rule 45 (optionalElse -> .)
    IF              reduce using rule 45 (optionalElse -> .)
    WHILE           reduce using rule 45 (optionalElse -> .)
    PRINT           reduce using rule 45 (optionalElse -> .)
    READ            reduce using rule 45 (optionalElse -> .)
    COMMENT_LINE    reduce using rule 45 (optionalElse -> .)
    RETURN          reduce using rule 45 (optionalElse -> .)
    R_BRACK         reduce using rule 45 (optionalElse -> .)
    ELSE            shift and go to state 158

    optionalElse                   shift and go to state 157

state 154

    (3) body -> L_BRACK . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . print DOT_COMMA
    (28) statement -> . read DOT_COMMA
    (29) statement -> . lineComment
    (30) statement -> . return DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (44) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (47) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (75) print -> . PRINT L_PAR print_help R_PAR
    (81) read -> . READ L_PAR idCall R_PAR
    (82) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (31) return -> . RETURN megaExp
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 51
    IF              shift and go to state 106
    WHILE           shift and go to state 107
    PRINT           shift and go to state 108
    READ            shift and go to state 109
    COMMENT_LINE    shift and go to state 110
    RETURN          shift and go to state 111

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! RETURN          [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 159
    statement                      shift and go to state 97
    assignment                     shift and go to state 98
    functionCall                   shift and go to state 99
    ifBlock                        shift and go to state 100
    whileBlock                     shift and go to state 101
    print                          shift and go to state 102
    read                           shift and go to state 103
    lineComment                    shift and go to state 104
    return                         shift and go to state 105
    idCall                         shift and go to state 20
    assignIncr                     shift and go to state 21
    assignDecr                     shift and go to state 22

state 155

    (47) whileBlock -> WHILE L_PAR megaExp R_PAR body .

    ID              reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    IF              reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    WHILE           reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    PRINT           reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    READ            reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    COMMENT_LINE    reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    RETURN          reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    R_BRACK         reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)


state 156

    (14) functionsHelp2 -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 14 (functionsHelp2 -> type ID COMMA functionsHelp2 .)


state 157

    (44) ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .

    ID              reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    IF              reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    WHILE           reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    PRINT           reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    READ            reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    COMMENT_LINE    reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    RETURN          reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    R_BRACK         reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)


state 158

    (46) optionalElse -> ELSE . body
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 154

    body                           shift and go to state 160

state 159

    (3) body -> L_BRACK statements . R_BRACK

    R_BRACK         shift and go to state 161


state 160

    (46) optionalElse -> ELSE body .

    ID              reduce using rule 46 (optionalElse -> ELSE body .)
    IF              reduce using rule 46 (optionalElse -> ELSE body .)
    WHILE           reduce using rule 46 (optionalElse -> ELSE body .)
    PRINT           reduce using rule 46 (optionalElse -> ELSE body .)
    READ            reduce using rule 46 (optionalElse -> ELSE body .)
    COMMENT_LINE    reduce using rule 46 (optionalElse -> ELSE body .)
    RETURN          reduce using rule 46 (optionalElse -> ELSE body .)
    R_BRACK         reduce using rule 46 (optionalElse -> ELSE body .)


state 161

    (3) body -> L_BRACK statements R_BRACK .

    ELSE            reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    ID              reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    IF              reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    WHILE           reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    PRINT           reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    READ            reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    COMMENT_LINE    reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    RETURN          reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    R_BRACK         reduce using rule 3 (body -> L_BRACK statements R_BRACK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for R_KEY in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for READ in state 75 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 75 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 97 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 97 resolved as shift
WARNING: shift/reduce conflict for READ in state 97 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 97 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 133 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 133 resolved as shift
WARNING: shift/reduce conflict for READ in state 133 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 133 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 154 resolved as shift
WARNING: shift/reduce conflict for READ in state 154 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 154 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 154 resolved as shift
WARNING: reduce/reduce conflict in state 49 resolved using rule (assignment -> idCall ASSIGN functionCall)
WARNING: rejected rule (factor -> functionCall) in state 49
WARNING: reduce/reduce conflict in state 75 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 75
WARNING: reduce/reduce conflict in state 97 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 97
WARNING: reduce/reduce conflict in state 133 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 133
WARNING: reduce/reduce conflict in state 138 resolved using rule (factor -> ALPHANUMERIC)
WARNING: rejected rule (print_help -> ALPHANUMERIC) in state 138
WARNING: reduce/reduce conflict in state 139 resolved using rule (factor -> idCall)
WARNING: rejected rule (print_help -> idCall) in state 139
WARNING: reduce/reduce conflict in state 140 resolved using rule (factor -> functionCall)
WARNING: rejected rule (print_help -> functionCall) in state 140
WARNING: reduce/reduce conflict in state 154 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 154
WARNING: Rule (statement -> <empty>) is never reduced
WARNING: Rule (print_help -> ALPHANUMERIC) is never reduced
WARNING: Rule (print_help -> idCall) is never reduced
WARNING: Rule (print_help -> functionCall) is never reduced
