Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID L_KEY variables functions mainBody R_KEY
Rule 2     mainBody -> MAIN L_PAR R_PAR L_KEY variables statements R_KEY
Rule 3     body -> L_KEY statements R_KEY
Rule 4     variables -> <empty>
Rule 5     variables -> VAR type ID DOT_COMMA variables
Rule 6     variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
Rule 7     variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables
Rule 8     functions -> <empty>
Rule 9     functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_KEY variables statements R_KEY
Rule 10    functionsHelp -> <empty>
Rule 11    functionsHelp -> type ID
Rule 12    functionsHelp -> type ID COMMA functionsHelp2
Rule 13    functionsHelp2 -> type ID
Rule 14    functionsHelp2 -> type ID COMMA functionsHelp2
Rule 15    type -> INT
Rule 16    type -> DECIM
Rule 17    type -> BOOL
Rule 18    type -> CHAR
Rule 19    type -> STRING
Rule 20    type -> VOID
Rule 21    statements -> <empty>
Rule 22    statements -> statement statements
Rule 23    statement -> <empty>
Rule 24    statement -> assignment DOT_COMMA
Rule 25    statement -> functionCall DOT_COMMA
Rule 26    statement -> ifBlock
Rule 27    statement -> whileBlock
Rule 28    statement -> print DOT_COMMA
Rule 29    statement -> read DOT_COMMA
Rule 30    statement -> lineComment
Rule 31    statement -> return DOT_COMMA
Rule 32    return -> RETURN megaExp
Rule 33    assignment -> idCall ASSIGN megaExp
Rule 34    assignment -> idCall ASSIGN functionCall
Rule 35    assignment -> assignIncr
Rule 36    assignment -> assignDecr
Rule 37    assignIncr -> idCall INCREMENT
Rule 38    assignDecr -> idCall DECREMENT
Rule 39    functionCall -> ID L_PAR functionCallParams R_PAR
Rule 40    functionCallParams -> <empty>
Rule 41    functionCallParams -> functionCallParamsOptional
Rule 42    functionCallParamsOptional -> megaExp COMMA functionCallParamsOptional
Rule 43    functionCallParamsOptional -> megaExp
Rule 44    ifBlock -> IF L_PAR megaExp R_PAR body optionalElse
Rule 45    optionalElse -> <empty>
Rule 46    optionalElse -> ELSE body
Rule 47    whileBlock -> WHILE L_PAR megaExp R_PAR body
Rule 48    megaExp -> superExp
Rule 49    megaExp -> superExp AND superExp
Rule 50    megaExp -> superExp OR superExp
Rule 51    superExp -> exp
Rule 52    superExp -> exp MORE_THAN exp
Rule 53    superExp -> exp LESS_THAN exp
Rule 54    superExp -> exp MORE_EQUAL exp
Rule 55    superExp -> exp LESS_EQUAL exp
Rule 56    superExp -> exp EQUAL exp
Rule 57    superExp -> exp NOT_EQUAL exp
Rule 58    exp -> term
Rule 59    exp -> term PLUS exp
Rule 60    exp -> term MINUS exp
Rule 61    term -> factor
Rule 62    term -> factor TIMES term
Rule 63    term -> factor DIVIDE term
Rule 64    term -> factor MOD term
Rule 65    factor -> INTEGER
Rule 66    factor -> DECIMAL
Rule 67    factor -> ALPHANUMERIC
Rule 68    factor -> CHARACTER
Rule 69    factor -> BOOLEAN
Rule 70    factor -> VOID
Rule 71    factor -> idCall
Rule 72    factor -> L_PAR megaExp R_PAR
Rule 73    factor -> functionCall
Rule 74    idCall -> ID
Rule 75    idCall -> ID L_BRACK exp R_BRACK
Rule 76    idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
Rule 77    print -> PRINT L_PAR print_help R_PAR
Rule 78    print_help -> <empty>
Rule 79    print_help -> ALPHANUMERIC
Rule 80    print_help -> idCall
Rule 81    print_help -> functionCall
Rule 82    print_help -> megaExp
Rule 83    read -> READ L_PAR idCall R_PAR
Rule 84    lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE

Terminals, with rules where they appear

ALPHANUMERIC         : 67 79 84
AND                  : 49
ASSIGN               : 33 34
BOOL                 : 17
BOOLEAN              : 69
CHAR                 : 18
CHARACTER            : 68
COMMA                : 12 14 42
COMMENT_LINE         : 84
DECIM                : 16
DECIMAL              : 66
DECREMENT            : 38
DIVIDE               : 63
DOT_COMMA            : 5 6 7 24 25 28 29 31
ELSE                 : 46
END_LINE             : 84
EQUAL                : 56
FUNCTION             : 9
ID                   : 1 5 6 7 9 11 12 13 14 39 74 75 76
IF                   : 44
INCREMENT            : 37
INT                  : 15
INTEGER              : 6 7 7 65
LESS_EQUAL           : 55
LESS_THAN            : 53
L_BRACK              : 6 7 7 75 76 76
L_KEY                : 1 2 3 9
L_PAR                : 2 9 39 44 47 72 77 83
MAIN                 : 2
MINUS                : 60
MOD                  : 64
MORE_EQUAL           : 54
MORE_THAN            : 52
NOT_EQUAL            : 57
OR                   : 50
PLUS                 : 59
PRINT                : 77
PROGRAM              : 1
READ                 : 83
RETURN               : 32
R_BRACK              : 6 7 7 75 76 76
R_KEY                : 1 2 3 9
R_PAR                : 2 9 39 44 47 72 77 83
STRING               : 19
TIMES                : 62
VAR                  : 5 6 7
VOID                 : 20 70
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

assignDecr           : 36
assignIncr           : 35
assignment           : 24
body                 : 44 46 47
exp                  : 51 52 52 53 53 54 54 55 55 56 56 57 57 59 60 75 76 76
factor               : 61 62 63 64
functionCall         : 25 34 73 81
functionCallParams   : 39
functionCallParamsOptional : 41 42
functions            : 1
functionsHelp        : 9
functionsHelp2       : 12 14
idCall               : 33 34 37 38 71 80 83
ifBlock              : 26
lineComment          : 30
mainBody             : 1
megaExp              : 32 33 42 43 44 47 72 82
optionalElse         : 44
print                : 28
print_help           : 77
program              : 0
read                 : 29
return               : 31
statement            : 22
statements           : 2 3 9 22
superExp             : 48 49 49 50 50
term                 : 58 59 60 62 63 64
type                 : 5 6 7 9 11 12 13 14
variables            : 1 2 5 6 7 9
whileBlock           : 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID L_KEY variables functions mainBody R_KEY

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID L_KEY variables functions mainBody R_KEY

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . L_KEY variables functions mainBody R_KEY

    L_KEY           shift and go to state 4


state 4

    (1) program -> PROGRAM ID L_KEY . variables functions mainBody R_KEY
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> . VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 5

state 5

    (1) program -> PROGRAM ID L_KEY variables . functions mainBody R_KEY
    (8) functions -> .
    (9) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_KEY variables statements R_KEY

    MAIN            reduce using rule 8 (functions -> .)
    FUNCTION        shift and go to state 8

    functions                      shift and go to state 7

state 6

    (5) variables -> VAR . type ID DOT_COMMA variables
    (6) variables -> VAR . type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> VAR . type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING
    (20) type -> . VOID

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 9

state 7

    (1) program -> PROGRAM ID L_KEY variables functions . mainBody R_KEY
    (2) mainBody -> . MAIN L_PAR R_PAR L_KEY variables statements R_KEY

    MAIN            shift and go to state 17

    mainBody                       shift and go to state 16

state 8

    (9) functions -> FUNCTION . type ID L_PAR functionsHelp R_PAR L_KEY variables statements R_KEY
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING
    (20) type -> . VOID

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 18

state 9

    (5) variables -> VAR type . ID DOT_COMMA variables
    (6) variables -> VAR type . ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> VAR type . ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    ID              shift and go to state 19


state 10

    (15) type -> INT .

    ID              reduce using rule 15 (type -> INT .)


state 11

    (16) type -> DECIM .

    ID              reduce using rule 16 (type -> DECIM .)


state 12

    (17) type -> BOOL .

    ID              reduce using rule 17 (type -> BOOL .)


state 13

    (18) type -> CHAR .

    ID              reduce using rule 18 (type -> CHAR .)


state 14

    (19) type -> STRING .

    ID              reduce using rule 19 (type -> STRING .)


state 15

    (20) type -> VOID .

    ID              reduce using rule 20 (type -> VOID .)


state 16

    (1) program -> PROGRAM ID L_KEY variables functions mainBody . R_KEY

    R_KEY           shift and go to state 20


state 17

    (2) mainBody -> MAIN . L_PAR R_PAR L_KEY variables statements R_KEY

    L_PAR           shift and go to state 21


state 18

    (9) functions -> FUNCTION type . ID L_PAR functionsHelp R_PAR L_KEY variables statements R_KEY

    ID              shift and go to state 22


state 19

    (5) variables -> VAR type ID . DOT_COMMA variables
    (6) variables -> VAR type ID . L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> VAR type ID . L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    DOT_COMMA       shift and go to state 23
    L_BRACK         shift and go to state 24


state 20

    (1) program -> PROGRAM ID L_KEY variables functions mainBody R_KEY .

    $end            reduce using rule 1 (program -> PROGRAM ID L_KEY variables functions mainBody R_KEY .)


state 21

    (2) mainBody -> MAIN L_PAR . R_PAR L_KEY variables statements R_KEY

    R_PAR           shift and go to state 25


state 22

    (9) functions -> FUNCTION type ID . L_PAR functionsHelp R_PAR L_KEY variables statements R_KEY

    L_PAR           shift and go to state 26


state 23

    (5) variables -> VAR type ID DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> . VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_KEY           reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 27

state 24

    (6) variables -> VAR type ID L_BRACK . INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> VAR type ID L_BRACK . INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    INTEGER         shift and go to state 28


state 25

    (2) mainBody -> MAIN L_PAR R_PAR . L_KEY variables statements R_KEY

    L_KEY           shift and go to state 29


state 26

    (9) functions -> FUNCTION type ID L_PAR . functionsHelp R_PAR L_KEY variables statements R_KEY
    (10) functionsHelp -> .
    (11) functionsHelp -> . type ID
    (12) functionsHelp -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING
    (20) type -> . VOID

    R_PAR           reduce using rule 10 (functionsHelp -> .)
    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 30
    functionsHelp                  shift and go to state 31

state 27

    (5) variables -> VAR type ID DOT_COMMA variables .

    FUNCTION        reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    MAIN            reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    ID              reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    IF              reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    WHILE           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    PRINT           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    READ            reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    RETURN          reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    R_KEY           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)


state 28

    (6) variables -> VAR type ID L_BRACK INTEGER . R_BRACK DOT_COMMA variables
    (7) variables -> VAR type ID L_BRACK INTEGER . R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    R_BRACK         shift and go to state 32


state 29

    (2) mainBody -> MAIN L_PAR R_PAR L_KEY . variables statements R_KEY
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> . VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_KEY           reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 33

state 30

    (11) functionsHelp -> type . ID
    (12) functionsHelp -> type . ID COMMA functionsHelp2

    ID              shift and go to state 34


state 31

    (9) functions -> FUNCTION type ID L_PAR functionsHelp . R_PAR L_KEY variables statements R_KEY

    R_PAR           shift and go to state 35


state 32

    (6) variables -> VAR type ID L_BRACK INTEGER R_BRACK . DOT_COMMA variables
    (7) variables -> VAR type ID L_BRACK INTEGER R_BRACK . L_BRACK INTEGER R_BRACK DOT_COMMA variables

    DOT_COMMA       shift and go to state 37
    L_BRACK         shift and go to state 36


state 33

    (2) mainBody -> MAIN L_PAR R_PAR L_KEY variables . statements R_KEY
    (21) statements -> .
    (22) statements -> . statement statements
    (23) statement -> .
    (24) statement -> . assignment DOT_COMMA
    (25) statement -> . functionCall DOT_COMMA
    (26) statement -> . ifBlock
    (27) statement -> . whileBlock
    (28) statement -> . print DOT_COMMA
    (29) statement -> . read DOT_COMMA
    (30) statement -> . lineComment
    (31) statement -> . return DOT_COMMA
    (33) assignment -> . idCall ASSIGN megaExp
    (34) assignment -> . idCall ASSIGN functionCall
    (35) assignment -> . assignIncr
    (36) assignment -> . assignDecr
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR
    (44) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (47) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (77) print -> . PRINT L_PAR print_help R_PAR
    (83) read -> . READ L_PAR idCall R_PAR
    (84) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (32) return -> . RETURN megaExp
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (37) assignIncr -> . idCall INCREMENT
    (38) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_KEY resolved using rule 21 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_KEY           reduce using rule 21 (statements -> .)
    ID              shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    PRINT           shift and go to state 54
    READ            shift and go to state 55
    COMMENT_LINE    shift and go to state 56
    RETURN          shift and go to state 57

  ! ID              [ reduce using rule 23 (statement -> .) ]
  ! IF              [ reduce using rule 23 (statement -> .) ]
  ! WHILE           [ reduce using rule 23 (statement -> .) ]
  ! PRINT           [ reduce using rule 23 (statement -> .) ]
  ! READ            [ reduce using rule 23 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 23 (statement -> .) ]
  ! RETURN          [ reduce using rule 23 (statement -> .) ]
  ! R_KEY           [ reduce using rule 23 (statement -> .) ]

    statements                     shift and go to state 38
    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    functionCall                   shift and go to state 41
    ifBlock                        shift and go to state 42
    whileBlock                     shift and go to state 43
    print                          shift and go to state 44
    read                           shift and go to state 45
    lineComment                    shift and go to state 46
    return                         shift and go to state 47
    idCall                         shift and go to state 48
    assignIncr                     shift and go to state 49
    assignDecr                     shift and go to state 50

state 34

    (11) functionsHelp -> type ID .
    (12) functionsHelp -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 11 (functionsHelp -> type ID .)
    COMMA           shift and go to state 58


state 35

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR . L_KEY variables statements R_KEY

    L_KEY           shift and go to state 59


state 36

    (7) variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK . INTEGER R_BRACK DOT_COMMA variables

    INTEGER         shift and go to state 60


state 37

    (6) variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> . VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_KEY           reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 61

state 38

    (2) mainBody -> MAIN L_PAR R_PAR L_KEY variables statements . R_KEY

    R_KEY           shift and go to state 62


state 39

    (22) statements -> statement . statements
    (21) statements -> .
    (22) statements -> . statement statements
    (23) statement -> .
    (24) statement -> . assignment DOT_COMMA
    (25) statement -> . functionCall DOT_COMMA
    (26) statement -> . ifBlock
    (27) statement -> . whileBlock
    (28) statement -> . print DOT_COMMA
    (29) statement -> . read DOT_COMMA
    (30) statement -> . lineComment
    (31) statement -> . return DOT_COMMA
    (33) assignment -> . idCall ASSIGN megaExp
    (34) assignment -> . idCall ASSIGN functionCall
    (35) assignment -> . assignIncr
    (36) assignment -> . assignDecr
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR
    (44) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (47) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (77) print -> . PRINT L_PAR print_help R_PAR
    (83) read -> . READ L_PAR idCall R_PAR
    (84) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (32) return -> . RETURN megaExp
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (37) assignIncr -> . idCall INCREMENT
    (38) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_KEY resolved using rule 21 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_KEY           reduce using rule 21 (statements -> .)
    ID              shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    PRINT           shift and go to state 54
    READ            shift and go to state 55
    COMMENT_LINE    shift and go to state 56
    RETURN          shift and go to state 57

  ! ID              [ reduce using rule 23 (statement -> .) ]
  ! IF              [ reduce using rule 23 (statement -> .) ]
  ! WHILE           [ reduce using rule 23 (statement -> .) ]
  ! PRINT           [ reduce using rule 23 (statement -> .) ]
  ! READ            [ reduce using rule 23 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 23 (statement -> .) ]
  ! RETURN          [ reduce using rule 23 (statement -> .) ]
  ! R_KEY           [ reduce using rule 23 (statement -> .) ]

    statement                      shift and go to state 39
    statements                     shift and go to state 63
    assignment                     shift and go to state 40
    functionCall                   shift and go to state 41
    ifBlock                        shift and go to state 42
    whileBlock                     shift and go to state 43
    print                          shift and go to state 44
    read                           shift and go to state 45
    lineComment                    shift and go to state 46
    return                         shift and go to state 47
    idCall                         shift and go to state 48
    assignIncr                     shift and go to state 49
    assignDecr                     shift and go to state 50

state 40

    (24) statement -> assignment . DOT_COMMA

    DOT_COMMA       shift and go to state 64


state 41

    (25) statement -> functionCall . DOT_COMMA

    DOT_COMMA       shift and go to state 65


state 42

    (26) statement -> ifBlock .

    ID              reduce using rule 26 (statement -> ifBlock .)
    IF              reduce using rule 26 (statement -> ifBlock .)
    WHILE           reduce using rule 26 (statement -> ifBlock .)
    PRINT           reduce using rule 26 (statement -> ifBlock .)
    READ            reduce using rule 26 (statement -> ifBlock .)
    COMMENT_LINE    reduce using rule 26 (statement -> ifBlock .)
    RETURN          reduce using rule 26 (statement -> ifBlock .)
    R_KEY           reduce using rule 26 (statement -> ifBlock .)


state 43

    (27) statement -> whileBlock .

    ID              reduce using rule 27 (statement -> whileBlock .)
    IF              reduce using rule 27 (statement -> whileBlock .)
    WHILE           reduce using rule 27 (statement -> whileBlock .)
    PRINT           reduce using rule 27 (statement -> whileBlock .)
    READ            reduce using rule 27 (statement -> whileBlock .)
    COMMENT_LINE    reduce using rule 27 (statement -> whileBlock .)
    RETURN          reduce using rule 27 (statement -> whileBlock .)
    R_KEY           reduce using rule 27 (statement -> whileBlock .)


state 44

    (28) statement -> print . DOT_COMMA

    DOT_COMMA       shift and go to state 66


state 45

    (29) statement -> read . DOT_COMMA

    DOT_COMMA       shift and go to state 67


state 46

    (30) statement -> lineComment .

    ID              reduce using rule 30 (statement -> lineComment .)
    IF              reduce using rule 30 (statement -> lineComment .)
    WHILE           reduce using rule 30 (statement -> lineComment .)
    PRINT           reduce using rule 30 (statement -> lineComment .)
    READ            reduce using rule 30 (statement -> lineComment .)
    COMMENT_LINE    reduce using rule 30 (statement -> lineComment .)
    RETURN          reduce using rule 30 (statement -> lineComment .)
    R_KEY           reduce using rule 30 (statement -> lineComment .)


state 47

    (31) statement -> return . DOT_COMMA

    DOT_COMMA       shift and go to state 68


state 48

    (33) assignment -> idCall . ASSIGN megaExp
    (34) assignment -> idCall . ASSIGN functionCall
    (37) assignIncr -> idCall . INCREMENT
    (38) assignDecr -> idCall . DECREMENT

    ASSIGN          shift and go to state 69
    INCREMENT       shift and go to state 70
    DECREMENT       shift and go to state 71


state 49

    (35) assignment -> assignIncr .

    DOT_COMMA       reduce using rule 35 (assignment -> assignIncr .)


state 50

    (36) assignment -> assignDecr .

    DOT_COMMA       reduce using rule 36 (assignment -> assignDecr .)


state 51

    (39) functionCall -> ID . L_PAR functionCallParams R_PAR
    (74) idCall -> ID .
    (75) idCall -> ID . L_BRACK exp R_BRACK
    (76) idCall -> ID . L_BRACK exp R_BRACK L_BRACK exp R_BRACK

    L_PAR           shift and go to state 72
    ASSIGN          reduce using rule 74 (idCall -> ID .)
    INCREMENT       reduce using rule 74 (idCall -> ID .)
    DECREMENT       reduce using rule 74 (idCall -> ID .)
    TIMES           reduce using rule 74 (idCall -> ID .)
    DIVIDE          reduce using rule 74 (idCall -> ID .)
    MOD             reduce using rule 74 (idCall -> ID .)
    PLUS            reduce using rule 74 (idCall -> ID .)
    MINUS           reduce using rule 74 (idCall -> ID .)
    MORE_THAN       reduce using rule 74 (idCall -> ID .)
    LESS_THAN       reduce using rule 74 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 74 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 74 (idCall -> ID .)
    EQUAL           reduce using rule 74 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 74 (idCall -> ID .)
    AND             reduce using rule 74 (idCall -> ID .)
    OR              reduce using rule 74 (idCall -> ID .)
    DOT_COMMA       reduce using rule 74 (idCall -> ID .)
    L_BRACK         shift and go to state 73


state 52

    (44) ifBlock -> IF . L_PAR megaExp R_PAR body optionalElse

    L_PAR           shift and go to state 74


state 53

    (47) whileBlock -> WHILE . L_PAR megaExp R_PAR body

    L_PAR           shift and go to state 75


state 54

    (77) print -> PRINT . L_PAR print_help R_PAR

    L_PAR           shift and go to state 76


state 55

    (83) read -> READ . L_PAR idCall R_PAR

    L_PAR           shift and go to state 77


state 56

    (84) lineComment -> COMMENT_LINE . ALPHANUMERIC END_LINE

    ALPHANUMERIC    shift and go to state 78


state 57

    (32) return -> RETURN . megaExp
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    megaExp                        shift and go to state 79
    superExp                       shift and go to state 80
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 58

    (12) functionsHelp -> type ID COMMA . functionsHelp2
    (13) functionsHelp2 -> . type ID
    (14) functionsHelp2 -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING
    (20) type -> . VOID

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 94
    functionsHelp2                 shift and go to state 95

state 59

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_KEY . variables statements R_KEY
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> . VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_KEY           reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 96

state 60

    (7) variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER . R_BRACK DOT_COMMA variables

    R_BRACK         shift and go to state 97


state 61

    (6) variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .

    FUNCTION        reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    MAIN            reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    ID              reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    IF              reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    WHILE           reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    PRINT           reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    READ            reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    RETURN          reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    R_KEY           reduce using rule 6 (variables -> VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables .)


state 62

    (2) mainBody -> MAIN L_PAR R_PAR L_KEY variables statements R_KEY .

    R_KEY           reduce using rule 2 (mainBody -> MAIN L_PAR R_PAR L_KEY variables statements R_KEY .)


state 63

    (22) statements -> statement statements .

    R_KEY           reduce using rule 22 (statements -> statement statements .)


state 64

    (24) statement -> assignment DOT_COMMA .

    ID              reduce using rule 24 (statement -> assignment DOT_COMMA .)
    IF              reduce using rule 24 (statement -> assignment DOT_COMMA .)
    WHILE           reduce using rule 24 (statement -> assignment DOT_COMMA .)
    PRINT           reduce using rule 24 (statement -> assignment DOT_COMMA .)
    READ            reduce using rule 24 (statement -> assignment DOT_COMMA .)
    COMMENT_LINE    reduce using rule 24 (statement -> assignment DOT_COMMA .)
    RETURN          reduce using rule 24 (statement -> assignment DOT_COMMA .)
    R_KEY           reduce using rule 24 (statement -> assignment DOT_COMMA .)


state 65

    (25) statement -> functionCall DOT_COMMA .

    ID              reduce using rule 25 (statement -> functionCall DOT_COMMA .)
    IF              reduce using rule 25 (statement -> functionCall DOT_COMMA .)
    WHILE           reduce using rule 25 (statement -> functionCall DOT_COMMA .)
    PRINT           reduce using rule 25 (statement -> functionCall DOT_COMMA .)
    READ            reduce using rule 25 (statement -> functionCall DOT_COMMA .)
    COMMENT_LINE    reduce using rule 25 (statement -> functionCall DOT_COMMA .)
    RETURN          reduce using rule 25 (statement -> functionCall DOT_COMMA .)
    R_KEY           reduce using rule 25 (statement -> functionCall DOT_COMMA .)


state 66

    (28) statement -> print DOT_COMMA .

    ID              reduce using rule 28 (statement -> print DOT_COMMA .)
    IF              reduce using rule 28 (statement -> print DOT_COMMA .)
    WHILE           reduce using rule 28 (statement -> print DOT_COMMA .)
    PRINT           reduce using rule 28 (statement -> print DOT_COMMA .)
    READ            reduce using rule 28 (statement -> print DOT_COMMA .)
    COMMENT_LINE    reduce using rule 28 (statement -> print DOT_COMMA .)
    RETURN          reduce using rule 28 (statement -> print DOT_COMMA .)
    R_KEY           reduce using rule 28 (statement -> print DOT_COMMA .)


state 67

    (29) statement -> read DOT_COMMA .

    ID              reduce using rule 29 (statement -> read DOT_COMMA .)
    IF              reduce using rule 29 (statement -> read DOT_COMMA .)
    WHILE           reduce using rule 29 (statement -> read DOT_COMMA .)
    PRINT           reduce using rule 29 (statement -> read DOT_COMMA .)
    READ            reduce using rule 29 (statement -> read DOT_COMMA .)
    COMMENT_LINE    reduce using rule 29 (statement -> read DOT_COMMA .)
    RETURN          reduce using rule 29 (statement -> read DOT_COMMA .)
    R_KEY           reduce using rule 29 (statement -> read DOT_COMMA .)


state 68

    (31) statement -> return DOT_COMMA .

    ID              reduce using rule 31 (statement -> return DOT_COMMA .)
    IF              reduce using rule 31 (statement -> return DOT_COMMA .)
    WHILE           reduce using rule 31 (statement -> return DOT_COMMA .)
    PRINT           reduce using rule 31 (statement -> return DOT_COMMA .)
    READ            reduce using rule 31 (statement -> return DOT_COMMA .)
    COMMENT_LINE    reduce using rule 31 (statement -> return DOT_COMMA .)
    RETURN          reduce using rule 31 (statement -> return DOT_COMMA .)
    R_KEY           reduce using rule 31 (statement -> return DOT_COMMA .)


state 69

    (33) assignment -> idCall ASSIGN . megaExp
    (34) assignment -> idCall ASSIGN . functionCall
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK

    ID              shift and go to state 51
    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91

    idCall                         shift and go to state 90
    megaExp                        shift and go to state 98
    functionCall                   shift and go to state 99
    superExp                       shift and go to state 80
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83

state 70

    (37) assignIncr -> idCall INCREMENT .

    DOT_COMMA       reduce using rule 37 (assignIncr -> idCall INCREMENT .)


state 71

    (38) assignDecr -> idCall DECREMENT .

    DOT_COMMA       reduce using rule 38 (assignDecr -> idCall DECREMENT .)


state 72

    (39) functionCall -> ID L_PAR . functionCallParams R_PAR
    (40) functionCallParams -> .
    (41) functionCallParams -> . functionCallParamsOptional
    (42) functionCallParamsOptional -> . megaExp COMMA functionCallParamsOptional
    (43) functionCallParamsOptional -> . megaExp
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    R_PAR           reduce using rule 40 (functionCallParams -> .)
    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    functionCallParams             shift and go to state 100
    functionCallParamsOptional     shift and go to state 101
    megaExp                        shift and go to state 102
    superExp                       shift and go to state 80
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 73

    (75) idCall -> ID L_BRACK . exp R_BRACK
    (76) idCall -> ID L_BRACK . exp R_BRACK L_BRACK exp R_BRACK
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    exp                            shift and go to state 103
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 74

    (44) ifBlock -> IF L_PAR . megaExp R_PAR body optionalElse
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    megaExp                        shift and go to state 104
    superExp                       shift and go to state 80
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 75

    (47) whileBlock -> WHILE L_PAR . megaExp R_PAR body
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    megaExp                        shift and go to state 105
    superExp                       shift and go to state 80
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 76

    (77) print -> PRINT L_PAR . print_help R_PAR
    (78) print_help -> .
    (79) print_help -> . ALPHANUMERIC
    (80) print_help -> . idCall
    (81) print_help -> . functionCall
    (82) print_help -> . megaExp
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall

    R_PAR           reduce using rule 78 (print_help -> .)
    ALPHANUMERIC    shift and go to state 107
    ID              shift and go to state 93
    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91

    print_help                     shift and go to state 106
    idCall                         shift and go to state 108
    functionCall                   shift and go to state 109
    megaExp                        shift and go to state 110
    exp                            shift and go to state 81
    superExp                       shift and go to state 80
    term                           shift and go to state 82
    factor                         shift and go to state 83

state 77

    (83) read -> READ L_PAR . idCall R_PAR
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK

    ID              shift and go to state 112

    idCall                         shift and go to state 111

state 78

    (84) lineComment -> COMMENT_LINE ALPHANUMERIC . END_LINE

    END_LINE        shift and go to state 113


state 79

    (32) return -> RETURN megaExp .

    DOT_COMMA       reduce using rule 32 (return -> RETURN megaExp .)


state 80

    (48) megaExp -> superExp .
    (49) megaExp -> superExp . AND superExp
    (50) megaExp -> superExp . OR superExp

    DOT_COMMA       reduce using rule 48 (megaExp -> superExp .)
    COMMA           reduce using rule 48 (megaExp -> superExp .)
    R_PAR           reduce using rule 48 (megaExp -> superExp .)
    AND             shift and go to state 114
    OR              shift and go to state 115


state 81

    (51) superExp -> exp .
    (52) superExp -> exp . MORE_THAN exp
    (53) superExp -> exp . LESS_THAN exp
    (54) superExp -> exp . MORE_EQUAL exp
    (55) superExp -> exp . LESS_EQUAL exp
    (56) superExp -> exp . EQUAL exp
    (57) superExp -> exp . NOT_EQUAL exp

    AND             reduce using rule 51 (superExp -> exp .)
    OR              reduce using rule 51 (superExp -> exp .)
    DOT_COMMA       reduce using rule 51 (superExp -> exp .)
    COMMA           reduce using rule 51 (superExp -> exp .)
    R_PAR           reduce using rule 51 (superExp -> exp .)
    MORE_THAN       shift and go to state 116
    LESS_THAN       shift and go to state 117
    MORE_EQUAL      shift and go to state 118
    LESS_EQUAL      shift and go to state 119
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 121


state 82

    (58) exp -> term .
    (59) exp -> term . PLUS exp
    (60) exp -> term . MINUS exp

    MORE_THAN       reduce using rule 58 (exp -> term .)
    LESS_THAN       reduce using rule 58 (exp -> term .)
    MORE_EQUAL      reduce using rule 58 (exp -> term .)
    LESS_EQUAL      reduce using rule 58 (exp -> term .)
    EQUAL           reduce using rule 58 (exp -> term .)
    NOT_EQUAL       reduce using rule 58 (exp -> term .)
    AND             reduce using rule 58 (exp -> term .)
    OR              reduce using rule 58 (exp -> term .)
    DOT_COMMA       reduce using rule 58 (exp -> term .)
    COMMA           reduce using rule 58 (exp -> term .)
    R_PAR           reduce using rule 58 (exp -> term .)
    R_BRACK         reduce using rule 58 (exp -> term .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123


state 83

    (61) term -> factor .
    (62) term -> factor . TIMES term
    (63) term -> factor . DIVIDE term
    (64) term -> factor . MOD term

    PLUS            reduce using rule 61 (term -> factor .)
    MINUS           reduce using rule 61 (term -> factor .)
    MORE_THAN       reduce using rule 61 (term -> factor .)
    LESS_THAN       reduce using rule 61 (term -> factor .)
    MORE_EQUAL      reduce using rule 61 (term -> factor .)
    LESS_EQUAL      reduce using rule 61 (term -> factor .)
    EQUAL           reduce using rule 61 (term -> factor .)
    NOT_EQUAL       reduce using rule 61 (term -> factor .)
    AND             reduce using rule 61 (term -> factor .)
    OR              reduce using rule 61 (term -> factor .)
    DOT_COMMA       reduce using rule 61 (term -> factor .)
    COMMA           reduce using rule 61 (term -> factor .)
    R_PAR           reduce using rule 61 (term -> factor .)
    R_BRACK         reduce using rule 61 (term -> factor .)
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125
    MOD             shift and go to state 126


state 84

    (65) factor -> INTEGER .

    TIMES           reduce using rule 65 (factor -> INTEGER .)
    DIVIDE          reduce using rule 65 (factor -> INTEGER .)
    MOD             reduce using rule 65 (factor -> INTEGER .)
    PLUS            reduce using rule 65 (factor -> INTEGER .)
    MINUS           reduce using rule 65 (factor -> INTEGER .)
    MORE_THAN       reduce using rule 65 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 65 (factor -> INTEGER .)
    MORE_EQUAL      reduce using rule 65 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 65 (factor -> INTEGER .)
    EQUAL           reduce using rule 65 (factor -> INTEGER .)
    NOT_EQUAL       reduce using rule 65 (factor -> INTEGER .)
    AND             reduce using rule 65 (factor -> INTEGER .)
    OR              reduce using rule 65 (factor -> INTEGER .)
    DOT_COMMA       reduce using rule 65 (factor -> INTEGER .)
    COMMA           reduce using rule 65 (factor -> INTEGER .)
    R_PAR           reduce using rule 65 (factor -> INTEGER .)
    R_BRACK         reduce using rule 65 (factor -> INTEGER .)


state 85

    (66) factor -> DECIMAL .

    TIMES           reduce using rule 66 (factor -> DECIMAL .)
    DIVIDE          reduce using rule 66 (factor -> DECIMAL .)
    MOD             reduce using rule 66 (factor -> DECIMAL .)
    PLUS            reduce using rule 66 (factor -> DECIMAL .)
    MINUS           reduce using rule 66 (factor -> DECIMAL .)
    MORE_THAN       reduce using rule 66 (factor -> DECIMAL .)
    LESS_THAN       reduce using rule 66 (factor -> DECIMAL .)
    MORE_EQUAL      reduce using rule 66 (factor -> DECIMAL .)
    LESS_EQUAL      reduce using rule 66 (factor -> DECIMAL .)
    EQUAL           reduce using rule 66 (factor -> DECIMAL .)
    NOT_EQUAL       reduce using rule 66 (factor -> DECIMAL .)
    AND             reduce using rule 66 (factor -> DECIMAL .)
    OR              reduce using rule 66 (factor -> DECIMAL .)
    DOT_COMMA       reduce using rule 66 (factor -> DECIMAL .)
    COMMA           reduce using rule 66 (factor -> DECIMAL .)
    R_PAR           reduce using rule 66 (factor -> DECIMAL .)
    R_BRACK         reduce using rule 66 (factor -> DECIMAL .)


state 86

    (67) factor -> ALPHANUMERIC .

    TIMES           reduce using rule 67 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 67 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 67 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 67 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 67 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 67 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 67 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 67 (factor -> ALPHANUMERIC .)
    DOT_COMMA       reduce using rule 67 (factor -> ALPHANUMERIC .)
    COMMA           reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_BRACK         reduce using rule 67 (factor -> ALPHANUMERIC .)


state 87

    (68) factor -> CHARACTER .

    TIMES           reduce using rule 68 (factor -> CHARACTER .)
    DIVIDE          reduce using rule 68 (factor -> CHARACTER .)
    MOD             reduce using rule 68 (factor -> CHARACTER .)
    PLUS            reduce using rule 68 (factor -> CHARACTER .)
    MINUS           reduce using rule 68 (factor -> CHARACTER .)
    MORE_THAN       reduce using rule 68 (factor -> CHARACTER .)
    LESS_THAN       reduce using rule 68 (factor -> CHARACTER .)
    MORE_EQUAL      reduce using rule 68 (factor -> CHARACTER .)
    LESS_EQUAL      reduce using rule 68 (factor -> CHARACTER .)
    EQUAL           reduce using rule 68 (factor -> CHARACTER .)
    NOT_EQUAL       reduce using rule 68 (factor -> CHARACTER .)
    AND             reduce using rule 68 (factor -> CHARACTER .)
    OR              reduce using rule 68 (factor -> CHARACTER .)
    DOT_COMMA       reduce using rule 68 (factor -> CHARACTER .)
    COMMA           reduce using rule 68 (factor -> CHARACTER .)
    R_PAR           reduce using rule 68 (factor -> CHARACTER .)
    R_BRACK         reduce using rule 68 (factor -> CHARACTER .)


state 88

    (69) factor -> BOOLEAN .

    TIMES           reduce using rule 69 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 69 (factor -> BOOLEAN .)
    MOD             reduce using rule 69 (factor -> BOOLEAN .)
    PLUS            reduce using rule 69 (factor -> BOOLEAN .)
    MINUS           reduce using rule 69 (factor -> BOOLEAN .)
    MORE_THAN       reduce using rule 69 (factor -> BOOLEAN .)
    LESS_THAN       reduce using rule 69 (factor -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 69 (factor -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 69 (factor -> BOOLEAN .)
    EQUAL           reduce using rule 69 (factor -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 69 (factor -> BOOLEAN .)
    AND             reduce using rule 69 (factor -> BOOLEAN .)
    OR              reduce using rule 69 (factor -> BOOLEAN .)
    DOT_COMMA       reduce using rule 69 (factor -> BOOLEAN .)
    COMMA           reduce using rule 69 (factor -> BOOLEAN .)
    R_PAR           reduce using rule 69 (factor -> BOOLEAN .)
    R_BRACK         reduce using rule 69 (factor -> BOOLEAN .)


state 89

    (70) factor -> VOID .

    TIMES           reduce using rule 70 (factor -> VOID .)
    DIVIDE          reduce using rule 70 (factor -> VOID .)
    MOD             reduce using rule 70 (factor -> VOID .)
    PLUS            reduce using rule 70 (factor -> VOID .)
    MINUS           reduce using rule 70 (factor -> VOID .)
    MORE_THAN       reduce using rule 70 (factor -> VOID .)
    LESS_THAN       reduce using rule 70 (factor -> VOID .)
    MORE_EQUAL      reduce using rule 70 (factor -> VOID .)
    LESS_EQUAL      reduce using rule 70 (factor -> VOID .)
    EQUAL           reduce using rule 70 (factor -> VOID .)
    NOT_EQUAL       reduce using rule 70 (factor -> VOID .)
    AND             reduce using rule 70 (factor -> VOID .)
    OR              reduce using rule 70 (factor -> VOID .)
    DOT_COMMA       reduce using rule 70 (factor -> VOID .)
    COMMA           reduce using rule 70 (factor -> VOID .)
    R_PAR           reduce using rule 70 (factor -> VOID .)
    R_BRACK         reduce using rule 70 (factor -> VOID .)


state 90

    (71) factor -> idCall .

    TIMES           reduce using rule 71 (factor -> idCall .)
    DIVIDE          reduce using rule 71 (factor -> idCall .)
    MOD             reduce using rule 71 (factor -> idCall .)
    PLUS            reduce using rule 71 (factor -> idCall .)
    MINUS           reduce using rule 71 (factor -> idCall .)
    MORE_THAN       reduce using rule 71 (factor -> idCall .)
    LESS_THAN       reduce using rule 71 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 71 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 71 (factor -> idCall .)
    EQUAL           reduce using rule 71 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 71 (factor -> idCall .)
    AND             reduce using rule 71 (factor -> idCall .)
    OR              reduce using rule 71 (factor -> idCall .)
    DOT_COMMA       reduce using rule 71 (factor -> idCall .)
    COMMA           reduce using rule 71 (factor -> idCall .)
    R_PAR           reduce using rule 71 (factor -> idCall .)
    R_BRACK         reduce using rule 71 (factor -> idCall .)


state 91

    (72) factor -> L_PAR . megaExp R_PAR
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    megaExp                        shift and go to state 127
    superExp                       shift and go to state 80
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 92

    (73) factor -> functionCall .

    TIMES           reduce using rule 73 (factor -> functionCall .)
    DIVIDE          reduce using rule 73 (factor -> functionCall .)
    MOD             reduce using rule 73 (factor -> functionCall .)
    PLUS            reduce using rule 73 (factor -> functionCall .)
    MINUS           reduce using rule 73 (factor -> functionCall .)
    MORE_THAN       reduce using rule 73 (factor -> functionCall .)
    LESS_THAN       reduce using rule 73 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 73 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 73 (factor -> functionCall .)
    EQUAL           reduce using rule 73 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 73 (factor -> functionCall .)
    AND             reduce using rule 73 (factor -> functionCall .)
    OR              reduce using rule 73 (factor -> functionCall .)
    DOT_COMMA       reduce using rule 73 (factor -> functionCall .)
    COMMA           reduce using rule 73 (factor -> functionCall .)
    R_PAR           reduce using rule 73 (factor -> functionCall .)
    R_BRACK         reduce using rule 73 (factor -> functionCall .)


state 93

    (74) idCall -> ID .
    (75) idCall -> ID . L_BRACK exp R_BRACK
    (76) idCall -> ID . L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> ID . L_PAR functionCallParams R_PAR

    TIMES           reduce using rule 74 (idCall -> ID .)
    DIVIDE          reduce using rule 74 (idCall -> ID .)
    MOD             reduce using rule 74 (idCall -> ID .)
    PLUS            reduce using rule 74 (idCall -> ID .)
    MINUS           reduce using rule 74 (idCall -> ID .)
    MORE_THAN       reduce using rule 74 (idCall -> ID .)
    LESS_THAN       reduce using rule 74 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 74 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 74 (idCall -> ID .)
    EQUAL           reduce using rule 74 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 74 (idCall -> ID .)
    AND             reduce using rule 74 (idCall -> ID .)
    OR              reduce using rule 74 (idCall -> ID .)
    DOT_COMMA       reduce using rule 74 (idCall -> ID .)
    COMMA           reduce using rule 74 (idCall -> ID .)
    R_PAR           reduce using rule 74 (idCall -> ID .)
    R_BRACK         reduce using rule 74 (idCall -> ID .)
    L_BRACK         shift and go to state 73
    L_PAR           shift and go to state 72


state 94

    (13) functionsHelp2 -> type . ID
    (14) functionsHelp2 -> type . ID COMMA functionsHelp2

    ID              shift and go to state 128


state 95

    (12) functionsHelp -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 12 (functionsHelp -> type ID COMMA functionsHelp2 .)


state 96

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_KEY variables . statements R_KEY
    (21) statements -> .
    (22) statements -> . statement statements
    (23) statement -> .
    (24) statement -> . assignment DOT_COMMA
    (25) statement -> . functionCall DOT_COMMA
    (26) statement -> . ifBlock
    (27) statement -> . whileBlock
    (28) statement -> . print DOT_COMMA
    (29) statement -> . read DOT_COMMA
    (30) statement -> . lineComment
    (31) statement -> . return DOT_COMMA
    (33) assignment -> . idCall ASSIGN megaExp
    (34) assignment -> . idCall ASSIGN functionCall
    (35) assignment -> . assignIncr
    (36) assignment -> . assignDecr
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR
    (44) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (47) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (77) print -> . PRINT L_PAR print_help R_PAR
    (83) read -> . READ L_PAR idCall R_PAR
    (84) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (32) return -> . RETURN megaExp
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (37) assignIncr -> . idCall INCREMENT
    (38) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_KEY resolved using rule 21 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_KEY           reduce using rule 21 (statements -> .)
    ID              shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    PRINT           shift and go to state 54
    READ            shift and go to state 55
    COMMENT_LINE    shift and go to state 56
    RETURN          shift and go to state 57

  ! ID              [ reduce using rule 23 (statement -> .) ]
  ! IF              [ reduce using rule 23 (statement -> .) ]
  ! WHILE           [ reduce using rule 23 (statement -> .) ]
  ! PRINT           [ reduce using rule 23 (statement -> .) ]
  ! READ            [ reduce using rule 23 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 23 (statement -> .) ]
  ! RETURN          [ reduce using rule 23 (statement -> .) ]
  ! R_KEY           [ reduce using rule 23 (statement -> .) ]

    statements                     shift and go to state 129
    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    functionCall                   shift and go to state 41
    ifBlock                        shift and go to state 42
    whileBlock                     shift and go to state 43
    print                          shift and go to state 44
    read                           shift and go to state 45
    lineComment                    shift and go to state 46
    return                         shift and go to state 47
    idCall                         shift and go to state 48
    assignIncr                     shift and go to state 49
    assignDecr                     shift and go to state 50

state 97

    (7) variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK . DOT_COMMA variables

    DOT_COMMA       shift and go to state 130


state 98

    (33) assignment -> idCall ASSIGN megaExp .

    DOT_COMMA       reduce using rule 33 (assignment -> idCall ASSIGN megaExp .)


state 99

    (34) assignment -> idCall ASSIGN functionCall .
    (73) factor -> functionCall .

  ! reduce/reduce conflict for DOT_COMMA resolved using rule 34 (assignment -> idCall ASSIGN functionCall .)
    DOT_COMMA       reduce using rule 34 (assignment -> idCall ASSIGN functionCall .)
    TIMES           reduce using rule 73 (factor -> functionCall .)
    DIVIDE          reduce using rule 73 (factor -> functionCall .)
    MOD             reduce using rule 73 (factor -> functionCall .)
    PLUS            reduce using rule 73 (factor -> functionCall .)
    MINUS           reduce using rule 73 (factor -> functionCall .)
    MORE_THAN       reduce using rule 73 (factor -> functionCall .)
    LESS_THAN       reduce using rule 73 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 73 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 73 (factor -> functionCall .)
    EQUAL           reduce using rule 73 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 73 (factor -> functionCall .)
    AND             reduce using rule 73 (factor -> functionCall .)
    OR              reduce using rule 73 (factor -> functionCall .)

  ! DOT_COMMA       [ reduce using rule 73 (factor -> functionCall .) ]


state 100

    (39) functionCall -> ID L_PAR functionCallParams . R_PAR

    R_PAR           shift and go to state 131


state 101

    (41) functionCallParams -> functionCallParamsOptional .

    R_PAR           reduce using rule 41 (functionCallParams -> functionCallParamsOptional .)


state 102

    (42) functionCallParamsOptional -> megaExp . COMMA functionCallParamsOptional
    (43) functionCallParamsOptional -> megaExp .

    COMMA           shift and go to state 132
    R_PAR           reduce using rule 43 (functionCallParamsOptional -> megaExp .)


state 103

    (75) idCall -> ID L_BRACK exp . R_BRACK
    (76) idCall -> ID L_BRACK exp . R_BRACK L_BRACK exp R_BRACK

    R_BRACK         shift and go to state 133


state 104

    (44) ifBlock -> IF L_PAR megaExp . R_PAR body optionalElse

    R_PAR           shift and go to state 134


state 105

    (47) whileBlock -> WHILE L_PAR megaExp . R_PAR body

    R_PAR           shift and go to state 135


state 106

    (77) print -> PRINT L_PAR print_help . R_PAR

    R_PAR           shift and go to state 136


state 107

    (79) print_help -> ALPHANUMERIC .
    (67) factor -> ALPHANUMERIC .

  ! reduce/reduce conflict for R_PAR resolved using rule 67 (factor -> ALPHANUMERIC .)
    TIMES           reduce using rule 67 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 67 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 67 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 67 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 67 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 67 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 67 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 67 (factor -> ALPHANUMERIC .)

  ! R_PAR           [ reduce using rule 79 (print_help -> ALPHANUMERIC .) ]


state 108

    (80) print_help -> idCall .
    (71) factor -> idCall .

  ! reduce/reduce conflict for R_PAR resolved using rule 71 (factor -> idCall .)
    TIMES           reduce using rule 71 (factor -> idCall .)
    DIVIDE          reduce using rule 71 (factor -> idCall .)
    MOD             reduce using rule 71 (factor -> idCall .)
    PLUS            reduce using rule 71 (factor -> idCall .)
    MINUS           reduce using rule 71 (factor -> idCall .)
    MORE_THAN       reduce using rule 71 (factor -> idCall .)
    LESS_THAN       reduce using rule 71 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 71 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 71 (factor -> idCall .)
    EQUAL           reduce using rule 71 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 71 (factor -> idCall .)
    AND             reduce using rule 71 (factor -> idCall .)
    OR              reduce using rule 71 (factor -> idCall .)
    R_PAR           reduce using rule 71 (factor -> idCall .)

  ! R_PAR           [ reduce using rule 80 (print_help -> idCall .) ]


state 109

    (81) print_help -> functionCall .
    (73) factor -> functionCall .

  ! reduce/reduce conflict for R_PAR resolved using rule 73 (factor -> functionCall .)
    TIMES           reduce using rule 73 (factor -> functionCall .)
    DIVIDE          reduce using rule 73 (factor -> functionCall .)
    MOD             reduce using rule 73 (factor -> functionCall .)
    PLUS            reduce using rule 73 (factor -> functionCall .)
    MINUS           reduce using rule 73 (factor -> functionCall .)
    MORE_THAN       reduce using rule 73 (factor -> functionCall .)
    LESS_THAN       reduce using rule 73 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 73 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 73 (factor -> functionCall .)
    EQUAL           reduce using rule 73 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 73 (factor -> functionCall .)
    AND             reduce using rule 73 (factor -> functionCall .)
    OR              reduce using rule 73 (factor -> functionCall .)
    R_PAR           reduce using rule 73 (factor -> functionCall .)

  ! R_PAR           [ reduce using rule 81 (print_help -> functionCall .) ]


state 110

    (82) print_help -> megaExp .

    R_PAR           reduce using rule 82 (print_help -> megaExp .)


state 111

    (83) read -> READ L_PAR idCall . R_PAR

    R_PAR           shift and go to state 137


state 112

    (74) idCall -> ID .
    (75) idCall -> ID . L_BRACK exp R_BRACK
    (76) idCall -> ID . L_BRACK exp R_BRACK L_BRACK exp R_BRACK

    R_PAR           reduce using rule 74 (idCall -> ID .)
    L_BRACK         shift and go to state 73


state 113

    (84) lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .

    ID              reduce using rule 84 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    IF              reduce using rule 84 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    WHILE           reduce using rule 84 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    PRINT           reduce using rule 84 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    READ            reduce using rule 84 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    COMMENT_LINE    reduce using rule 84 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    RETURN          reduce using rule 84 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    R_KEY           reduce using rule 84 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)


state 114

    (49) megaExp -> superExp AND . superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    superExp                       shift and go to state 138
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 115

    (50) megaExp -> superExp OR . superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    superExp                       shift and go to state 139
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 116

    (52) superExp -> exp MORE_THAN . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    exp                            shift and go to state 140
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 117

    (53) superExp -> exp LESS_THAN . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    exp                            shift and go to state 141
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 118

    (54) superExp -> exp MORE_EQUAL . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    exp                            shift and go to state 142
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 119

    (55) superExp -> exp LESS_EQUAL . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    exp                            shift and go to state 143
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 120

    (56) superExp -> exp EQUAL . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    exp                            shift and go to state 144
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 121

    (57) superExp -> exp NOT_EQUAL . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    exp                            shift and go to state 145
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 122

    (59) exp -> term PLUS . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    term                           shift and go to state 82
    exp                            shift and go to state 146
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 123

    (60) exp -> term MINUS . exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    term                           shift and go to state 82
    exp                            shift and go to state 147
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 124

    (62) term -> factor TIMES . term
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    factor                         shift and go to state 83
    term                           shift and go to state 148
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 125

    (63) term -> factor DIVIDE . term
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    factor                         shift and go to state 83
    term                           shift and go to state 149
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 126

    (64) term -> factor MOD . term
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    factor                         shift and go to state 83
    term                           shift and go to state 150
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 127

    (72) factor -> L_PAR megaExp . R_PAR

    R_PAR           shift and go to state 151


state 128

    (13) functionsHelp2 -> type ID .
    (14) functionsHelp2 -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 13 (functionsHelp2 -> type ID .)
    COMMA           shift and go to state 152


state 129

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_KEY variables statements . R_KEY

    R_KEY           shift and go to state 153


state 130

    (7) variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_BRACK INTEGER R_BRACK DOT_COMMA variables
    (7) variables -> . VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_KEY           reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 154

state 131

    (39) functionCall -> ID L_PAR functionCallParams R_PAR .

    DOT_COMMA       reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    TIMES           reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    DIVIDE          reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MOD             reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    PLUS            reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MINUS           reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_THAN       reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_THAN       reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_EQUAL      reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_EQUAL      reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    EQUAL           reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    NOT_EQUAL       reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    AND             reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    OR              reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    COMMA           reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_PAR           reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_BRACK         reduce using rule 39 (functionCall -> ID L_PAR functionCallParams R_PAR .)


state 132

    (42) functionCallParamsOptional -> megaExp COMMA . functionCallParamsOptional
    (42) functionCallParamsOptional -> . megaExp COMMA functionCallParamsOptional
    (43) functionCallParamsOptional -> . megaExp
    (48) megaExp -> . superExp
    (49) megaExp -> . superExp AND superExp
    (50) megaExp -> . superExp OR superExp
    (51) superExp -> . exp
    (52) superExp -> . exp MORE_THAN exp
    (53) superExp -> . exp LESS_THAN exp
    (54) superExp -> . exp MORE_EQUAL exp
    (55) superExp -> . exp LESS_EQUAL exp
    (56) superExp -> . exp EQUAL exp
    (57) superExp -> . exp NOT_EQUAL exp
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    megaExp                        shift and go to state 102
    functionCallParamsOptional     shift and go to state 155
    superExp                       shift and go to state 80
    exp                            shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 133

    (75) idCall -> ID L_BRACK exp R_BRACK .
    (76) idCall -> ID L_BRACK exp R_BRACK . L_BRACK exp R_BRACK

    ASSIGN          reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    INCREMENT       reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    DECREMENT       reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    TIMES           reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    DIVIDE          reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    MOD             reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    PLUS            reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    MINUS           reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    MORE_THAN       reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    LESS_THAN       reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    MORE_EQUAL      reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    LESS_EQUAL      reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    EQUAL           reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    NOT_EQUAL       reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    AND             reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    OR              reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    DOT_COMMA       reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    COMMA           reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    R_PAR           reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    R_BRACK         reduce using rule 75 (idCall -> ID L_BRACK exp R_BRACK .)
    L_BRACK         shift and go to state 156


state 134

    (44) ifBlock -> IF L_PAR megaExp R_PAR . body optionalElse
    (3) body -> . L_KEY statements R_KEY

    L_KEY           shift and go to state 158

    body                           shift and go to state 157

state 135

    (47) whileBlock -> WHILE L_PAR megaExp R_PAR . body
    (3) body -> . L_KEY statements R_KEY

    L_KEY           shift and go to state 158

    body                           shift and go to state 159

state 136

    (77) print -> PRINT L_PAR print_help R_PAR .

    DOT_COMMA       reduce using rule 77 (print -> PRINT L_PAR print_help R_PAR .)


state 137

    (83) read -> READ L_PAR idCall R_PAR .

    DOT_COMMA       reduce using rule 83 (read -> READ L_PAR idCall R_PAR .)


state 138

    (49) megaExp -> superExp AND superExp .

    DOT_COMMA       reduce using rule 49 (megaExp -> superExp AND superExp .)
    COMMA           reduce using rule 49 (megaExp -> superExp AND superExp .)
    R_PAR           reduce using rule 49 (megaExp -> superExp AND superExp .)


state 139

    (50) megaExp -> superExp OR superExp .

    DOT_COMMA       reduce using rule 50 (megaExp -> superExp OR superExp .)
    COMMA           reduce using rule 50 (megaExp -> superExp OR superExp .)
    R_PAR           reduce using rule 50 (megaExp -> superExp OR superExp .)


state 140

    (52) superExp -> exp MORE_THAN exp .

    AND             reduce using rule 52 (superExp -> exp MORE_THAN exp .)
    OR              reduce using rule 52 (superExp -> exp MORE_THAN exp .)
    DOT_COMMA       reduce using rule 52 (superExp -> exp MORE_THAN exp .)
    COMMA           reduce using rule 52 (superExp -> exp MORE_THAN exp .)
    R_PAR           reduce using rule 52 (superExp -> exp MORE_THAN exp .)


state 141

    (53) superExp -> exp LESS_THAN exp .

    AND             reduce using rule 53 (superExp -> exp LESS_THAN exp .)
    OR              reduce using rule 53 (superExp -> exp LESS_THAN exp .)
    DOT_COMMA       reduce using rule 53 (superExp -> exp LESS_THAN exp .)
    COMMA           reduce using rule 53 (superExp -> exp LESS_THAN exp .)
    R_PAR           reduce using rule 53 (superExp -> exp LESS_THAN exp .)


state 142

    (54) superExp -> exp MORE_EQUAL exp .

    AND             reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)
    OR              reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)
    DOT_COMMA       reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)
    COMMA           reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)
    R_PAR           reduce using rule 54 (superExp -> exp MORE_EQUAL exp .)


state 143

    (55) superExp -> exp LESS_EQUAL exp .

    AND             reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)
    OR              reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)
    DOT_COMMA       reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)
    COMMA           reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)
    R_PAR           reduce using rule 55 (superExp -> exp LESS_EQUAL exp .)


state 144

    (56) superExp -> exp EQUAL exp .

    AND             reduce using rule 56 (superExp -> exp EQUAL exp .)
    OR              reduce using rule 56 (superExp -> exp EQUAL exp .)
    DOT_COMMA       reduce using rule 56 (superExp -> exp EQUAL exp .)
    COMMA           reduce using rule 56 (superExp -> exp EQUAL exp .)
    R_PAR           reduce using rule 56 (superExp -> exp EQUAL exp .)


state 145

    (57) superExp -> exp NOT_EQUAL exp .

    AND             reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)
    OR              reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)
    DOT_COMMA       reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)
    COMMA           reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)
    R_PAR           reduce using rule 57 (superExp -> exp NOT_EQUAL exp .)


state 146

    (59) exp -> term PLUS exp .

    MORE_THAN       reduce using rule 59 (exp -> term PLUS exp .)
    LESS_THAN       reduce using rule 59 (exp -> term PLUS exp .)
    MORE_EQUAL      reduce using rule 59 (exp -> term PLUS exp .)
    LESS_EQUAL      reduce using rule 59 (exp -> term PLUS exp .)
    EQUAL           reduce using rule 59 (exp -> term PLUS exp .)
    NOT_EQUAL       reduce using rule 59 (exp -> term PLUS exp .)
    AND             reduce using rule 59 (exp -> term PLUS exp .)
    OR              reduce using rule 59 (exp -> term PLUS exp .)
    DOT_COMMA       reduce using rule 59 (exp -> term PLUS exp .)
    COMMA           reduce using rule 59 (exp -> term PLUS exp .)
    R_PAR           reduce using rule 59 (exp -> term PLUS exp .)
    R_BRACK         reduce using rule 59 (exp -> term PLUS exp .)


state 147

    (60) exp -> term MINUS exp .

    MORE_THAN       reduce using rule 60 (exp -> term MINUS exp .)
    LESS_THAN       reduce using rule 60 (exp -> term MINUS exp .)
    MORE_EQUAL      reduce using rule 60 (exp -> term MINUS exp .)
    LESS_EQUAL      reduce using rule 60 (exp -> term MINUS exp .)
    EQUAL           reduce using rule 60 (exp -> term MINUS exp .)
    NOT_EQUAL       reduce using rule 60 (exp -> term MINUS exp .)
    AND             reduce using rule 60 (exp -> term MINUS exp .)
    OR              reduce using rule 60 (exp -> term MINUS exp .)
    DOT_COMMA       reduce using rule 60 (exp -> term MINUS exp .)
    COMMA           reduce using rule 60 (exp -> term MINUS exp .)
    R_PAR           reduce using rule 60 (exp -> term MINUS exp .)
    R_BRACK         reduce using rule 60 (exp -> term MINUS exp .)


state 148

    (62) term -> factor TIMES term .

    PLUS            reduce using rule 62 (term -> factor TIMES term .)
    MINUS           reduce using rule 62 (term -> factor TIMES term .)
    MORE_THAN       reduce using rule 62 (term -> factor TIMES term .)
    LESS_THAN       reduce using rule 62 (term -> factor TIMES term .)
    MORE_EQUAL      reduce using rule 62 (term -> factor TIMES term .)
    LESS_EQUAL      reduce using rule 62 (term -> factor TIMES term .)
    EQUAL           reduce using rule 62 (term -> factor TIMES term .)
    NOT_EQUAL       reduce using rule 62 (term -> factor TIMES term .)
    AND             reduce using rule 62 (term -> factor TIMES term .)
    OR              reduce using rule 62 (term -> factor TIMES term .)
    DOT_COMMA       reduce using rule 62 (term -> factor TIMES term .)
    COMMA           reduce using rule 62 (term -> factor TIMES term .)
    R_PAR           reduce using rule 62 (term -> factor TIMES term .)
    R_BRACK         reduce using rule 62 (term -> factor TIMES term .)


state 149

    (63) term -> factor DIVIDE term .

    PLUS            reduce using rule 63 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 63 (term -> factor DIVIDE term .)
    MORE_THAN       reduce using rule 63 (term -> factor DIVIDE term .)
    LESS_THAN       reduce using rule 63 (term -> factor DIVIDE term .)
    MORE_EQUAL      reduce using rule 63 (term -> factor DIVIDE term .)
    LESS_EQUAL      reduce using rule 63 (term -> factor DIVIDE term .)
    EQUAL           reduce using rule 63 (term -> factor DIVIDE term .)
    NOT_EQUAL       reduce using rule 63 (term -> factor DIVIDE term .)
    AND             reduce using rule 63 (term -> factor DIVIDE term .)
    OR              reduce using rule 63 (term -> factor DIVIDE term .)
    DOT_COMMA       reduce using rule 63 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 63 (term -> factor DIVIDE term .)
    R_PAR           reduce using rule 63 (term -> factor DIVIDE term .)
    R_BRACK         reduce using rule 63 (term -> factor DIVIDE term .)


state 150

    (64) term -> factor MOD term .

    PLUS            reduce using rule 64 (term -> factor MOD term .)
    MINUS           reduce using rule 64 (term -> factor MOD term .)
    MORE_THAN       reduce using rule 64 (term -> factor MOD term .)
    LESS_THAN       reduce using rule 64 (term -> factor MOD term .)
    MORE_EQUAL      reduce using rule 64 (term -> factor MOD term .)
    LESS_EQUAL      reduce using rule 64 (term -> factor MOD term .)
    EQUAL           reduce using rule 64 (term -> factor MOD term .)
    NOT_EQUAL       reduce using rule 64 (term -> factor MOD term .)
    AND             reduce using rule 64 (term -> factor MOD term .)
    OR              reduce using rule 64 (term -> factor MOD term .)
    DOT_COMMA       reduce using rule 64 (term -> factor MOD term .)
    COMMA           reduce using rule 64 (term -> factor MOD term .)
    R_PAR           reduce using rule 64 (term -> factor MOD term .)
    R_BRACK         reduce using rule 64 (term -> factor MOD term .)


state 151

    (72) factor -> L_PAR megaExp R_PAR .

    TIMES           reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    DIVIDE          reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    MOD             reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    PLUS            reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    MINUS           reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    MORE_THAN       reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    LESS_THAN       reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    MORE_EQUAL      reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    LESS_EQUAL      reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    EQUAL           reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    NOT_EQUAL       reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    AND             reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    OR              reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    DOT_COMMA       reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    COMMA           reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    R_PAR           reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)
    R_BRACK         reduce using rule 72 (factor -> L_PAR megaExp R_PAR .)


state 152

    (14) functionsHelp2 -> type ID COMMA . functionsHelp2
    (13) functionsHelp2 -> . type ID
    (14) functionsHelp2 -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING
    (20) type -> . VOID

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 94
    functionsHelp2                 shift and go to state 160

state 153

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_KEY variables statements R_KEY .

    MAIN            reduce using rule 9 (functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_KEY variables statements R_KEY .)


state 154

    (7) variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .

    FUNCTION        reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    MAIN            reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    ID              reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    IF              reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    WHILE           reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    PRINT           reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    READ            reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    RETURN          reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)
    R_KEY           reduce using rule 7 (variables -> VAR type ID L_BRACK INTEGER R_BRACK L_BRACK INTEGER R_BRACK DOT_COMMA variables .)


state 155

    (42) functionCallParamsOptional -> megaExp COMMA functionCallParamsOptional .

    R_PAR           reduce using rule 42 (functionCallParamsOptional -> megaExp COMMA functionCallParamsOptional .)


state 156

    (76) idCall -> ID L_BRACK exp R_BRACK L_BRACK . exp R_BRACK
    (58) exp -> . term
    (59) exp -> . term PLUS exp
    (60) exp -> . term MINUS exp
    (61) term -> . factor
    (62) term -> . factor TIMES term
    (63) term -> . factor DIVIDE term
    (64) term -> . factor MOD term
    (65) factor -> . INTEGER
    (66) factor -> . DECIMAL
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . VOID
    (71) factor -> . idCall
    (72) factor -> . L_PAR megaExp R_PAR
    (73) factor -> . functionCall
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 84
    DECIMAL         shift and go to state 85
    ALPHANUMERIC    shift and go to state 86
    CHARACTER       shift and go to state 87
    BOOLEAN         shift and go to state 88
    VOID            shift and go to state 89
    L_PAR           shift and go to state 91
    ID              shift and go to state 93

    exp                            shift and go to state 161
    term                           shift and go to state 82
    factor                         shift and go to state 83
    idCall                         shift and go to state 90
    functionCall                   shift and go to state 92

state 157

    (44) ifBlock -> IF L_PAR megaExp R_PAR body . optionalElse
    (45) optionalElse -> .
    (46) optionalElse -> . ELSE body

    ID              reduce using rule 45 (optionalElse -> .)
    IF              reduce using rule 45 (optionalElse -> .)
    WHILE           reduce using rule 45 (optionalElse -> .)
    PRINT           reduce using rule 45 (optionalElse -> .)
    READ            reduce using rule 45 (optionalElse -> .)
    COMMENT_LINE    reduce using rule 45 (optionalElse -> .)
    RETURN          reduce using rule 45 (optionalElse -> .)
    R_KEY           reduce using rule 45 (optionalElse -> .)
    ELSE            shift and go to state 163

    optionalElse                   shift and go to state 162

state 158

    (3) body -> L_KEY . statements R_KEY
    (21) statements -> .
    (22) statements -> . statement statements
    (23) statement -> .
    (24) statement -> . assignment DOT_COMMA
    (25) statement -> . functionCall DOT_COMMA
    (26) statement -> . ifBlock
    (27) statement -> . whileBlock
    (28) statement -> . print DOT_COMMA
    (29) statement -> . read DOT_COMMA
    (30) statement -> . lineComment
    (31) statement -> . return DOT_COMMA
    (33) assignment -> . idCall ASSIGN megaExp
    (34) assignment -> . idCall ASSIGN functionCall
    (35) assignment -> . assignIncr
    (36) assignment -> . assignDecr
    (39) functionCall -> . ID L_PAR functionCallParams R_PAR
    (44) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (47) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (77) print -> . PRINT L_PAR print_help R_PAR
    (83) read -> . READ L_PAR idCall R_PAR
    (84) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (32) return -> . RETURN megaExp
    (74) idCall -> . ID
    (75) idCall -> . ID L_BRACK exp R_BRACK
    (76) idCall -> . ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK
    (37) assignIncr -> . idCall INCREMENT
    (38) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_KEY resolved using rule 21 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_KEY           reduce using rule 21 (statements -> .)
    ID              shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    PRINT           shift and go to state 54
    READ            shift and go to state 55
    COMMENT_LINE    shift and go to state 56
    RETURN          shift and go to state 57

  ! ID              [ reduce using rule 23 (statement -> .) ]
  ! IF              [ reduce using rule 23 (statement -> .) ]
  ! WHILE           [ reduce using rule 23 (statement -> .) ]
  ! PRINT           [ reduce using rule 23 (statement -> .) ]
  ! READ            [ reduce using rule 23 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 23 (statement -> .) ]
  ! RETURN          [ reduce using rule 23 (statement -> .) ]
  ! R_KEY           [ reduce using rule 23 (statement -> .) ]

    statements                     shift and go to state 164
    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    functionCall                   shift and go to state 41
    ifBlock                        shift and go to state 42
    whileBlock                     shift and go to state 43
    print                          shift and go to state 44
    read                           shift and go to state 45
    lineComment                    shift and go to state 46
    return                         shift and go to state 47
    idCall                         shift and go to state 48
    assignIncr                     shift and go to state 49
    assignDecr                     shift and go to state 50

state 159

    (47) whileBlock -> WHILE L_PAR megaExp R_PAR body .

    ID              reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    IF              reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    WHILE           reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    PRINT           reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    READ            reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    COMMENT_LINE    reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    RETURN          reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    R_KEY           reduce using rule 47 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)


state 160

    (14) functionsHelp2 -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 14 (functionsHelp2 -> type ID COMMA functionsHelp2 .)


state 161

    (76) idCall -> ID L_BRACK exp R_BRACK L_BRACK exp . R_BRACK

    R_BRACK         shift and go to state 165


state 162

    (44) ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .

    ID              reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    IF              reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    WHILE           reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    PRINT           reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    READ            reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    COMMENT_LINE    reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    RETURN          reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    R_KEY           reduce using rule 44 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)


state 163

    (46) optionalElse -> ELSE . body
    (3) body -> . L_KEY statements R_KEY

    L_KEY           shift and go to state 158

    body                           shift and go to state 166

state 164

    (3) body -> L_KEY statements . R_KEY

    R_KEY           shift and go to state 167


state 165

    (76) idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .

    ASSIGN          reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    INCREMENT       reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    DECREMENT       reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    TIMES           reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    DIVIDE          reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    MOD             reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    PLUS            reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    MINUS           reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    MORE_THAN       reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    LESS_THAN       reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    MORE_EQUAL      reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    LESS_EQUAL      reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    EQUAL           reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    NOT_EQUAL       reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    AND             reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    OR              reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    DOT_COMMA       reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    COMMA           reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    R_PAR           reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)
    R_BRACK         reduce using rule 76 (idCall -> ID L_BRACK exp R_BRACK L_BRACK exp R_BRACK .)


state 166

    (46) optionalElse -> ELSE body .

    ID              reduce using rule 46 (optionalElse -> ELSE body .)
    IF              reduce using rule 46 (optionalElse -> ELSE body .)
    WHILE           reduce using rule 46 (optionalElse -> ELSE body .)
    PRINT           reduce using rule 46 (optionalElse -> ELSE body .)
    READ            reduce using rule 46 (optionalElse -> ELSE body .)
    COMMENT_LINE    reduce using rule 46 (optionalElse -> ELSE body .)
    RETURN          reduce using rule 46 (optionalElse -> ELSE body .)
    R_KEY           reduce using rule 46 (optionalElse -> ELSE body .)


state 167

    (3) body -> L_KEY statements R_KEY .

    ELSE            reduce using rule 3 (body -> L_KEY statements R_KEY .)
    ID              reduce using rule 3 (body -> L_KEY statements R_KEY .)
    IF              reduce using rule 3 (body -> L_KEY statements R_KEY .)
    WHILE           reduce using rule 3 (body -> L_KEY statements R_KEY .)
    PRINT           reduce using rule 3 (body -> L_KEY statements R_KEY .)
    READ            reduce using rule 3 (body -> L_KEY statements R_KEY .)
    COMMENT_LINE    reduce using rule 3 (body -> L_KEY statements R_KEY .)
    RETURN          reduce using rule 3 (body -> L_KEY statements R_KEY .)
    R_KEY           reduce using rule 3 (body -> L_KEY statements R_KEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 33 resolved as shift
WARNING: shift/reduce conflict for IF in state 33 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 33 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 33 resolved as shift
WARNING: shift/reduce conflict for READ in state 33 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 33 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 33 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 39 resolved as shift
WARNING: shift/reduce conflict for READ in state 39 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 39 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 96 resolved as shift
WARNING: shift/reduce conflict for READ in state 96 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 96 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for IF in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 158 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 158 resolved as shift
WARNING: shift/reduce conflict for READ in state 158 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 158 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 158 resolved as shift
WARNING: reduce/reduce conflict in state 33 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 33
WARNING: reduce/reduce conflict in state 39 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 96 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 96
WARNING: reduce/reduce conflict in state 99 resolved using rule (assignment -> idCall ASSIGN functionCall)
WARNING: rejected rule (factor -> functionCall) in state 99
WARNING: reduce/reduce conflict in state 107 resolved using rule (factor -> ALPHANUMERIC)
WARNING: rejected rule (print_help -> ALPHANUMERIC) in state 107
WARNING: reduce/reduce conflict in state 108 resolved using rule (factor -> idCall)
WARNING: rejected rule (print_help -> idCall) in state 108
WARNING: reduce/reduce conflict in state 109 resolved using rule (factor -> functionCall)
WARNING: rejected rule (print_help -> functionCall) in state 109
WARNING: reduce/reduce conflict in state 158 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 158
WARNING: Rule (statement -> <empty>) is never reduced
WARNING: Rule (print_help -> ALPHANUMERIC) is never reduced
WARNING: Rule (print_help -> idCall) is never reduced
WARNING: Rule (print_help -> functionCall) is never reduced
