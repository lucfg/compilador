Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK
Rule 2     mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK
Rule 3     body -> L_BRACK statements R_BRACK
Rule 4     variables -> <empty>
Rule 5     variables -> VAR type ID DOT_COMMA variables
Rule 6     variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables
Rule 7     functions -> <empty>
Rule 8     functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
Rule 9     functionsHelp -> <empty>
Rule 10    functionsHelp -> type ID
Rule 11    functionsHelp -> type ID COMMA functionsHelp2
Rule 12    functionsHelp2 -> type ID
Rule 13    functionsHelp2 -> type ID COMMA functionsHelp2
Rule 14    type -> INT
Rule 15    type -> DECIM
Rule 16    type -> BOOL
Rule 17    type -> CHAR
Rule 18    type -> STRING
Rule 19    type -> VOID
Rule 20    statements -> <empty>
Rule 21    statements -> statement statements
Rule 22    statement -> <empty>
Rule 23    statement -> assignment DOT_COMMA
Rule 24    statement -> functionCall DOT_COMMA
Rule 25    statement -> ifBlock
Rule 26    statement -> whileBlock
Rule 27    statement -> print DOT_COMMA
Rule 28    statement -> read DOT_COMMA
Rule 29    statement -> lineComment
Rule 30    statement -> return DOT_COMMA
Rule 31    return -> RETURN megaExp
Rule 32    assignment -> idCall ASSIGN megaExp
Rule 33    assignment -> idCall ASSIGN functionCall
Rule 34    assignment -> assignIncr
Rule 35    assignment -> assignDecr
Rule 36    assignIncr -> idCall INCREMENT
Rule 37    assignDecr -> idCall DECREMENT
Rule 38    functionCall -> ID L_PAR functionCallParams R_PAR
Rule 39    functionCallParams -> <empty>
Rule 40    functionCallParams -> functionCallParamsOptional
Rule 41    functionCallParamsOptional -> megaExp COMMA functionCallParamsOptional
Rule 42    functionCallParamsOptional -> megaExp
Rule 43    ifBlock -> IF L_PAR megaExp R_PAR body optionalElse
Rule 44    optionalElse -> <empty>
Rule 45    optionalElse -> ELSE body
Rule 46    whileBlock -> WHILE L_PAR megaExp R_PAR body
Rule 47    megaExp -> superExp
Rule 48    megaExp -> superExp AND superExp
Rule 49    megaExp -> superExp OR superExp
Rule 50    superExp -> exp
Rule 51    superExp -> exp MORE_THAN exp
Rule 52    superExp -> exp LESS_THAN exp
Rule 53    superExp -> exp MORE_EQUAL exp
Rule 54    superExp -> exp LESS_EQUAL exp
Rule 55    superExp -> exp EQUAL exp
Rule 56    superExp -> exp NOT_EQUAL exp
Rule 57    exp -> term
Rule 58    exp -> term PLUS exp
Rule 59    exp -> term MINUS exp
Rule 60    term -> factor
Rule 61    term -> factor TIMES term
Rule 62    term -> factor DIVIDE term
Rule 63    term -> factor MOD term
Rule 64    factor -> INTEGER
Rule 65    factor -> DECIMAL
Rule 66    factor -> ALPHANUMERIC
Rule 67    factor -> CHARACTER
Rule 68    factor -> BOOLEAN
Rule 69    factor -> idCall
Rule 70    factor -> L_PAR megaExp R_PAR
Rule 71    factor -> functionCall
Rule 72    idCall -> ID
Rule 73    idCall -> ID L_KEY exp R_KEY
Rule 74    print -> PRINT L_PAR print_help R_PAR
Rule 75    print_help -> <empty>
Rule 76    print_help -> ALPHANUMERIC
Rule 77    print_help -> idCall
Rule 78    print_help -> functionCall
Rule 79    print_help -> megaExp
Rule 80    read -> READ L_PAR idCall R_PAR
Rule 81    lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE

Terminals, with rules where they appear

ALPHANUMERIC         : 66 76 81
AND                  : 48
ASSIGN               : 32 33
BOOL                 : 16
BOOLEAN              : 68
CHAR                 : 17
CHARACTER            : 67
COMMA                : 11 13 41
COMMENT_LINE         : 81
DECIM                : 15
DECIMAL              : 65
DECREMENT            : 37
DIVIDE               : 62
DOT_COMMA            : 5 6 23 24 27 28 30
ELSE                 : 45
END_LINE             : 81
EQUAL                : 55
FUNCTION             : 8
ID                   : 1 5 6 8 10 11 12 13 38 72 73
IF                   : 43
INCREMENT            : 36
INT                  : 14
INTEGER              : 6 64
LESS_EQUAL           : 54
LESS_THAN            : 52
L_BRACK              : 1 2 3 8
L_KEY                : 6 73
L_PAR                : 2 8 38 43 46 70 74 80
MAIN                 : 2
MINUS                : 59
MOD                  : 63
MORE_EQUAL           : 53
MORE_THAN            : 51
NOT_EQUAL            : 56
OR                   : 49
PLUS                 : 58
PRINT                : 74
PROGRAM              : 1
READ                 : 80
RETURN               : 31
R_BRACK              : 1 2 3 8
R_KEY                : 6 73
R_PAR                : 2 8 38 43 46 70 74 80
STRING               : 18
TIMES                : 61
VAR                  : 5 6
VOID                 : 19
WHILE                : 46
error                : 

Nonterminals, with rules where they appear

assignDecr           : 35
assignIncr           : 34
assignment           : 23
body                 : 43 45 46
exp                  : 50 51 51 52 52 53 53 54 54 55 55 56 56 58 59 73
factor               : 60 61 62 63
functionCall         : 24 33 71 78
functionCallParams   : 38
functionCallParamsOptional : 40 41
functions            : 1
functionsHelp        : 8
functionsHelp2       : 11 13
idCall               : 32 33 36 37 69 77 80
ifBlock              : 25
lineComment          : 29
mainBody             : 1
megaExp              : 31 32 41 42 43 46 70 79
optionalElse         : 43
print                : 27
print_help           : 74
program              : 0
read                 : 28
return               : 30
statement            : 21
statements           : 2 3 8 21
superExp             : 47 48 48 49 49
term                 : 57 58 59 61 62 63
type                 : 5 6 8 10 11 12 13
variables            : 1 2 5 6 8
whileBlock           : 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID L_BRACK variables functions mainBody R_BRACK

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID L_BRACK variables functions mainBody R_BRACK

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . L_BRACK variables functions mainBody R_BRACK

    L_BRACK         shift and go to state 4


state 4

    (1) program -> PROGRAM ID L_BRACK . variables functions mainBody R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 5

state 5

    (1) program -> PROGRAM ID L_BRACK variables . functions mainBody R_BRACK
    (7) functions -> .
    (8) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    MAIN            reduce using rule 7 (functions -> .)
    FUNCTION        shift and go to state 8

    functions                      shift and go to state 7

state 6

    (5) variables -> VAR . type ID DOT_COMMA variables
    (6) variables -> VAR . type ID L_KEY INTEGER R_KEY DOT_COMMA variables
    (14) type -> . INT
    (15) type -> . DECIM
    (16) type -> . BOOL
    (17) type -> . CHAR
    (18) type -> . STRING
    (19) type -> . VOID

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 9

state 7

    (1) program -> PROGRAM ID L_BRACK variables functions . mainBody R_BRACK
    (2) mainBody -> . MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK

    MAIN            shift and go to state 17

    mainBody                       shift and go to state 16

state 8

    (8) functions -> FUNCTION . type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (14) type -> . INT
    (15) type -> . DECIM
    (16) type -> . BOOL
    (17) type -> . CHAR
    (18) type -> . STRING
    (19) type -> . VOID

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 18

state 9

    (5) variables -> VAR type . ID DOT_COMMA variables
    (6) variables -> VAR type . ID L_KEY INTEGER R_KEY DOT_COMMA variables

    ID              shift and go to state 19


state 10

    (14) type -> INT .

    ID              reduce using rule 14 (type -> INT .)


state 11

    (15) type -> DECIM .

    ID              reduce using rule 15 (type -> DECIM .)


state 12

    (16) type -> BOOL .

    ID              reduce using rule 16 (type -> BOOL .)


state 13

    (17) type -> CHAR .

    ID              reduce using rule 17 (type -> CHAR .)


state 14

    (18) type -> STRING .

    ID              reduce using rule 18 (type -> STRING .)


state 15

    (19) type -> VOID .

    ID              reduce using rule 19 (type -> VOID .)


state 16

    (1) program -> PROGRAM ID L_BRACK variables functions mainBody . R_BRACK

    R_BRACK         shift and go to state 20


state 17

    (2) mainBody -> MAIN . L_PAR R_PAR L_BRACK variables statements R_BRACK

    L_PAR           shift and go to state 21


state 18

    (8) functions -> FUNCTION type . ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    ID              shift and go to state 22


state 19

    (5) variables -> VAR type ID . DOT_COMMA variables
    (6) variables -> VAR type ID . L_KEY INTEGER R_KEY DOT_COMMA variables

    DOT_COMMA       shift and go to state 23
    L_KEY           shift and go to state 24


state 20

    (1) program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK .

    $end            reduce using rule 1 (program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK .)


state 21

    (2) mainBody -> MAIN L_PAR . R_PAR L_BRACK variables statements R_BRACK

    R_PAR           shift and go to state 25


state 22

    (8) functions -> FUNCTION type ID . L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    L_PAR           shift and go to state 26


state 23

    (5) variables -> VAR type ID DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 27

state 24

    (6) variables -> VAR type ID L_KEY . INTEGER R_KEY DOT_COMMA variables

    INTEGER         shift and go to state 28


state 25

    (2) mainBody -> MAIN L_PAR R_PAR . L_BRACK variables statements R_BRACK

    L_BRACK         shift and go to state 29


state 26

    (8) functions -> FUNCTION type ID L_PAR . functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (9) functionsHelp -> .
    (10) functionsHelp -> . type ID
    (11) functionsHelp -> . type ID COMMA functionsHelp2
    (14) type -> . INT
    (15) type -> . DECIM
    (16) type -> . BOOL
    (17) type -> . CHAR
    (18) type -> . STRING
    (19) type -> . VOID

    R_PAR           reduce using rule 9 (functionsHelp -> .)
    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 30
    functionsHelp                  shift and go to state 31

state 27

    (5) variables -> VAR type ID DOT_COMMA variables .

    FUNCTION        reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    MAIN            reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    ID              reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    IF              reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    WHILE           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    PRINT           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    READ            reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    RETURN          reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    R_BRACK         reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)


state 28

    (6) variables -> VAR type ID L_KEY INTEGER . R_KEY DOT_COMMA variables

    R_KEY           shift and go to state 32


state 29

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK . variables statements R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 33

state 30

    (10) functionsHelp -> type . ID
    (11) functionsHelp -> type . ID COMMA functionsHelp2

    ID              shift and go to state 34


state 31

    (8) functions -> FUNCTION type ID L_PAR functionsHelp . R_PAR L_BRACK variables statements R_BRACK

    R_PAR           shift and go to state 35


state 32

    (6) variables -> VAR type ID L_KEY INTEGER R_KEY . DOT_COMMA variables

    DOT_COMMA       shift and go to state 36


state 33

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . print DOT_COMMA
    (28) statement -> . read DOT_COMMA
    (29) statement -> . lineComment
    (30) statement -> . return DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (43) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (46) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (74) print -> . PRINT L_PAR print_help R_PAR
    (80) read -> . READ L_PAR idCall R_PAR
    (81) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (31) return -> . RETURN megaExp
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    PRINT           shift and go to state 53
    READ            shift and go to state 54
    COMMENT_LINE    shift and go to state 55
    RETURN          shift and go to state 56

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! RETURN          [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 37
    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    functionCall                   shift and go to state 40
    ifBlock                        shift and go to state 41
    whileBlock                     shift and go to state 42
    print                          shift and go to state 43
    read                           shift and go to state 44
    lineComment                    shift and go to state 45
    return                         shift and go to state 46
    idCall                         shift and go to state 47
    assignIncr                     shift and go to state 48
    assignDecr                     shift and go to state 49

state 34

    (10) functionsHelp -> type ID .
    (11) functionsHelp -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 10 (functionsHelp -> type ID .)
    COMMA           shift and go to state 57


state 35

    (8) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR . L_BRACK variables statements R_BRACK

    L_BRACK         shift and go to state 58


state 36

    (6) variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 59

state 37

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements . R_BRACK

    R_BRACK         shift and go to state 60


state 38

    (21) statements -> statement . statements
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . print DOT_COMMA
    (28) statement -> . read DOT_COMMA
    (29) statement -> . lineComment
    (30) statement -> . return DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (43) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (46) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (74) print -> . PRINT L_PAR print_help R_PAR
    (80) read -> . READ L_PAR idCall R_PAR
    (81) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (31) return -> . RETURN megaExp
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    PRINT           shift and go to state 53
    READ            shift and go to state 54
    COMMENT_LINE    shift and go to state 55
    RETURN          shift and go to state 56

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! RETURN          [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statement                      shift and go to state 38
    statements                     shift and go to state 61
    assignment                     shift and go to state 39
    functionCall                   shift and go to state 40
    ifBlock                        shift and go to state 41
    whileBlock                     shift and go to state 42
    print                          shift and go to state 43
    read                           shift and go to state 44
    lineComment                    shift and go to state 45
    return                         shift and go to state 46
    idCall                         shift and go to state 47
    assignIncr                     shift and go to state 48
    assignDecr                     shift and go to state 49

state 39

    (23) statement -> assignment . DOT_COMMA

    DOT_COMMA       shift and go to state 62


state 40

    (24) statement -> functionCall . DOT_COMMA

    DOT_COMMA       shift and go to state 63


state 41

    (25) statement -> ifBlock .

    ID              reduce using rule 25 (statement -> ifBlock .)
    IF              reduce using rule 25 (statement -> ifBlock .)
    WHILE           reduce using rule 25 (statement -> ifBlock .)
    PRINT           reduce using rule 25 (statement -> ifBlock .)
    READ            reduce using rule 25 (statement -> ifBlock .)
    COMMENT_LINE    reduce using rule 25 (statement -> ifBlock .)
    RETURN          reduce using rule 25 (statement -> ifBlock .)
    R_BRACK         reduce using rule 25 (statement -> ifBlock .)


state 42

    (26) statement -> whileBlock .

    ID              reduce using rule 26 (statement -> whileBlock .)
    IF              reduce using rule 26 (statement -> whileBlock .)
    WHILE           reduce using rule 26 (statement -> whileBlock .)
    PRINT           reduce using rule 26 (statement -> whileBlock .)
    READ            reduce using rule 26 (statement -> whileBlock .)
    COMMENT_LINE    reduce using rule 26 (statement -> whileBlock .)
    RETURN          reduce using rule 26 (statement -> whileBlock .)
    R_BRACK         reduce using rule 26 (statement -> whileBlock .)


state 43

    (27) statement -> print . DOT_COMMA

    DOT_COMMA       shift and go to state 64


state 44

    (28) statement -> read . DOT_COMMA

    DOT_COMMA       shift and go to state 65


state 45

    (29) statement -> lineComment .

    ID              reduce using rule 29 (statement -> lineComment .)
    IF              reduce using rule 29 (statement -> lineComment .)
    WHILE           reduce using rule 29 (statement -> lineComment .)
    PRINT           reduce using rule 29 (statement -> lineComment .)
    READ            reduce using rule 29 (statement -> lineComment .)
    COMMENT_LINE    reduce using rule 29 (statement -> lineComment .)
    RETURN          reduce using rule 29 (statement -> lineComment .)
    R_BRACK         reduce using rule 29 (statement -> lineComment .)


state 46

    (30) statement -> return . DOT_COMMA

    DOT_COMMA       shift and go to state 66


state 47

    (32) assignment -> idCall . ASSIGN megaExp
    (33) assignment -> idCall . ASSIGN functionCall
    (36) assignIncr -> idCall . INCREMENT
    (37) assignDecr -> idCall . DECREMENT

    ASSIGN          shift and go to state 67
    INCREMENT       shift and go to state 68
    DECREMENT       shift and go to state 69


state 48

    (34) assignment -> assignIncr .

    DOT_COMMA       reduce using rule 34 (assignment -> assignIncr .)


state 49

    (35) assignment -> assignDecr .

    DOT_COMMA       reduce using rule 35 (assignment -> assignDecr .)


state 50

    (38) functionCall -> ID . L_PAR functionCallParams R_PAR
    (72) idCall -> ID .
    (73) idCall -> ID . L_KEY exp R_KEY

    L_PAR           shift and go to state 70
    ASSIGN          reduce using rule 72 (idCall -> ID .)
    INCREMENT       reduce using rule 72 (idCall -> ID .)
    DECREMENT       reduce using rule 72 (idCall -> ID .)
    TIMES           reduce using rule 72 (idCall -> ID .)
    DIVIDE          reduce using rule 72 (idCall -> ID .)
    MOD             reduce using rule 72 (idCall -> ID .)
    PLUS            reduce using rule 72 (idCall -> ID .)
    MINUS           reduce using rule 72 (idCall -> ID .)
    MORE_THAN       reduce using rule 72 (idCall -> ID .)
    LESS_THAN       reduce using rule 72 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 72 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 72 (idCall -> ID .)
    EQUAL           reduce using rule 72 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 72 (idCall -> ID .)
    AND             reduce using rule 72 (idCall -> ID .)
    OR              reduce using rule 72 (idCall -> ID .)
    DOT_COMMA       reduce using rule 72 (idCall -> ID .)
    L_KEY           shift and go to state 71


state 51

    (43) ifBlock -> IF . L_PAR megaExp R_PAR body optionalElse

    L_PAR           shift and go to state 72


state 52

    (46) whileBlock -> WHILE . L_PAR megaExp R_PAR body

    L_PAR           shift and go to state 73


state 53

    (74) print -> PRINT . L_PAR print_help R_PAR

    L_PAR           shift and go to state 74


state 54

    (80) read -> READ . L_PAR idCall R_PAR

    L_PAR           shift and go to state 75


state 55

    (81) lineComment -> COMMENT_LINE . ALPHANUMERIC END_LINE

    ALPHANUMERIC    shift and go to state 76


state 56

    (31) return -> RETURN . megaExp
    (47) megaExp -> . superExp
    (48) megaExp -> . superExp AND superExp
    (49) megaExp -> . superExp OR superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    megaExp                        shift and go to state 77
    superExp                       shift and go to state 78
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 57

    (11) functionsHelp -> type ID COMMA . functionsHelp2
    (12) functionsHelp2 -> . type ID
    (13) functionsHelp2 -> . type ID COMMA functionsHelp2
    (14) type -> . INT
    (15) type -> . DECIM
    (16) type -> . BOOL
    (17) type -> . CHAR
    (18) type -> . STRING
    (19) type -> . VOID

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 91
    functionsHelp2                 shift and go to state 92

state 58

    (8) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK . variables statements R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables

    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    RETURN          reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 93

state 59

    (6) variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .

    FUNCTION        reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    MAIN            reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    ID              reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    IF              reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    WHILE           reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    PRINT           reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    READ            reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    RETURN          reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)
    R_BRACK         reduce using rule 6 (variables -> VAR type ID L_KEY INTEGER R_KEY DOT_COMMA variables .)


state 60

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK .

    R_BRACK         reduce using rule 2 (mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK .)


state 61

    (21) statements -> statement statements .

    R_BRACK         reduce using rule 21 (statements -> statement statements .)


state 62

    (23) statement -> assignment DOT_COMMA .

    ID              reduce using rule 23 (statement -> assignment DOT_COMMA .)
    IF              reduce using rule 23 (statement -> assignment DOT_COMMA .)
    WHILE           reduce using rule 23 (statement -> assignment DOT_COMMA .)
    PRINT           reduce using rule 23 (statement -> assignment DOT_COMMA .)
    READ            reduce using rule 23 (statement -> assignment DOT_COMMA .)
    COMMENT_LINE    reduce using rule 23 (statement -> assignment DOT_COMMA .)
    RETURN          reduce using rule 23 (statement -> assignment DOT_COMMA .)
    R_BRACK         reduce using rule 23 (statement -> assignment DOT_COMMA .)


state 63

    (24) statement -> functionCall DOT_COMMA .

    ID              reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    IF              reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    WHILE           reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    PRINT           reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    READ            reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    COMMENT_LINE    reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    RETURN          reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    R_BRACK         reduce using rule 24 (statement -> functionCall DOT_COMMA .)


state 64

    (27) statement -> print DOT_COMMA .

    ID              reduce using rule 27 (statement -> print DOT_COMMA .)
    IF              reduce using rule 27 (statement -> print DOT_COMMA .)
    WHILE           reduce using rule 27 (statement -> print DOT_COMMA .)
    PRINT           reduce using rule 27 (statement -> print DOT_COMMA .)
    READ            reduce using rule 27 (statement -> print DOT_COMMA .)
    COMMENT_LINE    reduce using rule 27 (statement -> print DOT_COMMA .)
    RETURN          reduce using rule 27 (statement -> print DOT_COMMA .)
    R_BRACK         reduce using rule 27 (statement -> print DOT_COMMA .)


state 65

    (28) statement -> read DOT_COMMA .

    ID              reduce using rule 28 (statement -> read DOT_COMMA .)
    IF              reduce using rule 28 (statement -> read DOT_COMMA .)
    WHILE           reduce using rule 28 (statement -> read DOT_COMMA .)
    PRINT           reduce using rule 28 (statement -> read DOT_COMMA .)
    READ            reduce using rule 28 (statement -> read DOT_COMMA .)
    COMMENT_LINE    reduce using rule 28 (statement -> read DOT_COMMA .)
    RETURN          reduce using rule 28 (statement -> read DOT_COMMA .)
    R_BRACK         reduce using rule 28 (statement -> read DOT_COMMA .)


state 66

    (30) statement -> return DOT_COMMA .

    ID              reduce using rule 30 (statement -> return DOT_COMMA .)
    IF              reduce using rule 30 (statement -> return DOT_COMMA .)
    WHILE           reduce using rule 30 (statement -> return DOT_COMMA .)
    PRINT           reduce using rule 30 (statement -> return DOT_COMMA .)
    READ            reduce using rule 30 (statement -> return DOT_COMMA .)
    COMMENT_LINE    reduce using rule 30 (statement -> return DOT_COMMA .)
    RETURN          reduce using rule 30 (statement -> return DOT_COMMA .)
    R_BRACK         reduce using rule 30 (statement -> return DOT_COMMA .)


state 67

    (32) assignment -> idCall ASSIGN . megaExp
    (33) assignment -> idCall ASSIGN . functionCall
    (47) megaExp -> . superExp
    (48) megaExp -> . superExp AND superExp
    (49) megaExp -> . superExp OR superExp
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 50
    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88

    idCall                         shift and go to state 87
    megaExp                        shift and go to state 94
    functionCall                   shift and go to state 95
    superExp                       shift and go to state 78
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81

state 68

    (36) assignIncr -> idCall INCREMENT .

    DOT_COMMA       reduce using rule 36 (assignIncr -> idCall INCREMENT .)


state 69

    (37) assignDecr -> idCall DECREMENT .

    DOT_COMMA       reduce using rule 37 (assignDecr -> idCall DECREMENT .)


state 70

    (38) functionCall -> ID L_PAR . functionCallParams R_PAR
    (39) functionCallParams -> .
    (40) functionCallParams -> . functionCallParamsOptional
    (41) functionCallParamsOptional -> . megaExp COMMA functionCallParamsOptional
    (42) functionCallParamsOptional -> . megaExp
    (47) megaExp -> . superExp
    (48) megaExp -> . superExp AND superExp
    (49) megaExp -> . superExp OR superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    R_PAR           reduce using rule 39 (functionCallParams -> .)
    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    functionCallParams             shift and go to state 96
    functionCallParamsOptional     shift and go to state 97
    megaExp                        shift and go to state 98
    superExp                       shift and go to state 78
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 71

    (73) idCall -> ID L_KEY . exp R_KEY
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    exp                            shift and go to state 99
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 72

    (43) ifBlock -> IF L_PAR . megaExp R_PAR body optionalElse
    (47) megaExp -> . superExp
    (48) megaExp -> . superExp AND superExp
    (49) megaExp -> . superExp OR superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    megaExp                        shift and go to state 100
    superExp                       shift and go to state 78
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 73

    (46) whileBlock -> WHILE L_PAR . megaExp R_PAR body
    (47) megaExp -> . superExp
    (48) megaExp -> . superExp AND superExp
    (49) megaExp -> . superExp OR superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    megaExp                        shift and go to state 101
    superExp                       shift and go to state 78
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 74

    (74) print -> PRINT L_PAR . print_help R_PAR
    (75) print_help -> .
    (76) print_help -> . ALPHANUMERIC
    (77) print_help -> . idCall
    (78) print_help -> . functionCall
    (79) print_help -> . megaExp
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (47) megaExp -> . superExp
    (48) megaExp -> . superExp AND superExp
    (49) megaExp -> . superExp OR superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall

    R_PAR           reduce using rule 75 (print_help -> .)
    ALPHANUMERIC    shift and go to state 103
    ID              shift and go to state 90
    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88

    print_help                     shift and go to state 102
    idCall                         shift and go to state 104
    functionCall                   shift and go to state 105
    megaExp                        shift and go to state 106
    exp                            shift and go to state 79
    superExp                       shift and go to state 78
    term                           shift and go to state 80
    factor                         shift and go to state 81

state 75

    (80) read -> READ L_PAR . idCall R_PAR
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 108

    idCall                         shift and go to state 107

state 76

    (81) lineComment -> COMMENT_LINE ALPHANUMERIC . END_LINE

    END_LINE        shift and go to state 109


state 77

    (31) return -> RETURN megaExp .

    DOT_COMMA       reduce using rule 31 (return -> RETURN megaExp .)


state 78

    (47) megaExp -> superExp .
    (48) megaExp -> superExp . AND superExp
    (49) megaExp -> superExp . OR superExp

    DOT_COMMA       reduce using rule 47 (megaExp -> superExp .)
    COMMA           reduce using rule 47 (megaExp -> superExp .)
    R_PAR           reduce using rule 47 (megaExp -> superExp .)
    AND             shift and go to state 110
    OR              shift and go to state 111


state 79

    (50) superExp -> exp .
    (51) superExp -> exp . MORE_THAN exp
    (52) superExp -> exp . LESS_THAN exp
    (53) superExp -> exp . MORE_EQUAL exp
    (54) superExp -> exp . LESS_EQUAL exp
    (55) superExp -> exp . EQUAL exp
    (56) superExp -> exp . NOT_EQUAL exp

    AND             reduce using rule 50 (superExp -> exp .)
    OR              reduce using rule 50 (superExp -> exp .)
    DOT_COMMA       reduce using rule 50 (superExp -> exp .)
    COMMA           reduce using rule 50 (superExp -> exp .)
    R_PAR           reduce using rule 50 (superExp -> exp .)
    MORE_THAN       shift and go to state 112
    LESS_THAN       shift and go to state 113
    MORE_EQUAL      shift and go to state 114
    LESS_EQUAL      shift and go to state 115
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 117


state 80

    (57) exp -> term .
    (58) exp -> term . PLUS exp
    (59) exp -> term . MINUS exp

    MORE_THAN       reduce using rule 57 (exp -> term .)
    LESS_THAN       reduce using rule 57 (exp -> term .)
    MORE_EQUAL      reduce using rule 57 (exp -> term .)
    LESS_EQUAL      reduce using rule 57 (exp -> term .)
    EQUAL           reduce using rule 57 (exp -> term .)
    NOT_EQUAL       reduce using rule 57 (exp -> term .)
    AND             reduce using rule 57 (exp -> term .)
    OR              reduce using rule 57 (exp -> term .)
    DOT_COMMA       reduce using rule 57 (exp -> term .)
    COMMA           reduce using rule 57 (exp -> term .)
    R_PAR           reduce using rule 57 (exp -> term .)
    R_KEY           reduce using rule 57 (exp -> term .)
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119


state 81

    (60) term -> factor .
    (61) term -> factor . TIMES term
    (62) term -> factor . DIVIDE term
    (63) term -> factor . MOD term

    PLUS            reduce using rule 60 (term -> factor .)
    MINUS           reduce using rule 60 (term -> factor .)
    MORE_THAN       reduce using rule 60 (term -> factor .)
    LESS_THAN       reduce using rule 60 (term -> factor .)
    MORE_EQUAL      reduce using rule 60 (term -> factor .)
    LESS_EQUAL      reduce using rule 60 (term -> factor .)
    EQUAL           reduce using rule 60 (term -> factor .)
    NOT_EQUAL       reduce using rule 60 (term -> factor .)
    AND             reduce using rule 60 (term -> factor .)
    OR              reduce using rule 60 (term -> factor .)
    DOT_COMMA       reduce using rule 60 (term -> factor .)
    COMMA           reduce using rule 60 (term -> factor .)
    R_PAR           reduce using rule 60 (term -> factor .)
    R_KEY           reduce using rule 60 (term -> factor .)
    TIMES           shift and go to state 120
    DIVIDE          shift and go to state 121
    MOD             shift and go to state 122


state 82

    (64) factor -> INTEGER .

    TIMES           reduce using rule 64 (factor -> INTEGER .)
    DIVIDE          reduce using rule 64 (factor -> INTEGER .)
    MOD             reduce using rule 64 (factor -> INTEGER .)
    PLUS            reduce using rule 64 (factor -> INTEGER .)
    MINUS           reduce using rule 64 (factor -> INTEGER .)
    MORE_THAN       reduce using rule 64 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 64 (factor -> INTEGER .)
    MORE_EQUAL      reduce using rule 64 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 64 (factor -> INTEGER .)
    EQUAL           reduce using rule 64 (factor -> INTEGER .)
    NOT_EQUAL       reduce using rule 64 (factor -> INTEGER .)
    AND             reduce using rule 64 (factor -> INTEGER .)
    OR              reduce using rule 64 (factor -> INTEGER .)
    DOT_COMMA       reduce using rule 64 (factor -> INTEGER .)
    COMMA           reduce using rule 64 (factor -> INTEGER .)
    R_PAR           reduce using rule 64 (factor -> INTEGER .)
    R_KEY           reduce using rule 64 (factor -> INTEGER .)


state 83

    (65) factor -> DECIMAL .

    TIMES           reduce using rule 65 (factor -> DECIMAL .)
    DIVIDE          reduce using rule 65 (factor -> DECIMAL .)
    MOD             reduce using rule 65 (factor -> DECIMAL .)
    PLUS            reduce using rule 65 (factor -> DECIMAL .)
    MINUS           reduce using rule 65 (factor -> DECIMAL .)
    MORE_THAN       reduce using rule 65 (factor -> DECIMAL .)
    LESS_THAN       reduce using rule 65 (factor -> DECIMAL .)
    MORE_EQUAL      reduce using rule 65 (factor -> DECIMAL .)
    LESS_EQUAL      reduce using rule 65 (factor -> DECIMAL .)
    EQUAL           reduce using rule 65 (factor -> DECIMAL .)
    NOT_EQUAL       reduce using rule 65 (factor -> DECIMAL .)
    AND             reduce using rule 65 (factor -> DECIMAL .)
    OR              reduce using rule 65 (factor -> DECIMAL .)
    DOT_COMMA       reduce using rule 65 (factor -> DECIMAL .)
    COMMA           reduce using rule 65 (factor -> DECIMAL .)
    R_PAR           reduce using rule 65 (factor -> DECIMAL .)
    R_KEY           reduce using rule 65 (factor -> DECIMAL .)


state 84

    (66) factor -> ALPHANUMERIC .

    TIMES           reduce using rule 66 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 66 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 66 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 66 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 66 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 66 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 66 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 66 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 66 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 66 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 66 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 66 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 66 (factor -> ALPHANUMERIC .)
    DOT_COMMA       reduce using rule 66 (factor -> ALPHANUMERIC .)
    COMMA           reduce using rule 66 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 66 (factor -> ALPHANUMERIC .)
    R_KEY           reduce using rule 66 (factor -> ALPHANUMERIC .)


state 85

    (67) factor -> CHARACTER .

    TIMES           reduce using rule 67 (factor -> CHARACTER .)
    DIVIDE          reduce using rule 67 (factor -> CHARACTER .)
    MOD             reduce using rule 67 (factor -> CHARACTER .)
    PLUS            reduce using rule 67 (factor -> CHARACTER .)
    MINUS           reduce using rule 67 (factor -> CHARACTER .)
    MORE_THAN       reduce using rule 67 (factor -> CHARACTER .)
    LESS_THAN       reduce using rule 67 (factor -> CHARACTER .)
    MORE_EQUAL      reduce using rule 67 (factor -> CHARACTER .)
    LESS_EQUAL      reduce using rule 67 (factor -> CHARACTER .)
    EQUAL           reduce using rule 67 (factor -> CHARACTER .)
    NOT_EQUAL       reduce using rule 67 (factor -> CHARACTER .)
    AND             reduce using rule 67 (factor -> CHARACTER .)
    OR              reduce using rule 67 (factor -> CHARACTER .)
    DOT_COMMA       reduce using rule 67 (factor -> CHARACTER .)
    COMMA           reduce using rule 67 (factor -> CHARACTER .)
    R_PAR           reduce using rule 67 (factor -> CHARACTER .)
    R_KEY           reduce using rule 67 (factor -> CHARACTER .)


state 86

    (68) factor -> BOOLEAN .

    TIMES           reduce using rule 68 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 68 (factor -> BOOLEAN .)
    MOD             reduce using rule 68 (factor -> BOOLEAN .)
    PLUS            reduce using rule 68 (factor -> BOOLEAN .)
    MINUS           reduce using rule 68 (factor -> BOOLEAN .)
    MORE_THAN       reduce using rule 68 (factor -> BOOLEAN .)
    LESS_THAN       reduce using rule 68 (factor -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 68 (factor -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 68 (factor -> BOOLEAN .)
    EQUAL           reduce using rule 68 (factor -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 68 (factor -> BOOLEAN .)
    AND             reduce using rule 68 (factor -> BOOLEAN .)
    OR              reduce using rule 68 (factor -> BOOLEAN .)
    DOT_COMMA       reduce using rule 68 (factor -> BOOLEAN .)
    COMMA           reduce using rule 68 (factor -> BOOLEAN .)
    R_PAR           reduce using rule 68 (factor -> BOOLEAN .)
    R_KEY           reduce using rule 68 (factor -> BOOLEAN .)


state 87

    (69) factor -> idCall .

    TIMES           reduce using rule 69 (factor -> idCall .)
    DIVIDE          reduce using rule 69 (factor -> idCall .)
    MOD             reduce using rule 69 (factor -> idCall .)
    PLUS            reduce using rule 69 (factor -> idCall .)
    MINUS           reduce using rule 69 (factor -> idCall .)
    MORE_THAN       reduce using rule 69 (factor -> idCall .)
    LESS_THAN       reduce using rule 69 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 69 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 69 (factor -> idCall .)
    EQUAL           reduce using rule 69 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 69 (factor -> idCall .)
    AND             reduce using rule 69 (factor -> idCall .)
    OR              reduce using rule 69 (factor -> idCall .)
    DOT_COMMA       reduce using rule 69 (factor -> idCall .)
    COMMA           reduce using rule 69 (factor -> idCall .)
    R_PAR           reduce using rule 69 (factor -> idCall .)
    R_KEY           reduce using rule 69 (factor -> idCall .)


state 88

    (70) factor -> L_PAR . megaExp R_PAR
    (47) megaExp -> . superExp
    (48) megaExp -> . superExp AND superExp
    (49) megaExp -> . superExp OR superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    megaExp                        shift and go to state 123
    superExp                       shift and go to state 78
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 89

    (71) factor -> functionCall .

    TIMES           reduce using rule 71 (factor -> functionCall .)
    DIVIDE          reduce using rule 71 (factor -> functionCall .)
    MOD             reduce using rule 71 (factor -> functionCall .)
    PLUS            reduce using rule 71 (factor -> functionCall .)
    MINUS           reduce using rule 71 (factor -> functionCall .)
    MORE_THAN       reduce using rule 71 (factor -> functionCall .)
    LESS_THAN       reduce using rule 71 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 71 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 71 (factor -> functionCall .)
    EQUAL           reduce using rule 71 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 71 (factor -> functionCall .)
    AND             reduce using rule 71 (factor -> functionCall .)
    OR              reduce using rule 71 (factor -> functionCall .)
    DOT_COMMA       reduce using rule 71 (factor -> functionCall .)
    COMMA           reduce using rule 71 (factor -> functionCall .)
    R_PAR           reduce using rule 71 (factor -> functionCall .)
    R_KEY           reduce using rule 71 (factor -> functionCall .)


state 90

    (72) idCall -> ID .
    (73) idCall -> ID . L_KEY exp R_KEY
    (38) functionCall -> ID . L_PAR functionCallParams R_PAR

    TIMES           reduce using rule 72 (idCall -> ID .)
    DIVIDE          reduce using rule 72 (idCall -> ID .)
    MOD             reduce using rule 72 (idCall -> ID .)
    PLUS            reduce using rule 72 (idCall -> ID .)
    MINUS           reduce using rule 72 (idCall -> ID .)
    MORE_THAN       reduce using rule 72 (idCall -> ID .)
    LESS_THAN       reduce using rule 72 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 72 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 72 (idCall -> ID .)
    EQUAL           reduce using rule 72 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 72 (idCall -> ID .)
    AND             reduce using rule 72 (idCall -> ID .)
    OR              reduce using rule 72 (idCall -> ID .)
    DOT_COMMA       reduce using rule 72 (idCall -> ID .)
    COMMA           reduce using rule 72 (idCall -> ID .)
    R_PAR           reduce using rule 72 (idCall -> ID .)
    R_KEY           reduce using rule 72 (idCall -> ID .)
    L_KEY           shift and go to state 71
    L_PAR           shift and go to state 70


state 91

    (12) functionsHelp2 -> type . ID
    (13) functionsHelp2 -> type . ID COMMA functionsHelp2

    ID              shift and go to state 124


state 92

    (11) functionsHelp -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 11 (functionsHelp -> type ID COMMA functionsHelp2 .)


state 93

    (8) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . print DOT_COMMA
    (28) statement -> . read DOT_COMMA
    (29) statement -> . lineComment
    (30) statement -> . return DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (43) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (46) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (74) print -> . PRINT L_PAR print_help R_PAR
    (80) read -> . READ L_PAR idCall R_PAR
    (81) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (31) return -> . RETURN megaExp
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    PRINT           shift and go to state 53
    READ            shift and go to state 54
    COMMENT_LINE    shift and go to state 55
    RETURN          shift and go to state 56

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! RETURN          [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 125
    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    functionCall                   shift and go to state 40
    ifBlock                        shift and go to state 41
    whileBlock                     shift and go to state 42
    print                          shift and go to state 43
    read                           shift and go to state 44
    lineComment                    shift and go to state 45
    return                         shift and go to state 46
    idCall                         shift and go to state 47
    assignIncr                     shift and go to state 48
    assignDecr                     shift and go to state 49

state 94

    (32) assignment -> idCall ASSIGN megaExp .

    DOT_COMMA       reduce using rule 32 (assignment -> idCall ASSIGN megaExp .)


state 95

    (33) assignment -> idCall ASSIGN functionCall .
    (71) factor -> functionCall .

  ! reduce/reduce conflict for DOT_COMMA resolved using rule 33 (assignment -> idCall ASSIGN functionCall .)
    DOT_COMMA       reduce using rule 33 (assignment -> idCall ASSIGN functionCall .)
    TIMES           reduce using rule 71 (factor -> functionCall .)
    DIVIDE          reduce using rule 71 (factor -> functionCall .)
    MOD             reduce using rule 71 (factor -> functionCall .)
    PLUS            reduce using rule 71 (factor -> functionCall .)
    MINUS           reduce using rule 71 (factor -> functionCall .)
    MORE_THAN       reduce using rule 71 (factor -> functionCall .)
    LESS_THAN       reduce using rule 71 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 71 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 71 (factor -> functionCall .)
    EQUAL           reduce using rule 71 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 71 (factor -> functionCall .)
    AND             reduce using rule 71 (factor -> functionCall .)
    OR              reduce using rule 71 (factor -> functionCall .)

  ! DOT_COMMA       [ reduce using rule 71 (factor -> functionCall .) ]


state 96

    (38) functionCall -> ID L_PAR functionCallParams . R_PAR

    R_PAR           shift and go to state 126


state 97

    (40) functionCallParams -> functionCallParamsOptional .

    R_PAR           reduce using rule 40 (functionCallParams -> functionCallParamsOptional .)


state 98

    (41) functionCallParamsOptional -> megaExp . COMMA functionCallParamsOptional
    (42) functionCallParamsOptional -> megaExp .

    COMMA           shift and go to state 127
    R_PAR           reduce using rule 42 (functionCallParamsOptional -> megaExp .)


state 99

    (73) idCall -> ID L_KEY exp . R_KEY

    R_KEY           shift and go to state 128


state 100

    (43) ifBlock -> IF L_PAR megaExp . R_PAR body optionalElse

    R_PAR           shift and go to state 129


state 101

    (46) whileBlock -> WHILE L_PAR megaExp . R_PAR body

    R_PAR           shift and go to state 130


state 102

    (74) print -> PRINT L_PAR print_help . R_PAR

    R_PAR           shift and go to state 131


state 103

    (76) print_help -> ALPHANUMERIC .
    (66) factor -> ALPHANUMERIC .

  ! reduce/reduce conflict for R_PAR resolved using rule 66 (factor -> ALPHANUMERIC .)
    TIMES           reduce using rule 66 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 66 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 66 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 66 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 66 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 66 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 66 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 66 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 66 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 66 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 66 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 66 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 66 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 66 (factor -> ALPHANUMERIC .)

  ! R_PAR           [ reduce using rule 76 (print_help -> ALPHANUMERIC .) ]


state 104

    (77) print_help -> idCall .
    (69) factor -> idCall .

  ! reduce/reduce conflict for R_PAR resolved using rule 69 (factor -> idCall .)
    TIMES           reduce using rule 69 (factor -> idCall .)
    DIVIDE          reduce using rule 69 (factor -> idCall .)
    MOD             reduce using rule 69 (factor -> idCall .)
    PLUS            reduce using rule 69 (factor -> idCall .)
    MINUS           reduce using rule 69 (factor -> idCall .)
    MORE_THAN       reduce using rule 69 (factor -> idCall .)
    LESS_THAN       reduce using rule 69 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 69 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 69 (factor -> idCall .)
    EQUAL           reduce using rule 69 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 69 (factor -> idCall .)
    AND             reduce using rule 69 (factor -> idCall .)
    OR              reduce using rule 69 (factor -> idCall .)
    R_PAR           reduce using rule 69 (factor -> idCall .)

  ! R_PAR           [ reduce using rule 77 (print_help -> idCall .) ]


state 105

    (78) print_help -> functionCall .
    (71) factor -> functionCall .

  ! reduce/reduce conflict for R_PAR resolved using rule 71 (factor -> functionCall .)
    TIMES           reduce using rule 71 (factor -> functionCall .)
    DIVIDE          reduce using rule 71 (factor -> functionCall .)
    MOD             reduce using rule 71 (factor -> functionCall .)
    PLUS            reduce using rule 71 (factor -> functionCall .)
    MINUS           reduce using rule 71 (factor -> functionCall .)
    MORE_THAN       reduce using rule 71 (factor -> functionCall .)
    LESS_THAN       reduce using rule 71 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 71 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 71 (factor -> functionCall .)
    EQUAL           reduce using rule 71 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 71 (factor -> functionCall .)
    AND             reduce using rule 71 (factor -> functionCall .)
    OR              reduce using rule 71 (factor -> functionCall .)
    R_PAR           reduce using rule 71 (factor -> functionCall .)

  ! R_PAR           [ reduce using rule 78 (print_help -> functionCall .) ]


state 106

    (79) print_help -> megaExp .

    R_PAR           reduce using rule 79 (print_help -> megaExp .)


state 107

    (80) read -> READ L_PAR idCall . R_PAR

    R_PAR           shift and go to state 132


state 108

    (72) idCall -> ID .
    (73) idCall -> ID . L_KEY exp R_KEY

    R_PAR           reduce using rule 72 (idCall -> ID .)
    L_KEY           shift and go to state 71


state 109

    (81) lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .

    ID              reduce using rule 81 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    IF              reduce using rule 81 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    WHILE           reduce using rule 81 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    PRINT           reduce using rule 81 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    READ            reduce using rule 81 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    COMMENT_LINE    reduce using rule 81 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    RETURN          reduce using rule 81 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    R_BRACK         reduce using rule 81 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)


state 110

    (48) megaExp -> superExp AND . superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    superExp                       shift and go to state 133
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 111

    (49) megaExp -> superExp OR . superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    superExp                       shift and go to state 134
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 112

    (51) superExp -> exp MORE_THAN . exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    exp                            shift and go to state 135
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 113

    (52) superExp -> exp LESS_THAN . exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    exp                            shift and go to state 136
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 114

    (53) superExp -> exp MORE_EQUAL . exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    exp                            shift and go to state 137
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 115

    (54) superExp -> exp LESS_EQUAL . exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    exp                            shift and go to state 138
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 116

    (55) superExp -> exp EQUAL . exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    exp                            shift and go to state 139
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 117

    (56) superExp -> exp NOT_EQUAL . exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    exp                            shift and go to state 140
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 118

    (58) exp -> term PLUS . exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    term                           shift and go to state 80
    exp                            shift and go to state 141
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 119

    (59) exp -> term MINUS . exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    term                           shift and go to state 80
    exp                            shift and go to state 142
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 120

    (61) term -> factor TIMES . term
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    factor                         shift and go to state 81
    term                           shift and go to state 143
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 121

    (62) term -> factor DIVIDE . term
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    factor                         shift and go to state 81
    term                           shift and go to state 144
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 122

    (63) term -> factor MOD . term
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    factor                         shift and go to state 81
    term                           shift and go to state 145
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 123

    (70) factor -> L_PAR megaExp . R_PAR

    R_PAR           shift and go to state 146


state 124

    (12) functionsHelp2 -> type ID .
    (13) functionsHelp2 -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 12 (functionsHelp2 -> type ID .)
    COMMA           shift and go to state 147


state 125

    (8) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements . R_BRACK

    R_BRACK         shift and go to state 148


state 126

    (38) functionCall -> ID L_PAR functionCallParams R_PAR .

    DOT_COMMA       reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    TIMES           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    DIVIDE          reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MOD             reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    PLUS            reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MINUS           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_THAN       reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_THAN       reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_EQUAL      reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_EQUAL      reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    EQUAL           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    NOT_EQUAL       reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    AND             reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    OR              reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    COMMA           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_PAR           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_KEY           reduce using rule 38 (functionCall -> ID L_PAR functionCallParams R_PAR .)


state 127

    (41) functionCallParamsOptional -> megaExp COMMA . functionCallParamsOptional
    (41) functionCallParamsOptional -> . megaExp COMMA functionCallParamsOptional
    (42) functionCallParamsOptional -> . megaExp
    (47) megaExp -> . superExp
    (48) megaExp -> . superExp AND superExp
    (49) megaExp -> . superExp OR superExp
    (50) superExp -> . exp
    (51) superExp -> . exp MORE_THAN exp
    (52) superExp -> . exp LESS_THAN exp
    (53) superExp -> . exp MORE_EQUAL exp
    (54) superExp -> . exp LESS_EQUAL exp
    (55) superExp -> . exp EQUAL exp
    (56) superExp -> . exp NOT_EQUAL exp
    (57) exp -> . term
    (58) exp -> . term PLUS exp
    (59) exp -> . term MINUS exp
    (60) term -> . factor
    (61) term -> . factor TIMES term
    (62) term -> . factor DIVIDE term
    (63) term -> . factor MOD term
    (64) factor -> . INTEGER
    (65) factor -> . DECIMAL
    (66) factor -> . ALPHANUMERIC
    (67) factor -> . CHARACTER
    (68) factor -> . BOOLEAN
    (69) factor -> . idCall
    (70) factor -> . L_PAR megaExp R_PAR
    (71) factor -> . functionCall
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR

    INTEGER         shift and go to state 82
    DECIMAL         shift and go to state 83
    ALPHANUMERIC    shift and go to state 84
    CHARACTER       shift and go to state 85
    BOOLEAN         shift and go to state 86
    L_PAR           shift and go to state 88
    ID              shift and go to state 90

    megaExp                        shift and go to state 98
    functionCallParamsOptional     shift and go to state 149
    superExp                       shift and go to state 78
    exp                            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 81
    idCall                         shift and go to state 87
    functionCall                   shift and go to state 89

state 128

    (73) idCall -> ID L_KEY exp R_KEY .

    ASSIGN          reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    INCREMENT       reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    DECREMENT       reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    TIMES           reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    DIVIDE          reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    MOD             reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    PLUS            reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    MINUS           reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    MORE_THAN       reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    LESS_THAN       reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    MORE_EQUAL      reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    LESS_EQUAL      reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    EQUAL           reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    NOT_EQUAL       reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    AND             reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    OR              reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    DOT_COMMA       reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    COMMA           reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    R_PAR           reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)
    R_KEY           reduce using rule 73 (idCall -> ID L_KEY exp R_KEY .)


state 129

    (43) ifBlock -> IF L_PAR megaExp R_PAR . body optionalElse
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 151

    body                           shift and go to state 150

state 130

    (46) whileBlock -> WHILE L_PAR megaExp R_PAR . body
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 151

    body                           shift and go to state 152

state 131

    (74) print -> PRINT L_PAR print_help R_PAR .

    DOT_COMMA       reduce using rule 74 (print -> PRINT L_PAR print_help R_PAR .)


state 132

    (80) read -> READ L_PAR idCall R_PAR .

    DOT_COMMA       reduce using rule 80 (read -> READ L_PAR idCall R_PAR .)


state 133

    (48) megaExp -> superExp AND superExp .

    DOT_COMMA       reduce using rule 48 (megaExp -> superExp AND superExp .)
    COMMA           reduce using rule 48 (megaExp -> superExp AND superExp .)
    R_PAR           reduce using rule 48 (megaExp -> superExp AND superExp .)


state 134

    (49) megaExp -> superExp OR superExp .

    DOT_COMMA       reduce using rule 49 (megaExp -> superExp OR superExp .)
    COMMA           reduce using rule 49 (megaExp -> superExp OR superExp .)
    R_PAR           reduce using rule 49 (megaExp -> superExp OR superExp .)


state 135

    (51) superExp -> exp MORE_THAN exp .

    AND             reduce using rule 51 (superExp -> exp MORE_THAN exp .)
    OR              reduce using rule 51 (superExp -> exp MORE_THAN exp .)
    DOT_COMMA       reduce using rule 51 (superExp -> exp MORE_THAN exp .)
    COMMA           reduce using rule 51 (superExp -> exp MORE_THAN exp .)
    R_PAR           reduce using rule 51 (superExp -> exp MORE_THAN exp .)


state 136

    (52) superExp -> exp LESS_THAN exp .

    AND             reduce using rule 52 (superExp -> exp LESS_THAN exp .)
    OR              reduce using rule 52 (superExp -> exp LESS_THAN exp .)
    DOT_COMMA       reduce using rule 52 (superExp -> exp LESS_THAN exp .)
    COMMA           reduce using rule 52 (superExp -> exp LESS_THAN exp .)
    R_PAR           reduce using rule 52 (superExp -> exp LESS_THAN exp .)


state 137

    (53) superExp -> exp MORE_EQUAL exp .

    AND             reduce using rule 53 (superExp -> exp MORE_EQUAL exp .)
    OR              reduce using rule 53 (superExp -> exp MORE_EQUAL exp .)
    DOT_COMMA       reduce using rule 53 (superExp -> exp MORE_EQUAL exp .)
    COMMA           reduce using rule 53 (superExp -> exp MORE_EQUAL exp .)
    R_PAR           reduce using rule 53 (superExp -> exp MORE_EQUAL exp .)


state 138

    (54) superExp -> exp LESS_EQUAL exp .

    AND             reduce using rule 54 (superExp -> exp LESS_EQUAL exp .)
    OR              reduce using rule 54 (superExp -> exp LESS_EQUAL exp .)
    DOT_COMMA       reduce using rule 54 (superExp -> exp LESS_EQUAL exp .)
    COMMA           reduce using rule 54 (superExp -> exp LESS_EQUAL exp .)
    R_PAR           reduce using rule 54 (superExp -> exp LESS_EQUAL exp .)


state 139

    (55) superExp -> exp EQUAL exp .

    AND             reduce using rule 55 (superExp -> exp EQUAL exp .)
    OR              reduce using rule 55 (superExp -> exp EQUAL exp .)
    DOT_COMMA       reduce using rule 55 (superExp -> exp EQUAL exp .)
    COMMA           reduce using rule 55 (superExp -> exp EQUAL exp .)
    R_PAR           reduce using rule 55 (superExp -> exp EQUAL exp .)


state 140

    (56) superExp -> exp NOT_EQUAL exp .

    AND             reduce using rule 56 (superExp -> exp NOT_EQUAL exp .)
    OR              reduce using rule 56 (superExp -> exp NOT_EQUAL exp .)
    DOT_COMMA       reduce using rule 56 (superExp -> exp NOT_EQUAL exp .)
    COMMA           reduce using rule 56 (superExp -> exp NOT_EQUAL exp .)
    R_PAR           reduce using rule 56 (superExp -> exp NOT_EQUAL exp .)


state 141

    (58) exp -> term PLUS exp .

    MORE_THAN       reduce using rule 58 (exp -> term PLUS exp .)
    LESS_THAN       reduce using rule 58 (exp -> term PLUS exp .)
    MORE_EQUAL      reduce using rule 58 (exp -> term PLUS exp .)
    LESS_EQUAL      reduce using rule 58 (exp -> term PLUS exp .)
    EQUAL           reduce using rule 58 (exp -> term PLUS exp .)
    NOT_EQUAL       reduce using rule 58 (exp -> term PLUS exp .)
    AND             reduce using rule 58 (exp -> term PLUS exp .)
    OR              reduce using rule 58 (exp -> term PLUS exp .)
    DOT_COMMA       reduce using rule 58 (exp -> term PLUS exp .)
    COMMA           reduce using rule 58 (exp -> term PLUS exp .)
    R_PAR           reduce using rule 58 (exp -> term PLUS exp .)
    R_KEY           reduce using rule 58 (exp -> term PLUS exp .)


state 142

    (59) exp -> term MINUS exp .

    MORE_THAN       reduce using rule 59 (exp -> term MINUS exp .)
    LESS_THAN       reduce using rule 59 (exp -> term MINUS exp .)
    MORE_EQUAL      reduce using rule 59 (exp -> term MINUS exp .)
    LESS_EQUAL      reduce using rule 59 (exp -> term MINUS exp .)
    EQUAL           reduce using rule 59 (exp -> term MINUS exp .)
    NOT_EQUAL       reduce using rule 59 (exp -> term MINUS exp .)
    AND             reduce using rule 59 (exp -> term MINUS exp .)
    OR              reduce using rule 59 (exp -> term MINUS exp .)
    DOT_COMMA       reduce using rule 59 (exp -> term MINUS exp .)
    COMMA           reduce using rule 59 (exp -> term MINUS exp .)
    R_PAR           reduce using rule 59 (exp -> term MINUS exp .)
    R_KEY           reduce using rule 59 (exp -> term MINUS exp .)


state 143

    (61) term -> factor TIMES term .

    PLUS            reduce using rule 61 (term -> factor TIMES term .)
    MINUS           reduce using rule 61 (term -> factor TIMES term .)
    MORE_THAN       reduce using rule 61 (term -> factor TIMES term .)
    LESS_THAN       reduce using rule 61 (term -> factor TIMES term .)
    MORE_EQUAL      reduce using rule 61 (term -> factor TIMES term .)
    LESS_EQUAL      reduce using rule 61 (term -> factor TIMES term .)
    EQUAL           reduce using rule 61 (term -> factor TIMES term .)
    NOT_EQUAL       reduce using rule 61 (term -> factor TIMES term .)
    AND             reduce using rule 61 (term -> factor TIMES term .)
    OR              reduce using rule 61 (term -> factor TIMES term .)
    DOT_COMMA       reduce using rule 61 (term -> factor TIMES term .)
    COMMA           reduce using rule 61 (term -> factor TIMES term .)
    R_PAR           reduce using rule 61 (term -> factor TIMES term .)
    R_KEY           reduce using rule 61 (term -> factor TIMES term .)


state 144

    (62) term -> factor DIVIDE term .

    PLUS            reduce using rule 62 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 62 (term -> factor DIVIDE term .)
    MORE_THAN       reduce using rule 62 (term -> factor DIVIDE term .)
    LESS_THAN       reduce using rule 62 (term -> factor DIVIDE term .)
    MORE_EQUAL      reduce using rule 62 (term -> factor DIVIDE term .)
    LESS_EQUAL      reduce using rule 62 (term -> factor DIVIDE term .)
    EQUAL           reduce using rule 62 (term -> factor DIVIDE term .)
    NOT_EQUAL       reduce using rule 62 (term -> factor DIVIDE term .)
    AND             reduce using rule 62 (term -> factor DIVIDE term .)
    OR              reduce using rule 62 (term -> factor DIVIDE term .)
    DOT_COMMA       reduce using rule 62 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 62 (term -> factor DIVIDE term .)
    R_PAR           reduce using rule 62 (term -> factor DIVIDE term .)
    R_KEY           reduce using rule 62 (term -> factor DIVIDE term .)


state 145

    (63) term -> factor MOD term .

    PLUS            reduce using rule 63 (term -> factor MOD term .)
    MINUS           reduce using rule 63 (term -> factor MOD term .)
    MORE_THAN       reduce using rule 63 (term -> factor MOD term .)
    LESS_THAN       reduce using rule 63 (term -> factor MOD term .)
    MORE_EQUAL      reduce using rule 63 (term -> factor MOD term .)
    LESS_EQUAL      reduce using rule 63 (term -> factor MOD term .)
    EQUAL           reduce using rule 63 (term -> factor MOD term .)
    NOT_EQUAL       reduce using rule 63 (term -> factor MOD term .)
    AND             reduce using rule 63 (term -> factor MOD term .)
    OR              reduce using rule 63 (term -> factor MOD term .)
    DOT_COMMA       reduce using rule 63 (term -> factor MOD term .)
    COMMA           reduce using rule 63 (term -> factor MOD term .)
    R_PAR           reduce using rule 63 (term -> factor MOD term .)
    R_KEY           reduce using rule 63 (term -> factor MOD term .)


state 146

    (70) factor -> L_PAR megaExp R_PAR .

    TIMES           reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    DIVIDE          reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    MOD             reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    PLUS            reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    MINUS           reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    MORE_THAN       reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    LESS_THAN       reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    MORE_EQUAL      reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    LESS_EQUAL      reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    EQUAL           reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    NOT_EQUAL       reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    AND             reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    OR              reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    DOT_COMMA       reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    COMMA           reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    R_PAR           reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)
    R_KEY           reduce using rule 70 (factor -> L_PAR megaExp R_PAR .)


state 147

    (13) functionsHelp2 -> type ID COMMA . functionsHelp2
    (12) functionsHelp2 -> . type ID
    (13) functionsHelp2 -> . type ID COMMA functionsHelp2
    (14) type -> . INT
    (15) type -> . DECIM
    (16) type -> . BOOL
    (17) type -> . CHAR
    (18) type -> . STRING
    (19) type -> . VOID

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    type                           shift and go to state 91
    functionsHelp2                 shift and go to state 153

state 148

    (8) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK .

    MAIN            reduce using rule 8 (functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK .)


state 149

    (41) functionCallParamsOptional -> megaExp COMMA functionCallParamsOptional .

    R_PAR           reduce using rule 41 (functionCallParamsOptional -> megaExp COMMA functionCallParamsOptional .)


state 150

    (43) ifBlock -> IF L_PAR megaExp R_PAR body . optionalElse
    (44) optionalElse -> .
    (45) optionalElse -> . ELSE body

    ID              reduce using rule 44 (optionalElse -> .)
    IF              reduce using rule 44 (optionalElse -> .)
    WHILE           reduce using rule 44 (optionalElse -> .)
    PRINT           reduce using rule 44 (optionalElse -> .)
    READ            reduce using rule 44 (optionalElse -> .)
    COMMENT_LINE    reduce using rule 44 (optionalElse -> .)
    RETURN          reduce using rule 44 (optionalElse -> .)
    R_BRACK         reduce using rule 44 (optionalElse -> .)
    ELSE            shift and go to state 155

    optionalElse                   shift and go to state 154

state 151

    (3) body -> L_BRACK . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . print DOT_COMMA
    (28) statement -> . read DOT_COMMA
    (29) statement -> . lineComment
    (30) statement -> . return DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . assignIncr
    (35) assignment -> . assignDecr
    (38) functionCall -> . ID L_PAR functionCallParams R_PAR
    (43) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (46) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (74) print -> . PRINT L_PAR print_help R_PAR
    (80) read -> . READ L_PAR idCall R_PAR
    (81) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (31) return -> . RETURN megaExp
    (72) idCall -> . ID
    (73) idCall -> . ID L_KEY exp R_KEY
    (36) assignIncr -> . idCall INCREMENT
    (37) assignDecr -> . idCall DECREMENT

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    PRINT           shift and go to state 53
    READ            shift and go to state 54
    COMMENT_LINE    shift and go to state 55
    RETURN          shift and go to state 56

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! RETURN          [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 156
    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    functionCall                   shift and go to state 40
    ifBlock                        shift and go to state 41
    whileBlock                     shift and go to state 42
    print                          shift and go to state 43
    read                           shift and go to state 44
    lineComment                    shift and go to state 45
    return                         shift and go to state 46
    idCall                         shift and go to state 47
    assignIncr                     shift and go to state 48
    assignDecr                     shift and go to state 49

state 152

    (46) whileBlock -> WHILE L_PAR megaExp R_PAR body .

    ID              reduce using rule 46 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    IF              reduce using rule 46 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    WHILE           reduce using rule 46 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    PRINT           reduce using rule 46 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    READ            reduce using rule 46 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    COMMENT_LINE    reduce using rule 46 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    RETURN          reduce using rule 46 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    R_BRACK         reduce using rule 46 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)


state 153

    (13) functionsHelp2 -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 13 (functionsHelp2 -> type ID COMMA functionsHelp2 .)


state 154

    (43) ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .

    ID              reduce using rule 43 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    IF              reduce using rule 43 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    WHILE           reduce using rule 43 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    PRINT           reduce using rule 43 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    READ            reduce using rule 43 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    COMMENT_LINE    reduce using rule 43 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    RETURN          reduce using rule 43 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    R_BRACK         reduce using rule 43 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)


state 155

    (45) optionalElse -> ELSE . body
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 151

    body                           shift and go to state 157

state 156

    (3) body -> L_BRACK statements . R_BRACK

    R_BRACK         shift and go to state 158


state 157

    (45) optionalElse -> ELSE body .

    ID              reduce using rule 45 (optionalElse -> ELSE body .)
    IF              reduce using rule 45 (optionalElse -> ELSE body .)
    WHILE           reduce using rule 45 (optionalElse -> ELSE body .)
    PRINT           reduce using rule 45 (optionalElse -> ELSE body .)
    READ            reduce using rule 45 (optionalElse -> ELSE body .)
    COMMENT_LINE    reduce using rule 45 (optionalElse -> ELSE body .)
    RETURN          reduce using rule 45 (optionalElse -> ELSE body .)
    R_BRACK         reduce using rule 45 (optionalElse -> ELSE body .)


state 158

    (3) body -> L_BRACK statements R_BRACK .

    ELSE            reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    ID              reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    IF              reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    WHILE           reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    PRINT           reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    READ            reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    COMMENT_LINE    reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    RETURN          reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    R_BRACK         reduce using rule 3 (body -> L_BRACK statements R_BRACK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 33 resolved as shift
WARNING: shift/reduce conflict for IF in state 33 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 33 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 33 resolved as shift
WARNING: shift/reduce conflict for READ in state 33 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 33 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 33 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 38 resolved as shift
WARNING: shift/reduce conflict for READ in state 38 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 38 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 93 resolved as shift
WARNING: shift/reduce conflict for READ in state 93 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 93 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for IF in state 151 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 151 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 151 resolved as shift
WARNING: shift/reduce conflict for READ in state 151 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 151 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 151 resolved as shift
WARNING: reduce/reduce conflict in state 33 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 33
WARNING: reduce/reduce conflict in state 38 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 38
WARNING: reduce/reduce conflict in state 93 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 93
WARNING: reduce/reduce conflict in state 95 resolved using rule (assignment -> idCall ASSIGN functionCall)
WARNING: rejected rule (factor -> functionCall) in state 95
WARNING: reduce/reduce conflict in state 103 resolved using rule (factor -> ALPHANUMERIC)
WARNING: rejected rule (print_help -> ALPHANUMERIC) in state 103
WARNING: reduce/reduce conflict in state 104 resolved using rule (factor -> idCall)
WARNING: rejected rule (print_help -> idCall) in state 104
WARNING: reduce/reduce conflict in state 105 resolved using rule (factor -> functionCall)
WARNING: rejected rule (print_help -> functionCall) in state 105
WARNING: reduce/reduce conflict in state 151 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 151
WARNING: Rule (statement -> <empty>) is never reduced
WARNING: Rule (print_help -> ALPHANUMERIC) is never reduced
WARNING: Rule (print_help -> idCall) is never reduced
WARNING: Rule (print_help -> functionCall) is never reduced
