Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK
Rule 2     mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK
Rule 3     body -> L_BRACK statements R_BRACK
Rule 4     variables -> <empty>
Rule 5     variables -> VAR type ID DOT_COMMA variables
Rule 6     variables -> VAR type assignment DOT_COMMA variables
Rule 7     arrays -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
Rule 8     functions -> <empty>
Rule 9     functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
Rule 10    functionsHelp -> <empty>
Rule 11    functionsHelp -> type ID
Rule 12    functionsHelp -> type ID COMMA functionsHelp2
Rule 13    functionsHelp2 -> type ID
Rule 14    functionsHelp2 -> type ID COMMA functionsHelp2
Rule 15    type -> INT
Rule 16    type -> DECIM
Rule 17    type -> BOOL
Rule 18    type -> CHAR
Rule 19    type -> STRING
Rule 20    statements -> <empty>
Rule 21    statements -> statement statements
Rule 22    statement -> <empty>
Rule 23    statement -> assignment DOT_COMMA
Rule 24    statement -> functionCall DOT_COMMA
Rule 25    statement -> ifBlock
Rule 26    statement -> whileBlock
Rule 27    statement -> forBlock
Rule 28    statement -> print DOT_COMMA
Rule 29    statement -> read DOT_COMMA
Rule 30    statement -> lineComment
Rule 31    statement -> arrays DOT_COMMA
Rule 32    assignment -> idCall ASSIGN megaExp
Rule 33    assignment -> idCall ASSIGN functionCall
Rule 34    assignment -> idCall INCREMENT
Rule 35    assignment -> idCall DECREMENT
Rule 36    functionCall -> ID L_PAR functionCallParams R_PAR
Rule 37    functionCallParams -> functionCallParamsOptional
Rule 38    functionCallParamsOptional -> <empty>
Rule 39    functionCallParamsOptional -> megaExp functionCallParamsMultiple
Rule 40    functionCallParamsMultiple -> <empty>
Rule 41    functionCallParamsMultiple -> COMMA functionCallParamsOptional
Rule 42    ifBlock -> IF L_PAR megaExp R_PAR body optionalElse
Rule 43    optionalElse -> <empty>
Rule 44    optionalElse -> ELSE body
Rule 45    whileBlock -> WHILE L_PAR megaExp R_PAR body
Rule 46    forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
Rule 47    optionalAssign -> <empty>
Rule 48    optionalAssign -> assignment
Rule 49    megaExp -> superExp
Rule 50    megaExp -> superExp AND superExp
Rule 51    megaExp -> superExp OR superExp
Rule 52    superExp -> exp
Rule 53    superExp -> exp MORE_THAN exp
Rule 54    superExp -> exp LESS_THAN exp
Rule 55    superExp -> exp MORE_EQUAL exp
Rule 56    superExp -> exp LESS_EQUAL exp
Rule 57    superExp -> exp EQUAL exp
Rule 58    superExp -> exp NOT_EQUAL exp
Rule 59    exp -> term
Rule 60    exp -> term PLUS exp
Rule 61    exp -> term MINUS exp
Rule 62    term -> factor
Rule 63    term -> factor TIMES term
Rule 64    term -> factor DIVIDE term
Rule 65    term -> factor MOD term
Rule 66    factor -> NUMBER
Rule 67    factor -> ALPHANUMERIC
Rule 68    factor -> CHARACTER
Rule 69    factor -> BOOLEAN
Rule 70    factor -> idCall
Rule 71    factor -> L_PAR megaExp R_PAR
Rule 72    factor -> functionCall
Rule 73    idCall -> ID
Rule 74    idCall -> ID L_KEY exp R_KEY
Rule 75    print -> PRINT L_PAR print_help R_PAR
Rule 76    print_help -> <empty>
Rule 77    print_help -> ALPHANUMERIC
Rule 78    print_help -> idCall
Rule 79    print_help -> functionCall
Rule 80    print_help -> megaExp
Rule 81    read -> READ L_PAR idCall R_PAR
Rule 82    lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE

Terminals, with rules where they appear

ALPHANUMERIC         : 67 77 82
AND                  : 50
ASSIGN               : 32 33
BOOL                 : 17
BOOLEAN              : 69
CHAR                 : 18
CHARACTER            : 68
COMMA                : 12 14 41
COMMENT_LINE         : 82
DECIM                : 16
DECREMENT            : 35
DIVIDE               : 64
DOT_COMMA            : 5 6 7 23 24 28 29 31 46 46
ELSE                 : 44
END_LINE             : 82
EQUAL                : 57
FOR                  : 46
FUNCTION             : 9
ID                   : 1 5 7 9 11 12 13 14 36 73 74
IF                   : 42
INCREMENT            : 34
INT                  : 15
LESS_EQUAL           : 56
LESS_THAN            : 54
L_BRACK              : 1 2 3 9
L_KEY                : 7 74
L_PAR                : 2 9 36 42 45 46 71 75 81
MAIN                 : 2
MINUS                : 61
MOD                  : 65
MORE_EQUAL           : 55
MORE_THAN            : 53
NOT_EQUAL            : 58
NUMBER               : 7 66
OR                   : 51
PLUS                 : 60
PRINT                : 75
PROGRAM              : 1
READ                 : 81
R_BRACK              : 1 2 3 9
R_KEY                : 7 74
R_PAR                : 2 9 36 42 45 46 71 75 81
STRING               : 19
TIMES                : 63
VAR                  : 5 6 7
WHILE                : 45
error                : 

Nonterminals, with rules where they appear

arrays               : 31
assignment           : 6 23 46 48
body                 : 42 44 45 46
exp                  : 52 53 53 54 54 55 55 56 56 57 57 58 58 60 61 74
factor               : 62 63 64 65
forBlock             : 27
functionCall         : 24 33 72 79
functionCallParams   : 36
functionCallParamsMultiple : 39
functionCallParamsOptional : 37 41
functions            : 1
functionsHelp        : 9
functionsHelp2       : 12 14
idCall               : 32 33 34 35 70 78 81
ifBlock              : 25
lineComment          : 30
mainBody             : 1
megaExp              : 32 39 42 45 46 71 80
optionalAssign       : 46
optionalElse         : 42
print                : 28
print_help           : 75
program              : 0
read                 : 29
statement            : 21
statements           : 2 3 9 21
superExp             : 49 50 50 51 51
term                 : 59 60 61 63 64 65
type                 : 5 6 7 9 11 12 13 14
variables            : 1 2 5 6 9
whileBlock           : 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID L_BRACK variables functions mainBody R_BRACK

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID L_BRACK variables functions mainBody R_BRACK

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . L_BRACK variables functions mainBody R_BRACK

    L_BRACK         shift and go to state 4


state 4

    (1) program -> PROGRAM ID L_BRACK . variables functions mainBody R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables

    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

    variables                      shift and go to state 5

state 5

    (1) program -> PROGRAM ID L_BRACK variables . functions mainBody R_BRACK
    (8) functions -> .
    (9) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    MAIN            reduce using rule 8 (functions -> .)
    FUNCTION        shift and go to state 8

    functions                      shift and go to state 7

state 6

    (5) variables -> VAR . type ID DOT_COMMA variables
    (6) variables -> VAR . type assignment DOT_COMMA variables
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 9

state 7

    (1) program -> PROGRAM ID L_BRACK variables functions . mainBody R_BRACK
    (2) mainBody -> . MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK

    MAIN            shift and go to state 16

    mainBody                       shift and go to state 15

state 8

    (9) functions -> FUNCTION . type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 17

state 9

    (5) variables -> VAR type . ID DOT_COMMA variables
    (6) variables -> VAR type . assignment DOT_COMMA variables
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . idCall INCREMENT
    (35) assignment -> . idCall DECREMENT
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 18

    assignment                     shift and go to state 19
    idCall                         shift and go to state 20

state 10

    (15) type -> INT .

    ID              reduce using rule 15 (type -> INT .)


state 11

    (16) type -> DECIM .

    ID              reduce using rule 16 (type -> DECIM .)


state 12

    (17) type -> BOOL .

    ID              reduce using rule 17 (type -> BOOL .)


state 13

    (18) type -> CHAR .

    ID              reduce using rule 18 (type -> CHAR .)


state 14

    (19) type -> STRING .

    ID              reduce using rule 19 (type -> STRING .)


state 15

    (1) program -> PROGRAM ID L_BRACK variables functions mainBody . R_BRACK

    R_BRACK         shift and go to state 21


state 16

    (2) mainBody -> MAIN . L_PAR R_PAR L_BRACK variables statements R_BRACK

    L_PAR           shift and go to state 22


state 17

    (9) functions -> FUNCTION type . ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    ID              shift and go to state 23


state 18

    (5) variables -> VAR type ID . DOT_COMMA variables
    (73) idCall -> ID .
    (74) idCall -> ID . L_KEY exp R_KEY

    DOT_COMMA       shift and go to state 24
    ASSIGN          reduce using rule 73 (idCall -> ID .)
    INCREMENT       reduce using rule 73 (idCall -> ID .)
    DECREMENT       reduce using rule 73 (idCall -> ID .)
    L_KEY           shift and go to state 25


state 19

    (6) variables -> VAR type assignment . DOT_COMMA variables

    DOT_COMMA       shift and go to state 26


state 20

    (32) assignment -> idCall . ASSIGN megaExp
    (33) assignment -> idCall . ASSIGN functionCall
    (34) assignment -> idCall . INCREMENT
    (35) assignment -> idCall . DECREMENT

    ASSIGN          shift and go to state 27
    INCREMENT       shift and go to state 28
    DECREMENT       shift and go to state 29


state 21

    (1) program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK .

    $end            reduce using rule 1 (program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK .)


state 22

    (2) mainBody -> MAIN L_PAR . R_PAR L_BRACK variables statements R_BRACK

    R_PAR           shift and go to state 30


state 23

    (9) functions -> FUNCTION type ID . L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK

    L_PAR           shift and go to state 31


state 24

    (5) variables -> VAR type ID DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    FOR             reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

  ! VAR             [ reduce using rule 4 (variables -> .) ]

    variables                      shift and go to state 32

state 25

    (74) idCall -> ID L_KEY . exp R_KEY
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    exp                            shift and go to state 34
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 26

    (6) variables -> VAR type assignment DOT_COMMA . variables
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 4 (variables -> .)
    MAIN            reduce using rule 4 (variables -> .)
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    FOR             reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

  ! VAR             [ reduce using rule 4 (variables -> .) ]

    variables                      shift and go to state 44

state 27

    (32) assignment -> idCall ASSIGN . megaExp
    (33) assignment -> idCall ASSIGN . functionCall
    (49) megaExp -> . superExp
    (50) megaExp -> . superExp AND superExp
    (51) megaExp -> . superExp OR superExp
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 48
    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42

    idCall                         shift and go to state 41
    megaExp                        shift and go to state 45
    functionCall                   shift and go to state 46
    superExp                       shift and go to state 47
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 28

    (34) assignment -> idCall INCREMENT .

    DOT_COMMA       reduce using rule 34 (assignment -> idCall INCREMENT .)
    R_PAR           reduce using rule 34 (assignment -> idCall INCREMENT .)


state 29

    (35) assignment -> idCall DECREMENT .

    DOT_COMMA       reduce using rule 35 (assignment -> idCall DECREMENT .)
    R_PAR           reduce using rule 35 (assignment -> idCall DECREMENT .)


state 30

    (2) mainBody -> MAIN L_PAR R_PAR . L_BRACK variables statements R_BRACK

    L_BRACK         shift and go to state 50


state 31

    (9) functions -> FUNCTION type ID L_PAR . functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (10) functionsHelp -> .
    (11) functionsHelp -> . type ID
    (12) functionsHelp -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    R_PAR           reduce using rule 10 (functionsHelp -> .)
    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 51
    functionsHelp                  shift and go to state 52

state 32

    (5) variables -> VAR type ID DOT_COMMA variables .

    FUNCTION        reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    MAIN            reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    ID              reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    IF              reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    WHILE           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    FOR             reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    PRINT           reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    READ            reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    VAR             reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)
    R_BRACK         reduce using rule 5 (variables -> VAR type ID DOT_COMMA variables .)


state 33

    (73) idCall -> ID .
    (74) idCall -> ID . L_KEY exp R_KEY
    (36) functionCall -> ID . L_PAR functionCallParams R_PAR

    TIMES           reduce using rule 73 (idCall -> ID .)
    DIVIDE          reduce using rule 73 (idCall -> ID .)
    MOD             reduce using rule 73 (idCall -> ID .)
    PLUS            reduce using rule 73 (idCall -> ID .)
    MINUS           reduce using rule 73 (idCall -> ID .)
    R_KEY           reduce using rule 73 (idCall -> ID .)
    MORE_THAN       reduce using rule 73 (idCall -> ID .)
    LESS_THAN       reduce using rule 73 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 73 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 73 (idCall -> ID .)
    EQUAL           reduce using rule 73 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 73 (idCall -> ID .)
    AND             reduce using rule 73 (idCall -> ID .)
    OR              reduce using rule 73 (idCall -> ID .)
    R_PAR           reduce using rule 73 (idCall -> ID .)
    COMMA           reduce using rule 73 (idCall -> ID .)
    DOT_COMMA       reduce using rule 73 (idCall -> ID .)
    L_KEY           shift and go to state 25
    L_PAR           shift and go to state 53


state 34

    (74) idCall -> ID L_KEY exp . R_KEY

    R_KEY           shift and go to state 54


state 35

    (59) exp -> term .
    (60) exp -> term . PLUS exp
    (61) exp -> term . MINUS exp

    R_KEY           reduce using rule 59 (exp -> term .)
    MORE_THAN       reduce using rule 59 (exp -> term .)
    LESS_THAN       reduce using rule 59 (exp -> term .)
    MORE_EQUAL      reduce using rule 59 (exp -> term .)
    LESS_EQUAL      reduce using rule 59 (exp -> term .)
    EQUAL           reduce using rule 59 (exp -> term .)
    NOT_EQUAL       reduce using rule 59 (exp -> term .)
    AND             reduce using rule 59 (exp -> term .)
    OR              reduce using rule 59 (exp -> term .)
    DOT_COMMA       reduce using rule 59 (exp -> term .)
    R_PAR           reduce using rule 59 (exp -> term .)
    COMMA           reduce using rule 59 (exp -> term .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 36

    (62) term -> factor .
    (63) term -> factor . TIMES term
    (64) term -> factor . DIVIDE term
    (65) term -> factor . MOD term

    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    R_KEY           reduce using rule 62 (term -> factor .)
    MORE_THAN       reduce using rule 62 (term -> factor .)
    LESS_THAN       reduce using rule 62 (term -> factor .)
    MORE_EQUAL      reduce using rule 62 (term -> factor .)
    LESS_EQUAL      reduce using rule 62 (term -> factor .)
    EQUAL           reduce using rule 62 (term -> factor .)
    NOT_EQUAL       reduce using rule 62 (term -> factor .)
    AND             reduce using rule 62 (term -> factor .)
    OR              reduce using rule 62 (term -> factor .)
    DOT_COMMA       reduce using rule 62 (term -> factor .)
    R_PAR           reduce using rule 62 (term -> factor .)
    COMMA           reduce using rule 62 (term -> factor .)
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MOD             shift and go to state 59


state 37

    (66) factor -> NUMBER .

    TIMES           reduce using rule 66 (factor -> NUMBER .)
    DIVIDE          reduce using rule 66 (factor -> NUMBER .)
    MOD             reduce using rule 66 (factor -> NUMBER .)
    PLUS            reduce using rule 66 (factor -> NUMBER .)
    MINUS           reduce using rule 66 (factor -> NUMBER .)
    R_KEY           reduce using rule 66 (factor -> NUMBER .)
    MORE_THAN       reduce using rule 66 (factor -> NUMBER .)
    LESS_THAN       reduce using rule 66 (factor -> NUMBER .)
    MORE_EQUAL      reduce using rule 66 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 66 (factor -> NUMBER .)
    EQUAL           reduce using rule 66 (factor -> NUMBER .)
    NOT_EQUAL       reduce using rule 66 (factor -> NUMBER .)
    AND             reduce using rule 66 (factor -> NUMBER .)
    OR              reduce using rule 66 (factor -> NUMBER .)
    DOT_COMMA       reduce using rule 66 (factor -> NUMBER .)
    R_PAR           reduce using rule 66 (factor -> NUMBER .)
    COMMA           reduce using rule 66 (factor -> NUMBER .)


state 38

    (67) factor -> ALPHANUMERIC .

    TIMES           reduce using rule 67 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 67 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 67 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 67 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_KEY           reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 67 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 67 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 67 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 67 (factor -> ALPHANUMERIC .)
    DOT_COMMA       reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 67 (factor -> ALPHANUMERIC .)
    COMMA           reduce using rule 67 (factor -> ALPHANUMERIC .)


state 39

    (68) factor -> CHARACTER .

    TIMES           reduce using rule 68 (factor -> CHARACTER .)
    DIVIDE          reduce using rule 68 (factor -> CHARACTER .)
    MOD             reduce using rule 68 (factor -> CHARACTER .)
    PLUS            reduce using rule 68 (factor -> CHARACTER .)
    MINUS           reduce using rule 68 (factor -> CHARACTER .)
    R_KEY           reduce using rule 68 (factor -> CHARACTER .)
    MORE_THAN       reduce using rule 68 (factor -> CHARACTER .)
    LESS_THAN       reduce using rule 68 (factor -> CHARACTER .)
    MORE_EQUAL      reduce using rule 68 (factor -> CHARACTER .)
    LESS_EQUAL      reduce using rule 68 (factor -> CHARACTER .)
    EQUAL           reduce using rule 68 (factor -> CHARACTER .)
    NOT_EQUAL       reduce using rule 68 (factor -> CHARACTER .)
    AND             reduce using rule 68 (factor -> CHARACTER .)
    OR              reduce using rule 68 (factor -> CHARACTER .)
    DOT_COMMA       reduce using rule 68 (factor -> CHARACTER .)
    R_PAR           reduce using rule 68 (factor -> CHARACTER .)
    COMMA           reduce using rule 68 (factor -> CHARACTER .)


state 40

    (69) factor -> BOOLEAN .

    TIMES           reduce using rule 69 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 69 (factor -> BOOLEAN .)
    MOD             reduce using rule 69 (factor -> BOOLEAN .)
    PLUS            reduce using rule 69 (factor -> BOOLEAN .)
    MINUS           reduce using rule 69 (factor -> BOOLEAN .)
    R_KEY           reduce using rule 69 (factor -> BOOLEAN .)
    MORE_THAN       reduce using rule 69 (factor -> BOOLEAN .)
    LESS_THAN       reduce using rule 69 (factor -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 69 (factor -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 69 (factor -> BOOLEAN .)
    EQUAL           reduce using rule 69 (factor -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 69 (factor -> BOOLEAN .)
    AND             reduce using rule 69 (factor -> BOOLEAN .)
    OR              reduce using rule 69 (factor -> BOOLEAN .)
    DOT_COMMA       reduce using rule 69 (factor -> BOOLEAN .)
    R_PAR           reduce using rule 69 (factor -> BOOLEAN .)
    COMMA           reduce using rule 69 (factor -> BOOLEAN .)


state 41

    (70) factor -> idCall .

    TIMES           reduce using rule 70 (factor -> idCall .)
    DIVIDE          reduce using rule 70 (factor -> idCall .)
    MOD             reduce using rule 70 (factor -> idCall .)
    PLUS            reduce using rule 70 (factor -> idCall .)
    MINUS           reduce using rule 70 (factor -> idCall .)
    R_KEY           reduce using rule 70 (factor -> idCall .)
    MORE_THAN       reduce using rule 70 (factor -> idCall .)
    LESS_THAN       reduce using rule 70 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 70 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 70 (factor -> idCall .)
    EQUAL           reduce using rule 70 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 70 (factor -> idCall .)
    AND             reduce using rule 70 (factor -> idCall .)
    OR              reduce using rule 70 (factor -> idCall .)
    DOT_COMMA       reduce using rule 70 (factor -> idCall .)
    R_PAR           reduce using rule 70 (factor -> idCall .)
    COMMA           reduce using rule 70 (factor -> idCall .)


state 42

    (71) factor -> L_PAR . megaExp R_PAR
    (49) megaExp -> . superExp
    (50) megaExp -> . superExp AND superExp
    (51) megaExp -> . superExp OR superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    megaExp                        shift and go to state 60
    superExp                       shift and go to state 47
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 43

    (72) factor -> functionCall .

    TIMES           reduce using rule 72 (factor -> functionCall .)
    DIVIDE          reduce using rule 72 (factor -> functionCall .)
    MOD             reduce using rule 72 (factor -> functionCall .)
    PLUS            reduce using rule 72 (factor -> functionCall .)
    MINUS           reduce using rule 72 (factor -> functionCall .)
    R_KEY           reduce using rule 72 (factor -> functionCall .)
    MORE_THAN       reduce using rule 72 (factor -> functionCall .)
    LESS_THAN       reduce using rule 72 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 72 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 72 (factor -> functionCall .)
    EQUAL           reduce using rule 72 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 72 (factor -> functionCall .)
    AND             reduce using rule 72 (factor -> functionCall .)
    OR              reduce using rule 72 (factor -> functionCall .)
    R_PAR           reduce using rule 72 (factor -> functionCall .)
    COMMA           reduce using rule 72 (factor -> functionCall .)
    DOT_COMMA       reduce using rule 72 (factor -> functionCall .)


state 44

    (6) variables -> VAR type assignment DOT_COMMA variables .

    FUNCTION        reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    MAIN            reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    ID              reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    IF              reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    WHILE           reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    FOR             reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    PRINT           reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    READ            reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    VAR             reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)
    R_BRACK         reduce using rule 6 (variables -> VAR type assignment DOT_COMMA variables .)


state 45

    (32) assignment -> idCall ASSIGN megaExp .

    DOT_COMMA       reduce using rule 32 (assignment -> idCall ASSIGN megaExp .)
    R_PAR           reduce using rule 32 (assignment -> idCall ASSIGN megaExp .)


state 46

    (33) assignment -> idCall ASSIGN functionCall .
    (72) factor -> functionCall .

  ! reduce/reduce conflict for DOT_COMMA resolved using rule 33 (assignment -> idCall ASSIGN functionCall .)
  ! reduce/reduce conflict for R_PAR resolved using rule 33 (assignment -> idCall ASSIGN functionCall .)
    DOT_COMMA       reduce using rule 33 (assignment -> idCall ASSIGN functionCall .)
    R_PAR           reduce using rule 33 (assignment -> idCall ASSIGN functionCall .)
    TIMES           reduce using rule 72 (factor -> functionCall .)
    DIVIDE          reduce using rule 72 (factor -> functionCall .)
    MOD             reduce using rule 72 (factor -> functionCall .)
    PLUS            reduce using rule 72 (factor -> functionCall .)
    MINUS           reduce using rule 72 (factor -> functionCall .)
    MORE_THAN       reduce using rule 72 (factor -> functionCall .)
    LESS_THAN       reduce using rule 72 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 72 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 72 (factor -> functionCall .)
    EQUAL           reduce using rule 72 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 72 (factor -> functionCall .)
    AND             reduce using rule 72 (factor -> functionCall .)
    OR              reduce using rule 72 (factor -> functionCall .)

  ! DOT_COMMA       [ reduce using rule 72 (factor -> functionCall .) ]
  ! R_PAR           [ reduce using rule 72 (factor -> functionCall .) ]


state 47

    (49) megaExp -> superExp .
    (50) megaExp -> superExp . AND superExp
    (51) megaExp -> superExp . OR superExp

    DOT_COMMA       reduce using rule 49 (megaExp -> superExp .)
    R_PAR           reduce using rule 49 (megaExp -> superExp .)
    COMMA           reduce using rule 49 (megaExp -> superExp .)
    AND             shift and go to state 61
    OR              shift and go to state 62


state 48

    (36) functionCall -> ID . L_PAR functionCallParams R_PAR
    (73) idCall -> ID .
    (74) idCall -> ID . L_KEY exp R_KEY

    L_PAR           shift and go to state 53
    TIMES           reduce using rule 73 (idCall -> ID .)
    DIVIDE          reduce using rule 73 (idCall -> ID .)
    MOD             reduce using rule 73 (idCall -> ID .)
    PLUS            reduce using rule 73 (idCall -> ID .)
    MINUS           reduce using rule 73 (idCall -> ID .)
    MORE_THAN       reduce using rule 73 (idCall -> ID .)
    LESS_THAN       reduce using rule 73 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 73 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 73 (idCall -> ID .)
    EQUAL           reduce using rule 73 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 73 (idCall -> ID .)
    AND             reduce using rule 73 (idCall -> ID .)
    OR              reduce using rule 73 (idCall -> ID .)
    DOT_COMMA       reduce using rule 73 (idCall -> ID .)
    R_PAR           reduce using rule 73 (idCall -> ID .)
    ASSIGN          reduce using rule 73 (idCall -> ID .)
    INCREMENT       reduce using rule 73 (idCall -> ID .)
    DECREMENT       reduce using rule 73 (idCall -> ID .)
    L_KEY           shift and go to state 25


state 49

    (52) superExp -> exp .
    (53) superExp -> exp . MORE_THAN exp
    (54) superExp -> exp . LESS_THAN exp
    (55) superExp -> exp . MORE_EQUAL exp
    (56) superExp -> exp . LESS_EQUAL exp
    (57) superExp -> exp . EQUAL exp
    (58) superExp -> exp . NOT_EQUAL exp

    AND             reduce using rule 52 (superExp -> exp .)
    OR              reduce using rule 52 (superExp -> exp .)
    DOT_COMMA       reduce using rule 52 (superExp -> exp .)
    R_PAR           reduce using rule 52 (superExp -> exp .)
    COMMA           reduce using rule 52 (superExp -> exp .)
    MORE_THAN       shift and go to state 63
    LESS_THAN       shift and go to state 64
    MORE_EQUAL      shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    EQUAL           shift and go to state 67
    NOT_EQUAL       shift and go to state 68


state 50

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK . variables statements R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables

  ! shift/reduce conflict for VAR resolved as shift
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    FOR             reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

  ! VAR             [ reduce using rule 4 (variables -> .) ]

    variables                      shift and go to state 69

state 51

    (11) functionsHelp -> type . ID
    (12) functionsHelp -> type . ID COMMA functionsHelp2

    ID              shift and go to state 70


state 52

    (9) functions -> FUNCTION type ID L_PAR functionsHelp . R_PAR L_BRACK variables statements R_BRACK

    R_PAR           shift and go to state 71


state 53

    (36) functionCall -> ID L_PAR . functionCallParams R_PAR
    (37) functionCallParams -> . functionCallParamsOptional
    (38) functionCallParamsOptional -> .
    (39) functionCallParamsOptional -> . megaExp functionCallParamsMultiple
    (49) megaExp -> . superExp
    (50) megaExp -> . superExp AND superExp
    (51) megaExp -> . superExp OR superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    R_PAR           reduce using rule 38 (functionCallParamsOptional -> .)
    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    functionCallParams             shift and go to state 72
    functionCallParamsOptional     shift and go to state 73
    megaExp                        shift and go to state 74
    superExp                       shift and go to state 47
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 54

    (74) idCall -> ID L_KEY exp R_KEY .

    ASSIGN          reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    INCREMENT       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    DECREMENT       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    TIMES           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    DIVIDE          reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    MOD             reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    PLUS            reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    MINUS           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    R_KEY           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    MORE_THAN       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    LESS_THAN       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    MORE_EQUAL      reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    LESS_EQUAL      reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    EQUAL           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    NOT_EQUAL       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    AND             reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    OR              reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    DOT_COMMA       reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    R_PAR           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)
    COMMA           reduce using rule 74 (idCall -> ID L_KEY exp R_KEY .)


state 55

    (60) exp -> term PLUS . exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    term                           shift and go to state 35
    exp                            shift and go to state 75
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 56

    (61) exp -> term MINUS . exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    term                           shift and go to state 35
    exp                            shift and go to state 76
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 57

    (63) term -> factor TIMES . term
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    factor                         shift and go to state 36
    term                           shift and go to state 77
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 58

    (64) term -> factor DIVIDE . term
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    factor                         shift and go to state 36
    term                           shift and go to state 78
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 59

    (65) term -> factor MOD . term
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    factor                         shift and go to state 36
    term                           shift and go to state 79
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 60

    (71) factor -> L_PAR megaExp . R_PAR

    R_PAR           shift and go to state 80


state 61

    (50) megaExp -> superExp AND . superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    superExp                       shift and go to state 81
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 62

    (51) megaExp -> superExp OR . superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    superExp                       shift and go to state 82
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 63

    (53) superExp -> exp MORE_THAN . exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    exp                            shift and go to state 83
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 64

    (54) superExp -> exp LESS_THAN . exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    exp                            shift and go to state 84
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 65

    (55) superExp -> exp MORE_EQUAL . exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    exp                            shift and go to state 85
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 66

    (56) superExp -> exp LESS_EQUAL . exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    exp                            shift and go to state 86
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 67

    (57) superExp -> exp EQUAL . exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    exp                            shift and go to state 87
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 68

    (58) superExp -> exp NOT_EQUAL . exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    exp                            shift and go to state 88
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 69

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . forBlock
    (28) statement -> . print DOT_COMMA
    (29) statement -> . read DOT_COMMA
    (30) statement -> . lineComment
    (31) statement -> . arrays DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . idCall INCREMENT
    (35) assignment -> . idCall DECREMENT
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR
    (42) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (45) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (46) forBlock -> . FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (75) print -> . PRINT L_PAR print_help R_PAR
    (81) read -> . READ L_PAR idCall R_PAR
    (82) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (7) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 48
    IF              shift and go to state 100
    WHILE           shift and go to state 101
    FOR             shift and go to state 102
    PRINT           shift and go to state 103
    READ            shift and go to state 104
    COMMENT_LINE    shift and go to state 105
    VAR             shift and go to state 106

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! FOR             [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! VAR             [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 89
    statement                      shift and go to state 90
    assignment                     shift and go to state 91
    functionCall                   shift and go to state 92
    ifBlock                        shift and go to state 93
    whileBlock                     shift and go to state 94
    forBlock                       shift and go to state 95
    print                          shift and go to state 96
    read                           shift and go to state 97
    lineComment                    shift and go to state 98
    arrays                         shift and go to state 99
    idCall                         shift and go to state 20

state 70

    (11) functionsHelp -> type ID .
    (12) functionsHelp -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 11 (functionsHelp -> type ID .)
    COMMA           shift and go to state 107


state 71

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR . L_BRACK variables statements R_BRACK

    L_BRACK         shift and go to state 108


state 72

    (36) functionCall -> ID L_PAR functionCallParams . R_PAR

    R_PAR           shift and go to state 109


state 73

    (37) functionCallParams -> functionCallParamsOptional .

    R_PAR           reduce using rule 37 (functionCallParams -> functionCallParamsOptional .)


state 74

    (39) functionCallParamsOptional -> megaExp . functionCallParamsMultiple
    (40) functionCallParamsMultiple -> .
    (41) functionCallParamsMultiple -> . COMMA functionCallParamsOptional

    R_PAR           reduce using rule 40 (functionCallParamsMultiple -> .)
    COMMA           shift and go to state 111

    functionCallParamsMultiple     shift and go to state 110

state 75

    (60) exp -> term PLUS exp .

    R_KEY           reduce using rule 60 (exp -> term PLUS exp .)
    MORE_THAN       reduce using rule 60 (exp -> term PLUS exp .)
    LESS_THAN       reduce using rule 60 (exp -> term PLUS exp .)
    MORE_EQUAL      reduce using rule 60 (exp -> term PLUS exp .)
    LESS_EQUAL      reduce using rule 60 (exp -> term PLUS exp .)
    EQUAL           reduce using rule 60 (exp -> term PLUS exp .)
    NOT_EQUAL       reduce using rule 60 (exp -> term PLUS exp .)
    AND             reduce using rule 60 (exp -> term PLUS exp .)
    OR              reduce using rule 60 (exp -> term PLUS exp .)
    DOT_COMMA       reduce using rule 60 (exp -> term PLUS exp .)
    R_PAR           reduce using rule 60 (exp -> term PLUS exp .)
    COMMA           reduce using rule 60 (exp -> term PLUS exp .)


state 76

    (61) exp -> term MINUS exp .

    R_KEY           reduce using rule 61 (exp -> term MINUS exp .)
    MORE_THAN       reduce using rule 61 (exp -> term MINUS exp .)
    LESS_THAN       reduce using rule 61 (exp -> term MINUS exp .)
    MORE_EQUAL      reduce using rule 61 (exp -> term MINUS exp .)
    LESS_EQUAL      reduce using rule 61 (exp -> term MINUS exp .)
    EQUAL           reduce using rule 61 (exp -> term MINUS exp .)
    NOT_EQUAL       reduce using rule 61 (exp -> term MINUS exp .)
    AND             reduce using rule 61 (exp -> term MINUS exp .)
    OR              reduce using rule 61 (exp -> term MINUS exp .)
    DOT_COMMA       reduce using rule 61 (exp -> term MINUS exp .)
    R_PAR           reduce using rule 61 (exp -> term MINUS exp .)
    COMMA           reduce using rule 61 (exp -> term MINUS exp .)


state 77

    (63) term -> factor TIMES term .

    PLUS            reduce using rule 63 (term -> factor TIMES term .)
    MINUS           reduce using rule 63 (term -> factor TIMES term .)
    R_KEY           reduce using rule 63 (term -> factor TIMES term .)
    MORE_THAN       reduce using rule 63 (term -> factor TIMES term .)
    LESS_THAN       reduce using rule 63 (term -> factor TIMES term .)
    MORE_EQUAL      reduce using rule 63 (term -> factor TIMES term .)
    LESS_EQUAL      reduce using rule 63 (term -> factor TIMES term .)
    EQUAL           reduce using rule 63 (term -> factor TIMES term .)
    NOT_EQUAL       reduce using rule 63 (term -> factor TIMES term .)
    AND             reduce using rule 63 (term -> factor TIMES term .)
    OR              reduce using rule 63 (term -> factor TIMES term .)
    DOT_COMMA       reduce using rule 63 (term -> factor TIMES term .)
    R_PAR           reduce using rule 63 (term -> factor TIMES term .)
    COMMA           reduce using rule 63 (term -> factor TIMES term .)


state 78

    (64) term -> factor DIVIDE term .

    PLUS            reduce using rule 64 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 64 (term -> factor DIVIDE term .)
    R_KEY           reduce using rule 64 (term -> factor DIVIDE term .)
    MORE_THAN       reduce using rule 64 (term -> factor DIVIDE term .)
    LESS_THAN       reduce using rule 64 (term -> factor DIVIDE term .)
    MORE_EQUAL      reduce using rule 64 (term -> factor DIVIDE term .)
    LESS_EQUAL      reduce using rule 64 (term -> factor DIVIDE term .)
    EQUAL           reduce using rule 64 (term -> factor DIVIDE term .)
    NOT_EQUAL       reduce using rule 64 (term -> factor DIVIDE term .)
    AND             reduce using rule 64 (term -> factor DIVIDE term .)
    OR              reduce using rule 64 (term -> factor DIVIDE term .)
    DOT_COMMA       reduce using rule 64 (term -> factor DIVIDE term .)
    R_PAR           reduce using rule 64 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 64 (term -> factor DIVIDE term .)


state 79

    (65) term -> factor MOD term .

    PLUS            reduce using rule 65 (term -> factor MOD term .)
    MINUS           reduce using rule 65 (term -> factor MOD term .)
    R_KEY           reduce using rule 65 (term -> factor MOD term .)
    MORE_THAN       reduce using rule 65 (term -> factor MOD term .)
    LESS_THAN       reduce using rule 65 (term -> factor MOD term .)
    MORE_EQUAL      reduce using rule 65 (term -> factor MOD term .)
    LESS_EQUAL      reduce using rule 65 (term -> factor MOD term .)
    EQUAL           reduce using rule 65 (term -> factor MOD term .)
    NOT_EQUAL       reduce using rule 65 (term -> factor MOD term .)
    AND             reduce using rule 65 (term -> factor MOD term .)
    OR              reduce using rule 65 (term -> factor MOD term .)
    DOT_COMMA       reduce using rule 65 (term -> factor MOD term .)
    R_PAR           reduce using rule 65 (term -> factor MOD term .)
    COMMA           reduce using rule 65 (term -> factor MOD term .)


state 80

    (71) factor -> L_PAR megaExp R_PAR .

    TIMES           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    DIVIDE          reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    MOD             reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    PLUS            reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    MINUS           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    R_KEY           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    MORE_THAN       reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    LESS_THAN       reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    MORE_EQUAL      reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    LESS_EQUAL      reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    EQUAL           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    NOT_EQUAL       reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    AND             reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    OR              reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    DOT_COMMA       reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    R_PAR           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)
    COMMA           reduce using rule 71 (factor -> L_PAR megaExp R_PAR .)


state 81

    (50) megaExp -> superExp AND superExp .

    DOT_COMMA       reduce using rule 50 (megaExp -> superExp AND superExp .)
    R_PAR           reduce using rule 50 (megaExp -> superExp AND superExp .)
    COMMA           reduce using rule 50 (megaExp -> superExp AND superExp .)


state 82

    (51) megaExp -> superExp OR superExp .

    DOT_COMMA       reduce using rule 51 (megaExp -> superExp OR superExp .)
    R_PAR           reduce using rule 51 (megaExp -> superExp OR superExp .)
    COMMA           reduce using rule 51 (megaExp -> superExp OR superExp .)


state 83

    (53) superExp -> exp MORE_THAN exp .

    AND             reduce using rule 53 (superExp -> exp MORE_THAN exp .)
    OR              reduce using rule 53 (superExp -> exp MORE_THAN exp .)
    DOT_COMMA       reduce using rule 53 (superExp -> exp MORE_THAN exp .)
    R_PAR           reduce using rule 53 (superExp -> exp MORE_THAN exp .)
    COMMA           reduce using rule 53 (superExp -> exp MORE_THAN exp .)


state 84

    (54) superExp -> exp LESS_THAN exp .

    AND             reduce using rule 54 (superExp -> exp LESS_THAN exp .)
    OR              reduce using rule 54 (superExp -> exp LESS_THAN exp .)
    DOT_COMMA       reduce using rule 54 (superExp -> exp LESS_THAN exp .)
    R_PAR           reduce using rule 54 (superExp -> exp LESS_THAN exp .)
    COMMA           reduce using rule 54 (superExp -> exp LESS_THAN exp .)


state 85

    (55) superExp -> exp MORE_EQUAL exp .

    AND             reduce using rule 55 (superExp -> exp MORE_EQUAL exp .)
    OR              reduce using rule 55 (superExp -> exp MORE_EQUAL exp .)
    DOT_COMMA       reduce using rule 55 (superExp -> exp MORE_EQUAL exp .)
    R_PAR           reduce using rule 55 (superExp -> exp MORE_EQUAL exp .)
    COMMA           reduce using rule 55 (superExp -> exp MORE_EQUAL exp .)


state 86

    (56) superExp -> exp LESS_EQUAL exp .

    AND             reduce using rule 56 (superExp -> exp LESS_EQUAL exp .)
    OR              reduce using rule 56 (superExp -> exp LESS_EQUAL exp .)
    DOT_COMMA       reduce using rule 56 (superExp -> exp LESS_EQUAL exp .)
    R_PAR           reduce using rule 56 (superExp -> exp LESS_EQUAL exp .)
    COMMA           reduce using rule 56 (superExp -> exp LESS_EQUAL exp .)


state 87

    (57) superExp -> exp EQUAL exp .

    AND             reduce using rule 57 (superExp -> exp EQUAL exp .)
    OR              reduce using rule 57 (superExp -> exp EQUAL exp .)
    DOT_COMMA       reduce using rule 57 (superExp -> exp EQUAL exp .)
    R_PAR           reduce using rule 57 (superExp -> exp EQUAL exp .)
    COMMA           reduce using rule 57 (superExp -> exp EQUAL exp .)


state 88

    (58) superExp -> exp NOT_EQUAL exp .

    AND             reduce using rule 58 (superExp -> exp NOT_EQUAL exp .)
    OR              reduce using rule 58 (superExp -> exp NOT_EQUAL exp .)
    DOT_COMMA       reduce using rule 58 (superExp -> exp NOT_EQUAL exp .)
    R_PAR           reduce using rule 58 (superExp -> exp NOT_EQUAL exp .)
    COMMA           reduce using rule 58 (superExp -> exp NOT_EQUAL exp .)


state 89

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements . R_BRACK

    R_BRACK         shift and go to state 112


state 90

    (21) statements -> statement . statements
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . forBlock
    (28) statement -> . print DOT_COMMA
    (29) statement -> . read DOT_COMMA
    (30) statement -> . lineComment
    (31) statement -> . arrays DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . idCall INCREMENT
    (35) assignment -> . idCall DECREMENT
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR
    (42) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (45) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (46) forBlock -> . FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (75) print -> . PRINT L_PAR print_help R_PAR
    (81) read -> . READ L_PAR idCall R_PAR
    (82) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (7) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 48
    IF              shift and go to state 100
    WHILE           shift and go to state 101
    FOR             shift and go to state 102
    PRINT           shift and go to state 103
    READ            shift and go to state 104
    COMMENT_LINE    shift and go to state 105
    VAR             shift and go to state 106

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! FOR             [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! VAR             [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statement                      shift and go to state 90
    statements                     shift and go to state 113
    assignment                     shift and go to state 91
    functionCall                   shift and go to state 92
    ifBlock                        shift and go to state 93
    whileBlock                     shift and go to state 94
    forBlock                       shift and go to state 95
    print                          shift and go to state 96
    read                           shift and go to state 97
    lineComment                    shift and go to state 98
    arrays                         shift and go to state 99
    idCall                         shift and go to state 20

state 91

    (23) statement -> assignment . DOT_COMMA

    DOT_COMMA       shift and go to state 114


state 92

    (24) statement -> functionCall . DOT_COMMA

    DOT_COMMA       shift and go to state 115


state 93

    (25) statement -> ifBlock .

    ID              reduce using rule 25 (statement -> ifBlock .)
    IF              reduce using rule 25 (statement -> ifBlock .)
    WHILE           reduce using rule 25 (statement -> ifBlock .)
    FOR             reduce using rule 25 (statement -> ifBlock .)
    PRINT           reduce using rule 25 (statement -> ifBlock .)
    READ            reduce using rule 25 (statement -> ifBlock .)
    COMMENT_LINE    reduce using rule 25 (statement -> ifBlock .)
    VAR             reduce using rule 25 (statement -> ifBlock .)
    R_BRACK         reduce using rule 25 (statement -> ifBlock .)


state 94

    (26) statement -> whileBlock .

    ID              reduce using rule 26 (statement -> whileBlock .)
    IF              reduce using rule 26 (statement -> whileBlock .)
    WHILE           reduce using rule 26 (statement -> whileBlock .)
    FOR             reduce using rule 26 (statement -> whileBlock .)
    PRINT           reduce using rule 26 (statement -> whileBlock .)
    READ            reduce using rule 26 (statement -> whileBlock .)
    COMMENT_LINE    reduce using rule 26 (statement -> whileBlock .)
    VAR             reduce using rule 26 (statement -> whileBlock .)
    R_BRACK         reduce using rule 26 (statement -> whileBlock .)


state 95

    (27) statement -> forBlock .

    ID              reduce using rule 27 (statement -> forBlock .)
    IF              reduce using rule 27 (statement -> forBlock .)
    WHILE           reduce using rule 27 (statement -> forBlock .)
    FOR             reduce using rule 27 (statement -> forBlock .)
    PRINT           reduce using rule 27 (statement -> forBlock .)
    READ            reduce using rule 27 (statement -> forBlock .)
    COMMENT_LINE    reduce using rule 27 (statement -> forBlock .)
    VAR             reduce using rule 27 (statement -> forBlock .)
    R_BRACK         reduce using rule 27 (statement -> forBlock .)


state 96

    (28) statement -> print . DOT_COMMA

    DOT_COMMA       shift and go to state 116


state 97

    (29) statement -> read . DOT_COMMA

    DOT_COMMA       shift and go to state 117


state 98

    (30) statement -> lineComment .

    ID              reduce using rule 30 (statement -> lineComment .)
    IF              reduce using rule 30 (statement -> lineComment .)
    WHILE           reduce using rule 30 (statement -> lineComment .)
    FOR             reduce using rule 30 (statement -> lineComment .)
    PRINT           reduce using rule 30 (statement -> lineComment .)
    READ            reduce using rule 30 (statement -> lineComment .)
    COMMENT_LINE    reduce using rule 30 (statement -> lineComment .)
    VAR             reduce using rule 30 (statement -> lineComment .)
    R_BRACK         reduce using rule 30 (statement -> lineComment .)


state 99

    (31) statement -> arrays . DOT_COMMA

    DOT_COMMA       shift and go to state 118


state 100

    (42) ifBlock -> IF . L_PAR megaExp R_PAR body optionalElse

    L_PAR           shift and go to state 119


state 101

    (45) whileBlock -> WHILE . L_PAR megaExp R_PAR body

    L_PAR           shift and go to state 120


state 102

    (46) forBlock -> FOR . L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body

    L_PAR           shift and go to state 121


state 103

    (75) print -> PRINT . L_PAR print_help R_PAR

    L_PAR           shift and go to state 122


state 104

    (81) read -> READ . L_PAR idCall R_PAR

    L_PAR           shift and go to state 123


state 105

    (82) lineComment -> COMMENT_LINE . ALPHANUMERIC END_LINE

    ALPHANUMERIC    shift and go to state 124


state 106

    (7) arrays -> VAR . type ID L_KEY NUMBER R_KEY DOT_COMMA
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 125

state 107

    (12) functionsHelp -> type ID COMMA . functionsHelp2
    (13) functionsHelp2 -> . type ID
    (14) functionsHelp2 -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 126
    functionsHelp2                 shift and go to state 127

state 108

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK . variables statements R_BRACK
    (4) variables -> .
    (5) variables -> . VAR type ID DOT_COMMA variables
    (6) variables -> . VAR type assignment DOT_COMMA variables

  ! shift/reduce conflict for VAR resolved as shift
    ID              reduce using rule 4 (variables -> .)
    IF              reduce using rule 4 (variables -> .)
    WHILE           reduce using rule 4 (variables -> .)
    FOR             reduce using rule 4 (variables -> .)
    PRINT           reduce using rule 4 (variables -> .)
    READ            reduce using rule 4 (variables -> .)
    COMMENT_LINE    reduce using rule 4 (variables -> .)
    R_BRACK         reduce using rule 4 (variables -> .)
    VAR             shift and go to state 6

  ! VAR             [ reduce using rule 4 (variables -> .) ]

    variables                      shift and go to state 128

state 109

    (36) functionCall -> ID L_PAR functionCallParams R_PAR .

    TIMES           reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    DIVIDE          reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MOD             reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    PLUS            reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MINUS           reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_KEY           reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    DOT_COMMA       reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_THAN       reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_THAN       reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_EQUAL      reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_EQUAL      reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    EQUAL           reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    NOT_EQUAL       reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    AND             reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    OR              reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_PAR           reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    COMMA           reduce using rule 36 (functionCall -> ID L_PAR functionCallParams R_PAR .)


state 110

    (39) functionCallParamsOptional -> megaExp functionCallParamsMultiple .

    R_PAR           reduce using rule 39 (functionCallParamsOptional -> megaExp functionCallParamsMultiple .)


state 111

    (41) functionCallParamsMultiple -> COMMA . functionCallParamsOptional
    (38) functionCallParamsOptional -> .
    (39) functionCallParamsOptional -> . megaExp functionCallParamsMultiple
    (49) megaExp -> . superExp
    (50) megaExp -> . superExp AND superExp
    (51) megaExp -> . superExp OR superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    R_PAR           reduce using rule 38 (functionCallParamsOptional -> .)
    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    functionCallParamsOptional     shift and go to state 129
    megaExp                        shift and go to state 74
    superExp                       shift and go to state 47
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 112

    (2) mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK .

    R_BRACK         reduce using rule 2 (mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK .)


state 113

    (21) statements -> statement statements .

    R_BRACK         reduce using rule 21 (statements -> statement statements .)


state 114

    (23) statement -> assignment DOT_COMMA .

    ID              reduce using rule 23 (statement -> assignment DOT_COMMA .)
    IF              reduce using rule 23 (statement -> assignment DOT_COMMA .)
    WHILE           reduce using rule 23 (statement -> assignment DOT_COMMA .)
    FOR             reduce using rule 23 (statement -> assignment DOT_COMMA .)
    PRINT           reduce using rule 23 (statement -> assignment DOT_COMMA .)
    READ            reduce using rule 23 (statement -> assignment DOT_COMMA .)
    COMMENT_LINE    reduce using rule 23 (statement -> assignment DOT_COMMA .)
    VAR             reduce using rule 23 (statement -> assignment DOT_COMMA .)
    R_BRACK         reduce using rule 23 (statement -> assignment DOT_COMMA .)


state 115

    (24) statement -> functionCall DOT_COMMA .

    ID              reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    IF              reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    WHILE           reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    FOR             reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    PRINT           reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    READ            reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    COMMENT_LINE    reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    VAR             reduce using rule 24 (statement -> functionCall DOT_COMMA .)
    R_BRACK         reduce using rule 24 (statement -> functionCall DOT_COMMA .)


state 116

    (28) statement -> print DOT_COMMA .

    ID              reduce using rule 28 (statement -> print DOT_COMMA .)
    IF              reduce using rule 28 (statement -> print DOT_COMMA .)
    WHILE           reduce using rule 28 (statement -> print DOT_COMMA .)
    FOR             reduce using rule 28 (statement -> print DOT_COMMA .)
    PRINT           reduce using rule 28 (statement -> print DOT_COMMA .)
    READ            reduce using rule 28 (statement -> print DOT_COMMA .)
    COMMENT_LINE    reduce using rule 28 (statement -> print DOT_COMMA .)
    VAR             reduce using rule 28 (statement -> print DOT_COMMA .)
    R_BRACK         reduce using rule 28 (statement -> print DOT_COMMA .)


state 117

    (29) statement -> read DOT_COMMA .

    ID              reduce using rule 29 (statement -> read DOT_COMMA .)
    IF              reduce using rule 29 (statement -> read DOT_COMMA .)
    WHILE           reduce using rule 29 (statement -> read DOT_COMMA .)
    FOR             reduce using rule 29 (statement -> read DOT_COMMA .)
    PRINT           reduce using rule 29 (statement -> read DOT_COMMA .)
    READ            reduce using rule 29 (statement -> read DOT_COMMA .)
    COMMENT_LINE    reduce using rule 29 (statement -> read DOT_COMMA .)
    VAR             reduce using rule 29 (statement -> read DOT_COMMA .)
    R_BRACK         reduce using rule 29 (statement -> read DOT_COMMA .)


state 118

    (31) statement -> arrays DOT_COMMA .

    ID              reduce using rule 31 (statement -> arrays DOT_COMMA .)
    IF              reduce using rule 31 (statement -> arrays DOT_COMMA .)
    WHILE           reduce using rule 31 (statement -> arrays DOT_COMMA .)
    FOR             reduce using rule 31 (statement -> arrays DOT_COMMA .)
    PRINT           reduce using rule 31 (statement -> arrays DOT_COMMA .)
    READ            reduce using rule 31 (statement -> arrays DOT_COMMA .)
    COMMENT_LINE    reduce using rule 31 (statement -> arrays DOT_COMMA .)
    VAR             reduce using rule 31 (statement -> arrays DOT_COMMA .)
    R_BRACK         reduce using rule 31 (statement -> arrays DOT_COMMA .)


state 119

    (42) ifBlock -> IF L_PAR . megaExp R_PAR body optionalElse
    (49) megaExp -> . superExp
    (50) megaExp -> . superExp AND superExp
    (51) megaExp -> . superExp OR superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    megaExp                        shift and go to state 130
    superExp                       shift and go to state 47
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 120

    (45) whileBlock -> WHILE L_PAR . megaExp R_PAR body
    (49) megaExp -> . superExp
    (50) megaExp -> . superExp AND superExp
    (51) megaExp -> . superExp OR superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    megaExp                        shift and go to state 131
    superExp                       shift and go to state 47
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 121

    (46) forBlock -> FOR L_PAR . assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . idCall INCREMENT
    (35) assignment -> . idCall DECREMENT
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 133

    assignment                     shift and go to state 132
    idCall                         shift and go to state 20

state 122

    (75) print -> PRINT L_PAR . print_help R_PAR
    (76) print_help -> .
    (77) print_help -> . ALPHANUMERIC
    (78) print_help -> . idCall
    (79) print_help -> . functionCall
    (80) print_help -> . megaExp
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR
    (49) megaExp -> . superExp
    (50) megaExp -> . superExp AND superExp
    (51) megaExp -> . superExp OR superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall

    R_PAR           reduce using rule 76 (print_help -> .)
    ALPHANUMERIC    shift and go to state 135
    ID              shift and go to state 33
    NUMBER          shift and go to state 37
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42

    print_help                     shift and go to state 134
    idCall                         shift and go to state 136
    functionCall                   shift and go to state 137
    megaExp                        shift and go to state 138
    exp                            shift and go to state 49
    superExp                       shift and go to state 47
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 123

    (81) read -> READ L_PAR . idCall R_PAR
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 133

    idCall                         shift and go to state 139

state 124

    (82) lineComment -> COMMENT_LINE ALPHANUMERIC . END_LINE

    END_LINE        shift and go to state 140


state 125

    (7) arrays -> VAR type . ID L_KEY NUMBER R_KEY DOT_COMMA

    ID              shift and go to state 141


state 126

    (13) functionsHelp2 -> type . ID
    (14) functionsHelp2 -> type . ID COMMA functionsHelp2

    ID              shift and go to state 142


state 127

    (12) functionsHelp -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 12 (functionsHelp -> type ID COMMA functionsHelp2 .)


state 128

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . forBlock
    (28) statement -> . print DOT_COMMA
    (29) statement -> . read DOT_COMMA
    (30) statement -> . lineComment
    (31) statement -> . arrays DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . idCall INCREMENT
    (35) assignment -> . idCall DECREMENT
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR
    (42) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (45) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (46) forBlock -> . FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (75) print -> . PRINT L_PAR print_help R_PAR
    (81) read -> . READ L_PAR idCall R_PAR
    (82) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (7) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 48
    IF              shift and go to state 100
    WHILE           shift and go to state 101
    FOR             shift and go to state 102
    PRINT           shift and go to state 103
    READ            shift and go to state 104
    COMMENT_LINE    shift and go to state 105
    VAR             shift and go to state 106

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! FOR             [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! VAR             [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 143
    statement                      shift and go to state 90
    assignment                     shift and go to state 91
    functionCall                   shift and go to state 92
    ifBlock                        shift and go to state 93
    whileBlock                     shift and go to state 94
    forBlock                       shift and go to state 95
    print                          shift and go to state 96
    read                           shift and go to state 97
    lineComment                    shift and go to state 98
    arrays                         shift and go to state 99
    idCall                         shift and go to state 20

state 129

    (41) functionCallParamsMultiple -> COMMA functionCallParamsOptional .

    R_PAR           reduce using rule 41 (functionCallParamsMultiple -> COMMA functionCallParamsOptional .)


state 130

    (42) ifBlock -> IF L_PAR megaExp . R_PAR body optionalElse

    R_PAR           shift and go to state 144


state 131

    (45) whileBlock -> WHILE L_PAR megaExp . R_PAR body

    R_PAR           shift and go to state 145


state 132

    (46) forBlock -> FOR L_PAR assignment . DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body

    DOT_COMMA       shift and go to state 146


state 133

    (73) idCall -> ID .
    (74) idCall -> ID . L_KEY exp R_KEY

    ASSIGN          reduce using rule 73 (idCall -> ID .)
    INCREMENT       reduce using rule 73 (idCall -> ID .)
    DECREMENT       reduce using rule 73 (idCall -> ID .)
    R_PAR           reduce using rule 73 (idCall -> ID .)
    L_KEY           shift and go to state 25


state 134

    (75) print -> PRINT L_PAR print_help . R_PAR

    R_PAR           shift and go to state 147


state 135

    (77) print_help -> ALPHANUMERIC .
    (67) factor -> ALPHANUMERIC .

  ! reduce/reduce conflict for R_PAR resolved using rule 67 (factor -> ALPHANUMERIC .)
    TIMES           reduce using rule 67 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 67 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 67 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 67 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 67 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 67 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 67 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 67 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 67 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 67 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 67 (factor -> ALPHANUMERIC .)

  ! R_PAR           [ reduce using rule 77 (print_help -> ALPHANUMERIC .) ]


state 136

    (78) print_help -> idCall .
    (70) factor -> idCall .

  ! reduce/reduce conflict for R_PAR resolved using rule 70 (factor -> idCall .)
    TIMES           reduce using rule 70 (factor -> idCall .)
    DIVIDE          reduce using rule 70 (factor -> idCall .)
    MOD             reduce using rule 70 (factor -> idCall .)
    PLUS            reduce using rule 70 (factor -> idCall .)
    MINUS           reduce using rule 70 (factor -> idCall .)
    MORE_THAN       reduce using rule 70 (factor -> idCall .)
    LESS_THAN       reduce using rule 70 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 70 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 70 (factor -> idCall .)
    EQUAL           reduce using rule 70 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 70 (factor -> idCall .)
    AND             reduce using rule 70 (factor -> idCall .)
    OR              reduce using rule 70 (factor -> idCall .)
    R_PAR           reduce using rule 70 (factor -> idCall .)

  ! R_PAR           [ reduce using rule 78 (print_help -> idCall .) ]


state 137

    (79) print_help -> functionCall .
    (72) factor -> functionCall .

  ! reduce/reduce conflict for R_PAR resolved using rule 72 (factor -> functionCall .)
    TIMES           reduce using rule 72 (factor -> functionCall .)
    DIVIDE          reduce using rule 72 (factor -> functionCall .)
    MOD             reduce using rule 72 (factor -> functionCall .)
    PLUS            reduce using rule 72 (factor -> functionCall .)
    MINUS           reduce using rule 72 (factor -> functionCall .)
    MORE_THAN       reduce using rule 72 (factor -> functionCall .)
    LESS_THAN       reduce using rule 72 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 72 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 72 (factor -> functionCall .)
    EQUAL           reduce using rule 72 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 72 (factor -> functionCall .)
    AND             reduce using rule 72 (factor -> functionCall .)
    OR              reduce using rule 72 (factor -> functionCall .)
    R_PAR           reduce using rule 72 (factor -> functionCall .)

  ! R_PAR           [ reduce using rule 79 (print_help -> functionCall .) ]


state 138

    (80) print_help -> megaExp .

    R_PAR           reduce using rule 80 (print_help -> megaExp .)


state 139

    (81) read -> READ L_PAR idCall . R_PAR

    R_PAR           shift and go to state 148


state 140

    (82) lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .

    ID              reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    IF              reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    WHILE           reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    FOR             reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    PRINT           reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    READ            reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    COMMENT_LINE    reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    VAR             reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)
    R_BRACK         reduce using rule 82 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)


state 141

    (7) arrays -> VAR type ID . L_KEY NUMBER R_KEY DOT_COMMA

    L_KEY           shift and go to state 149


state 142

    (13) functionsHelp2 -> type ID .
    (14) functionsHelp2 -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 13 (functionsHelp2 -> type ID .)
    COMMA           shift and go to state 150


state 143

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements . R_BRACK

    R_BRACK         shift and go to state 151


state 144

    (42) ifBlock -> IF L_PAR megaExp R_PAR . body optionalElse
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 153

    body                           shift and go to state 152

state 145

    (45) whileBlock -> WHILE L_PAR megaExp R_PAR . body
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 153

    body                           shift and go to state 154

state 146

    (46) forBlock -> FOR L_PAR assignment DOT_COMMA . megaExp DOT_COMMA optionalAssign R_PAR body
    (49) megaExp -> . superExp
    (50) megaExp -> . superExp AND superExp
    (51) megaExp -> . superExp OR superExp
    (52) superExp -> . exp
    (53) superExp -> . exp MORE_THAN exp
    (54) superExp -> . exp LESS_THAN exp
    (55) superExp -> . exp MORE_EQUAL exp
    (56) superExp -> . exp LESS_EQUAL exp
    (57) superExp -> . exp EQUAL exp
    (58) superExp -> . exp NOT_EQUAL exp
    (59) exp -> . term
    (60) exp -> . term PLUS exp
    (61) exp -> . term MINUS exp
    (62) term -> . factor
    (63) term -> . factor TIMES term
    (64) term -> . factor DIVIDE term
    (65) term -> . factor MOD term
    (66) factor -> . NUMBER
    (67) factor -> . ALPHANUMERIC
    (68) factor -> . CHARACTER
    (69) factor -> . BOOLEAN
    (70) factor -> . idCall
    (71) factor -> . L_PAR megaExp R_PAR
    (72) factor -> . functionCall
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 37
    ALPHANUMERIC    shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOLEAN         shift and go to state 40
    L_PAR           shift and go to state 42
    ID              shift and go to state 33

    megaExp                        shift and go to state 155
    superExp                       shift and go to state 47
    exp                            shift and go to state 49
    term                           shift and go to state 35
    factor                         shift and go to state 36
    idCall                         shift and go to state 41
    functionCall                   shift and go to state 43

state 147

    (75) print -> PRINT L_PAR print_help R_PAR .

    DOT_COMMA       reduce using rule 75 (print -> PRINT L_PAR print_help R_PAR .)


state 148

    (81) read -> READ L_PAR idCall R_PAR .

    DOT_COMMA       reduce using rule 81 (read -> READ L_PAR idCall R_PAR .)


state 149

    (7) arrays -> VAR type ID L_KEY . NUMBER R_KEY DOT_COMMA

    NUMBER          shift and go to state 156


state 150

    (14) functionsHelp2 -> type ID COMMA . functionsHelp2
    (13) functionsHelp2 -> . type ID
    (14) functionsHelp2 -> . type ID COMMA functionsHelp2
    (15) type -> . INT
    (16) type -> . DECIM
    (17) type -> . BOOL
    (18) type -> . CHAR
    (19) type -> . STRING

    INT             shift and go to state 10
    DECIM           shift and go to state 11
    BOOL            shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 126
    functionsHelp2                 shift and go to state 157

state 151

    (9) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK .

    MAIN            reduce using rule 9 (functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK .)


state 152

    (42) ifBlock -> IF L_PAR megaExp R_PAR body . optionalElse
    (43) optionalElse -> .
    (44) optionalElse -> . ELSE body

    ID              reduce using rule 43 (optionalElse -> .)
    IF              reduce using rule 43 (optionalElse -> .)
    WHILE           reduce using rule 43 (optionalElse -> .)
    FOR             reduce using rule 43 (optionalElse -> .)
    PRINT           reduce using rule 43 (optionalElse -> .)
    READ            reduce using rule 43 (optionalElse -> .)
    COMMENT_LINE    reduce using rule 43 (optionalElse -> .)
    VAR             reduce using rule 43 (optionalElse -> .)
    R_BRACK         reduce using rule 43 (optionalElse -> .)
    ELSE            shift and go to state 159

    optionalElse                   shift and go to state 158

state 153

    (3) body -> L_BRACK . statements R_BRACK
    (20) statements -> .
    (21) statements -> . statement statements
    (22) statement -> .
    (23) statement -> . assignment DOT_COMMA
    (24) statement -> . functionCall DOT_COMMA
    (25) statement -> . ifBlock
    (26) statement -> . whileBlock
    (27) statement -> . forBlock
    (28) statement -> . print DOT_COMMA
    (29) statement -> . read DOT_COMMA
    (30) statement -> . lineComment
    (31) statement -> . arrays DOT_COMMA
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . idCall INCREMENT
    (35) assignment -> . idCall DECREMENT
    (36) functionCall -> . ID L_PAR functionCallParams R_PAR
    (42) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (45) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (46) forBlock -> . FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (75) print -> . PRINT L_PAR print_help R_PAR
    (81) read -> . READ L_PAR idCall R_PAR
    (82) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (7) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

  ! reduce/reduce conflict for R_BRACK resolved using rule 20 (statements -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    R_BRACK         reduce using rule 20 (statements -> .)
    ID              shift and go to state 48
    IF              shift and go to state 100
    WHILE           shift and go to state 101
    FOR             shift and go to state 102
    PRINT           shift and go to state 103
    READ            shift and go to state 104
    COMMENT_LINE    shift and go to state 105
    VAR             shift and go to state 106

  ! ID              [ reduce using rule 22 (statement -> .) ]
  ! IF              [ reduce using rule 22 (statement -> .) ]
  ! WHILE           [ reduce using rule 22 (statement -> .) ]
  ! FOR             [ reduce using rule 22 (statement -> .) ]
  ! PRINT           [ reduce using rule 22 (statement -> .) ]
  ! READ            [ reduce using rule 22 (statement -> .) ]
  ! COMMENT_LINE    [ reduce using rule 22 (statement -> .) ]
  ! VAR             [ reduce using rule 22 (statement -> .) ]
  ! R_BRACK         [ reduce using rule 22 (statement -> .) ]

    statements                     shift and go to state 160
    statement                      shift and go to state 90
    assignment                     shift and go to state 91
    functionCall                   shift and go to state 92
    ifBlock                        shift and go to state 93
    whileBlock                     shift and go to state 94
    forBlock                       shift and go to state 95
    print                          shift and go to state 96
    read                           shift and go to state 97
    lineComment                    shift and go to state 98
    arrays                         shift and go to state 99
    idCall                         shift and go to state 20

state 154

    (45) whileBlock -> WHILE L_PAR megaExp R_PAR body .

    ID              reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    IF              reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    WHILE           reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    FOR             reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    PRINT           reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    READ            reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    COMMENT_LINE    reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    VAR             reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)
    R_BRACK         reduce using rule 45 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)


state 155

    (46) forBlock -> FOR L_PAR assignment DOT_COMMA megaExp . DOT_COMMA optionalAssign R_PAR body

    DOT_COMMA       shift and go to state 161


state 156

    (7) arrays -> VAR type ID L_KEY NUMBER . R_KEY DOT_COMMA

    R_KEY           shift and go to state 162


state 157

    (14) functionsHelp2 -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 14 (functionsHelp2 -> type ID COMMA functionsHelp2 .)


state 158

    (42) ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .

    ID              reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    IF              reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    WHILE           reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    FOR             reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    PRINT           reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    READ            reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    COMMENT_LINE    reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    VAR             reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)
    R_BRACK         reduce using rule 42 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)


state 159

    (44) optionalElse -> ELSE . body
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 153

    body                           shift and go to state 163

state 160

    (3) body -> L_BRACK statements . R_BRACK

    R_BRACK         shift and go to state 164


state 161

    (46) forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA . optionalAssign R_PAR body
    (47) optionalAssign -> .
    (48) optionalAssign -> . assignment
    (32) assignment -> . idCall ASSIGN megaExp
    (33) assignment -> . idCall ASSIGN functionCall
    (34) assignment -> . idCall INCREMENT
    (35) assignment -> . idCall DECREMENT
    (73) idCall -> . ID
    (74) idCall -> . ID L_KEY exp R_KEY

    R_PAR           reduce using rule 47 (optionalAssign -> .)
    ID              shift and go to state 133

    assignment                     shift and go to state 165
    optionalAssign                 shift and go to state 166
    idCall                         shift and go to state 20

state 162

    (7) arrays -> VAR type ID L_KEY NUMBER R_KEY . DOT_COMMA

    DOT_COMMA       shift and go to state 167


state 163

    (44) optionalElse -> ELSE body .

    ID              reduce using rule 44 (optionalElse -> ELSE body .)
    IF              reduce using rule 44 (optionalElse -> ELSE body .)
    WHILE           reduce using rule 44 (optionalElse -> ELSE body .)
    FOR             reduce using rule 44 (optionalElse -> ELSE body .)
    PRINT           reduce using rule 44 (optionalElse -> ELSE body .)
    READ            reduce using rule 44 (optionalElse -> ELSE body .)
    COMMENT_LINE    reduce using rule 44 (optionalElse -> ELSE body .)
    VAR             reduce using rule 44 (optionalElse -> ELSE body .)
    R_BRACK         reduce using rule 44 (optionalElse -> ELSE body .)


state 164

    (3) body -> L_BRACK statements R_BRACK .

    ELSE            reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    ID              reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    IF              reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    WHILE           reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    FOR             reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    PRINT           reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    READ            reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    COMMENT_LINE    reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    VAR             reduce using rule 3 (body -> L_BRACK statements R_BRACK .)
    R_BRACK         reduce using rule 3 (body -> L_BRACK statements R_BRACK .)


state 165

    (48) optionalAssign -> assignment .

    R_PAR           reduce using rule 48 (optionalAssign -> assignment .)


state 166

    (46) forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign . R_PAR body

    R_PAR           shift and go to state 168


state 167

    (7) arrays -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA .

    DOT_COMMA       reduce using rule 7 (arrays -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA .)


state 168

    (46) forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR . body
    (3) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 153

    body                           shift and go to state 169

state 169

    (46) forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .

    ID              reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)
    IF              reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)
    WHILE           reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)
    FOR             reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)
    PRINT           reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)
    READ            reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)
    COMMENT_LINE    reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)
    VAR             reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)
    R_BRACK         reduce using rule 46 (forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR in state 26 resolved as shift
WARNING: shift/reduce conflict for VAR in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 69 resolved as shift
WARNING: shift/reduce conflict for READ in state 69 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 69 resolved as shift
WARNING: shift/reduce conflict for VAR in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 90 resolved as shift
WARNING: shift/reduce conflict for READ in state 90 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 90 resolved as shift
WARNING: shift/reduce conflict for VAR in state 90 resolved as shift
WARNING: shift/reduce conflict for VAR in state 108 resolved as shift
WARNING: shift/reduce conflict for ID in state 128 resolved as shift
WARNING: shift/reduce conflict for IF in state 128 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 128 resolved as shift
WARNING: shift/reduce conflict for FOR in state 128 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 128 resolved as shift
WARNING: shift/reduce conflict for READ in state 128 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 128 resolved as shift
WARNING: shift/reduce conflict for VAR in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 153 resolved as shift
WARNING: shift/reduce conflict for IF in state 153 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 153 resolved as shift
WARNING: shift/reduce conflict for FOR in state 153 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 153 resolved as shift
WARNING: shift/reduce conflict for READ in state 153 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 153 resolved as shift
WARNING: shift/reduce conflict for VAR in state 153 resolved as shift
WARNING: reduce/reduce conflict in state 46 resolved using rule (assignment -> idCall ASSIGN functionCall)
WARNING: rejected rule (factor -> functionCall) in state 46
WARNING: reduce/reduce conflict in state 69 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 69
WARNING: reduce/reduce conflict in state 90 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 90
WARNING: reduce/reduce conflict in state 128 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 128
WARNING: reduce/reduce conflict in state 135 resolved using rule (factor -> ALPHANUMERIC)
WARNING: rejected rule (print_help -> ALPHANUMERIC) in state 135
WARNING: reduce/reduce conflict in state 136 resolved using rule (factor -> idCall)
WARNING: rejected rule (print_help -> idCall) in state 136
WARNING: reduce/reduce conflict in state 137 resolved using rule (factor -> functionCall)
WARNING: rejected rule (print_help -> functionCall) in state 137
WARNING: reduce/reduce conflict in state 153 resolved using rule (statements -> <empty>)
WARNING: rejected rule (statement -> <empty>) in state 153
WARNING: Rule (statement -> <empty>) is never reduced
WARNING: Rule (print_help -> ALPHANUMERIC) is never reduced
WARNING: Rule (print_help -> idCall) is never reduced
WARNING: Rule (print_help -> functionCall) is never reduced
