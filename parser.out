Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID L_BRACK codeBlock R_BRACK
Rule 2     codeBlock -> variables functions mainBody
Rule 3     codeBlock -> variables mainBody
Rule 4     codeBlock -> functions mainBody
Rule 5     codeBlock -> mainBody
Rule 6     mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK
Rule 7     mainBody -> MAIN L_PAR R_PAR L_BRACK statements R_BRACK
Rule 8     mainBody -> MAIN L_PAR R_PAR L_BRACK R_BRACK
Rule 9     body -> L_BRACK statements R_BRACK
Rule 10    variables -> <empty>
Rule 11    variables -> VAR type ID DOT_COMMA variables
Rule 12    variables -> VAR type assignment DOT_COMMA variables
Rule 13    arrays -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
Rule 14    functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
Rule 15    functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK
Rule 16    functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK R_BRACK
Rule 17    functionsHelp -> <empty>
Rule 18    functionsHelp -> type ID
Rule 19    functionsHelp -> type ID COMMA functionsHelp2
Rule 20    functionsHelp2 -> type ID
Rule 21    functionsHelp2 -> type ID COMMA functionsHelp2
Rule 22    type -> INT
Rule 23    type -> DECIM
Rule 24    type -> BOOL
Rule 25    type -> CHAR
Rule 26    type -> STRING
Rule 27    statements -> <empty>
Rule 28    statements -> assignment DOT_COMMA
Rule 29    statements -> functionCall DOT_COMMA
Rule 30    statements -> ifBlock
Rule 31    statements -> whileBlock
Rule 32    statements -> forBlock
Rule 33    statements -> print DOT_COMMA
Rule 34    statements -> read DOT_COMMA
Rule 35    statements -> lineComment
Rule 36    statements -> arrays DOT_COMMA
Rule 37    assignment -> idCall ASSIGN megaExp
Rule 38    assignment -> idCall ASSIGN functionCall
Rule 39    assignment -> idCall INCREMENT
Rule 40    assignment -> idCall DECREMENT
Rule 41    functionCall -> ID L_PAR functionCallParams R_PAR
Rule 42    functionCallParams -> functionCallParamsOptional
Rule 43    functionCallParams -> functionCallParamsMultiple
Rule 44    functionCallParamsOptional -> <empty>
Rule 45    functionCallParamsOptional -> megaExp
Rule 46    functionCallParamsMultiple -> megaExp
Rule 47    functionCallParamsMultiple -> megaExp COMMA functionCallParamsMultiple
Rule 48    ifBlock -> IF L_PAR megaExp R_PAR body optionalElse
Rule 49    optionalElse -> <empty>
Rule 50    optionalElse -> ELSE body
Rule 51    whileBlock -> WHILE L_PAR megaExp R_PAR body
Rule 52    forBlock -> FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
Rule 53    optionalAssign -> <empty>
Rule 54    optionalAssign -> assignment
Rule 55    megaExp -> superExp
Rule 56    megaExp -> superExp AND superExp
Rule 57    megaExp -> superExp OR superExp
Rule 58    superExp -> exp
Rule 59    superExp -> exp MORE_THAN exp
Rule 60    superExp -> exp LESS_THAN exp
Rule 61    superExp -> exp MORE_EQUAL exp
Rule 62    superExp -> exp LESS_EQUAL exp
Rule 63    superExp -> exp EQUAL exp
Rule 64    superExp -> exp NOT_EQUAL exp
Rule 65    exp -> term
Rule 66    exp -> term PLUS term
Rule 67    exp -> term MINUS term
Rule 68    term -> factor
Rule 69    term -> factor TIMES factor
Rule 70    term -> factor DIVIDE factor
Rule 71    term -> factor MOD factor
Rule 72    factor -> NUMBER
Rule 73    factor -> ALPHANUMERIC
Rule 74    factor -> CHARACTER
Rule 75    factor -> BOOLEAN
Rule 76    factor -> idCall
Rule 77    factor -> L_PAR megaExp R_PAR
Rule 78    factor -> functionCall
Rule 79    idCall -> ID
Rule 80    idCall -> ID L_KEY exp R_KEY
Rule 81    print -> PRINT L_PAR print_help ALPHANUMERIC R_PAR
Rule 82    print_help -> <empty>
Rule 83    print_help -> MOD idCall print_help2
Rule 84    print_help2 -> <empty>
Rule 85    print_help2 -> COMMA MOD idCall print_help2
Rule 86    read -> READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR
Rule 87    readHelp -> <empty>
Rule 88    readHelp -> MOD type readHelp
Rule 89    readHelp2 -> <empty>
Rule 90    readHelp2 -> COMMA idCall readHelp2
Rule 91    lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE

Terminals, with rules where they appear

ALPHANUMERIC         : 73 81 91
AND                  : 56
ASSIGN               : 37 38
BOOL                 : 24
BOOLEAN              : 75
CHAR                 : 25
CHARACTER            : 74
COMMA                : 19 21 47 85 86 90
COMMENT_LINE         : 91
DECIM                : 23
DECREMENT            : 40
DIVIDE               : 70
DOT_COMMA            : 11 12 13 28 29 33 34 36 52 52
ELSE                 : 50
END_LINE             : 91
EQUAL                : 63
FOR                  : 52
FUNCTION             : 14 15 16
ID                   : 1 11 13 14 15 16 18 19 20 21 41 79 80
IF                   : 48
INCREMENT            : 39
INT                  : 22
LESS_EQUAL           : 62
LESS_THAN            : 60
L_BRACK              : 1 6 7 8 9 14 15 16
L_KEY                : 13 80
L_PAR                : 6 7 8 14 15 16 41 48 51 52 77 81 86
MAIN                 : 6 7 8
MINUS                : 67
MOD                  : 71 83 85 86 88
MORE_EQUAL           : 61
MORE_THAN            : 59
NOT_EQUAL            : 64
NUMBER               : 13 72
OR                   : 57
PLUS                 : 66
PRINT                : 81
PROGRAM              : 1
READ                 : 86
R_BRACK              : 1 6 7 8 9 14 15 16
R_KEY                : 13 80
R_PAR                : 6 7 8 14 15 16 41 48 51 52 77 81 86
STRING               : 26
TIMES                : 69
VAR                  : 11 12 13
WHILE                : 51
error                : 

Nonterminals, with rules where they appear

arrays               : 36
assignment           : 12 28 54
body                 : 48 50 51 52
codeBlock            : 1
exp                  : 58 59 59 60 60 61 61 62 62 63 63 64 64 80
factor               : 68 69 69 70 70 71 71
forBlock             : 32
functionCall         : 29 38 78
functionCallParams   : 41
functionCallParamsMultiple : 43 47
functionCallParamsOptional : 42
functions            : 2 4
functionsHelp        : 14 15 16
functionsHelp2       : 19 21
idCall               : 37 38 39 40 52 76 83 85 86 90
ifBlock              : 30
lineComment          : 35
mainBody             : 2 3 4 5
megaExp              : 37 45 46 47 48 51 52 77
optionalAssign       : 52
optionalElse         : 48
print                : 33
print_help           : 81
print_help2          : 83 85
program              : 0
read                 : 34
readHelp             : 86 88
readHelp2            : 86 90
statements           : 6 7 9 14 15
superExp             : 55 56 56 57 57
term                 : 65 66 66 67 67
type                 : 11 12 13 14 15 16 18 19 20 21 86 88
variables            : 2 3 6 11 12 14
whileBlock           : 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID L_BRACK codeBlock R_BRACK

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID L_BRACK codeBlock R_BRACK

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . L_BRACK codeBlock R_BRACK

    L_BRACK         shift and go to state 4


state 4

    (1) program -> PROGRAM ID L_BRACK . codeBlock R_BRACK
    (2) codeBlock -> . variables functions mainBody
    (3) codeBlock -> . variables mainBody
    (4) codeBlock -> . functions mainBody
    (5) codeBlock -> . mainBody
    (10) variables -> .
    (11) variables -> . VAR type ID DOT_COMMA variables
    (12) variables -> . VAR type assignment DOT_COMMA variables
    (14) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (15) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK
    (16) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK R_BRACK
    (6) mainBody -> . MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK
    (7) mainBody -> . MAIN L_PAR R_PAR L_BRACK statements R_BRACK
    (8) mainBody -> . MAIN L_PAR R_PAR L_BRACK R_BRACK

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 9
    FUNCTION        shift and go to state 10
    MAIN            shift and go to state 11

  ! FUNCTION        [ reduce using rule 10 (variables -> .) ]
  ! MAIN            [ reduce using rule 10 (variables -> .) ]

    codeBlock                      shift and go to state 5
    variables                      shift and go to state 6
    functions                      shift and go to state 7
    mainBody                       shift and go to state 8

state 5

    (1) program -> PROGRAM ID L_BRACK codeBlock . R_BRACK

    R_BRACK         shift and go to state 12


state 6

    (2) codeBlock -> variables . functions mainBody
    (3) codeBlock -> variables . mainBody
    (14) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (15) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK
    (16) functions -> . FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK R_BRACK
    (6) mainBody -> . MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK
    (7) mainBody -> . MAIN L_PAR R_PAR L_BRACK statements R_BRACK
    (8) mainBody -> . MAIN L_PAR R_PAR L_BRACK R_BRACK

    FUNCTION        shift and go to state 10
    MAIN            shift and go to state 11

    functions                      shift and go to state 13
    mainBody                       shift and go to state 14

state 7

    (4) codeBlock -> functions . mainBody
    (6) mainBody -> . MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK
    (7) mainBody -> . MAIN L_PAR R_PAR L_BRACK statements R_BRACK
    (8) mainBody -> . MAIN L_PAR R_PAR L_BRACK R_BRACK

    MAIN            shift and go to state 11

    mainBody                       shift and go to state 15

state 8

    (5) codeBlock -> mainBody .

    R_BRACK         reduce using rule 5 (codeBlock -> mainBody .)


state 9

    (11) variables -> VAR . type ID DOT_COMMA variables
    (12) variables -> VAR . type assignment DOT_COMMA variables
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 16

state 10

    (14) functions -> FUNCTION . type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (15) functions -> FUNCTION . type ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK
    (16) functions -> FUNCTION . type ID L_PAR functionsHelp R_PAR L_BRACK R_BRACK
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 22

state 11

    (6) mainBody -> MAIN . L_PAR R_PAR L_BRACK variables statements R_BRACK
    (7) mainBody -> MAIN . L_PAR R_PAR L_BRACK statements R_BRACK
    (8) mainBody -> MAIN . L_PAR R_PAR L_BRACK R_BRACK

    L_PAR           shift and go to state 23


state 12

    (1) program -> PROGRAM ID L_BRACK codeBlock R_BRACK .

    $end            reduce using rule 1 (program -> PROGRAM ID L_BRACK codeBlock R_BRACK .)


state 13

    (2) codeBlock -> variables functions . mainBody
    (6) mainBody -> . MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK
    (7) mainBody -> . MAIN L_PAR R_PAR L_BRACK statements R_BRACK
    (8) mainBody -> . MAIN L_PAR R_PAR L_BRACK R_BRACK

    MAIN            shift and go to state 11

    mainBody                       shift and go to state 24

state 14

    (3) codeBlock -> variables mainBody .

    R_BRACK         reduce using rule 3 (codeBlock -> variables mainBody .)


state 15

    (4) codeBlock -> functions mainBody .

    R_BRACK         reduce using rule 4 (codeBlock -> functions mainBody .)


state 16

    (11) variables -> VAR type . ID DOT_COMMA variables
    (12) variables -> VAR type . assignment DOT_COMMA variables
    (37) assignment -> . idCall ASSIGN megaExp
    (38) assignment -> . idCall ASSIGN functionCall
    (39) assignment -> . idCall INCREMENT
    (40) assignment -> . idCall DECREMENT
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 25

    assignment                     shift and go to state 26
    idCall                         shift and go to state 27

state 17

    (22) type -> INT .

    ID              reduce using rule 22 (type -> INT .)
    COMMA           reduce using rule 22 (type -> INT .)
    MOD             reduce using rule 22 (type -> INT .)


state 18

    (23) type -> DECIM .

    ID              reduce using rule 23 (type -> DECIM .)
    COMMA           reduce using rule 23 (type -> DECIM .)
    MOD             reduce using rule 23 (type -> DECIM .)


state 19

    (24) type -> BOOL .

    ID              reduce using rule 24 (type -> BOOL .)
    COMMA           reduce using rule 24 (type -> BOOL .)
    MOD             reduce using rule 24 (type -> BOOL .)


state 20

    (25) type -> CHAR .

    ID              reduce using rule 25 (type -> CHAR .)
    COMMA           reduce using rule 25 (type -> CHAR .)
    MOD             reduce using rule 25 (type -> CHAR .)


state 21

    (26) type -> STRING .

    ID              reduce using rule 26 (type -> STRING .)
    COMMA           reduce using rule 26 (type -> STRING .)
    MOD             reduce using rule 26 (type -> STRING .)


state 22

    (14) functions -> FUNCTION type . ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (15) functions -> FUNCTION type . ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK
    (16) functions -> FUNCTION type . ID L_PAR functionsHelp R_PAR L_BRACK R_BRACK

    ID              shift and go to state 28


state 23

    (6) mainBody -> MAIN L_PAR . R_PAR L_BRACK variables statements R_BRACK
    (7) mainBody -> MAIN L_PAR . R_PAR L_BRACK statements R_BRACK
    (8) mainBody -> MAIN L_PAR . R_PAR L_BRACK R_BRACK

    R_PAR           shift and go to state 29


state 24

    (2) codeBlock -> variables functions mainBody .

    R_BRACK         reduce using rule 2 (codeBlock -> variables functions mainBody .)


state 25

    (11) variables -> VAR type ID . DOT_COMMA variables
    (79) idCall -> ID .
    (80) idCall -> ID . L_KEY exp R_KEY

    DOT_COMMA       shift and go to state 30
    ASSIGN          reduce using rule 79 (idCall -> ID .)
    INCREMENT       reduce using rule 79 (idCall -> ID .)
    DECREMENT       reduce using rule 79 (idCall -> ID .)
    L_KEY           shift and go to state 31


state 26

    (12) variables -> VAR type assignment . DOT_COMMA variables

    DOT_COMMA       shift and go to state 32


state 27

    (37) assignment -> idCall . ASSIGN megaExp
    (38) assignment -> idCall . ASSIGN functionCall
    (39) assignment -> idCall . INCREMENT
    (40) assignment -> idCall . DECREMENT

    ASSIGN          shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35


state 28

    (14) functions -> FUNCTION type ID . L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (15) functions -> FUNCTION type ID . L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK
    (16) functions -> FUNCTION type ID . L_PAR functionsHelp R_PAR L_BRACK R_BRACK

    L_PAR           shift and go to state 36


state 29

    (6) mainBody -> MAIN L_PAR R_PAR . L_BRACK variables statements R_BRACK
    (7) mainBody -> MAIN L_PAR R_PAR . L_BRACK statements R_BRACK
    (8) mainBody -> MAIN L_PAR R_PAR . L_BRACK R_BRACK

    L_BRACK         shift and go to state 37


state 30

    (11) variables -> VAR type ID DOT_COMMA . variables
    (10) variables -> .
    (11) variables -> . VAR type ID DOT_COMMA variables
    (12) variables -> . VAR type assignment DOT_COMMA variables

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 10 (variables -> .)
    MAIN            reduce using rule 10 (variables -> .)
    ID              reduce using rule 10 (variables -> .)
    IF              reduce using rule 10 (variables -> .)
    WHILE           reduce using rule 10 (variables -> .)
    FOR             reduce using rule 10 (variables -> .)
    PRINT           reduce using rule 10 (variables -> .)
    READ            reduce using rule 10 (variables -> .)
    COMMENT_LINE    reduce using rule 10 (variables -> .)
    R_BRACK         reduce using rule 10 (variables -> .)
    VAR             shift and go to state 9

  ! VAR             [ reduce using rule 10 (variables -> .) ]

    variables                      shift and go to state 38

state 31

    (80) idCall -> ID L_KEY . exp R_KEY
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    exp                            shift and go to state 40
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 32

    (12) variables -> VAR type assignment DOT_COMMA . variables
    (10) variables -> .
    (11) variables -> . VAR type ID DOT_COMMA variables
    (12) variables -> . VAR type assignment DOT_COMMA variables

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 10 (variables -> .)
    MAIN            reduce using rule 10 (variables -> .)
    ID              reduce using rule 10 (variables -> .)
    IF              reduce using rule 10 (variables -> .)
    WHILE           reduce using rule 10 (variables -> .)
    FOR             reduce using rule 10 (variables -> .)
    PRINT           reduce using rule 10 (variables -> .)
    READ            reduce using rule 10 (variables -> .)
    COMMENT_LINE    reduce using rule 10 (variables -> .)
    R_BRACK         reduce using rule 10 (variables -> .)
    VAR             shift and go to state 9

  ! VAR             [ reduce using rule 10 (variables -> .) ]

    variables                      shift and go to state 50

state 33

    (37) assignment -> idCall ASSIGN . megaExp
    (38) assignment -> idCall ASSIGN . functionCall
    (55) megaExp -> . superExp
    (56) megaExp -> . superExp AND superExp
    (57) megaExp -> . superExp OR superExp
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 54
    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48

    idCall                         shift and go to state 47
    megaExp                        shift and go to state 51
    functionCall                   shift and go to state 52
    superExp                       shift and go to state 53
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42

state 34

    (39) assignment -> idCall INCREMENT .

    DOT_COMMA       reduce using rule 39 (assignment -> idCall INCREMENT .)
    R_PAR           reduce using rule 39 (assignment -> idCall INCREMENT .)


state 35

    (40) assignment -> idCall DECREMENT .

    DOT_COMMA       reduce using rule 40 (assignment -> idCall DECREMENT .)
    R_PAR           reduce using rule 40 (assignment -> idCall DECREMENT .)


state 36

    (14) functions -> FUNCTION type ID L_PAR . functionsHelp R_PAR L_BRACK variables statements R_BRACK
    (15) functions -> FUNCTION type ID L_PAR . functionsHelp R_PAR L_BRACK statements R_BRACK
    (16) functions -> FUNCTION type ID L_PAR . functionsHelp R_PAR L_BRACK R_BRACK
    (17) functionsHelp -> .
    (18) functionsHelp -> . type ID
    (19) functionsHelp -> . type ID COMMA functionsHelp2
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    R_PAR           reduce using rule 17 (functionsHelp -> .)
    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 56
    functionsHelp                  shift and go to state 57

state 37

    (6) mainBody -> MAIN L_PAR R_PAR L_BRACK . variables statements R_BRACK
    (7) mainBody -> MAIN L_PAR R_PAR L_BRACK . statements R_BRACK
    (8) mainBody -> MAIN L_PAR R_PAR L_BRACK . R_BRACK
    (10) variables -> .
    (11) variables -> . VAR type ID DOT_COMMA variables
    (12) variables -> . VAR type assignment DOT_COMMA variables
    (27) statements -> .
    (28) statements -> . assignment DOT_COMMA
    (29) statements -> . functionCall DOT_COMMA
    (30) statements -> . ifBlock
    (31) statements -> . whileBlock
    (32) statements -> . forBlock
    (33) statements -> . print DOT_COMMA
    (34) statements -> . read DOT_COMMA
    (35) statements -> . lineComment
    (36) statements -> . arrays DOT_COMMA
    (37) assignment -> . idCall ASSIGN megaExp
    (38) assignment -> . idCall ASSIGN functionCall
    (39) assignment -> . idCall INCREMENT
    (40) assignment -> . idCall DECREMENT
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR
    (48) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (51) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (52) forBlock -> . FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (81) print -> . PRINT L_PAR print_help ALPHANUMERIC R_PAR
    (86) read -> . READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR
    (91) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (13) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

  ! shift/reduce conflict for R_BRACK resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for R_BRACK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
    R_BRACK         shift and go to state 60
    VAR             shift and go to state 61
    ID              shift and go to state 54
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    COMMENT_LINE    shift and go to state 76

  ! ID              [ reduce using rule 10 (variables -> .) ]
  ! IF              [ reduce using rule 10 (variables -> .) ]
  ! WHILE           [ reduce using rule 10 (variables -> .) ]
  ! FOR             [ reduce using rule 10 (variables -> .) ]
  ! PRINT           [ reduce using rule 10 (variables -> .) ]
  ! READ            [ reduce using rule 10 (variables -> .) ]
  ! COMMENT_LINE    [ reduce using rule 10 (variables -> .) ]
  ! VAR             [ reduce using rule 10 (variables -> .) ]
  ! R_BRACK         [ reduce using rule 10 (variables -> .) ]
  ! R_BRACK         [ reduce using rule 27 (statements -> .) ]

    variables                      shift and go to state 58
    statements                     shift and go to state 59
    assignment                     shift and go to state 62
    functionCall                   shift and go to state 63
    ifBlock                        shift and go to state 64
    whileBlock                     shift and go to state 65
    forBlock                       shift and go to state 66
    print                          shift and go to state 67
    read                           shift and go to state 68
    lineComment                    shift and go to state 69
    arrays                         shift and go to state 70
    idCall                         shift and go to state 27

state 38

    (11) variables -> VAR type ID DOT_COMMA variables .

    FUNCTION        reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    MAIN            reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    ID              reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    IF              reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    WHILE           reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    FOR             reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    PRINT           reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    READ            reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    VAR             reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)
    R_BRACK         reduce using rule 11 (variables -> VAR type ID DOT_COMMA variables .)


state 39

    (79) idCall -> ID .
    (80) idCall -> ID . L_KEY exp R_KEY
    (41) functionCall -> ID . L_PAR functionCallParams R_PAR

    TIMES           reduce using rule 79 (idCall -> ID .)
    DIVIDE          reduce using rule 79 (idCall -> ID .)
    MOD             reduce using rule 79 (idCall -> ID .)
    PLUS            reduce using rule 79 (idCall -> ID .)
    MINUS           reduce using rule 79 (idCall -> ID .)
    R_KEY           reduce using rule 79 (idCall -> ID .)
    MORE_THAN       reduce using rule 79 (idCall -> ID .)
    LESS_THAN       reduce using rule 79 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 79 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 79 (idCall -> ID .)
    EQUAL           reduce using rule 79 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 79 (idCall -> ID .)
    AND             reduce using rule 79 (idCall -> ID .)
    OR              reduce using rule 79 (idCall -> ID .)
    R_PAR           reduce using rule 79 (idCall -> ID .)
    COMMA           reduce using rule 79 (idCall -> ID .)
    DOT_COMMA       reduce using rule 79 (idCall -> ID .)
    L_KEY           shift and go to state 31
    L_PAR           shift and go to state 77


state 40

    (80) idCall -> ID L_KEY exp . R_KEY

    R_KEY           shift and go to state 78


state 41

    (65) exp -> term .
    (66) exp -> term . PLUS term
    (67) exp -> term . MINUS term

    R_KEY           reduce using rule 65 (exp -> term .)
    MORE_THAN       reduce using rule 65 (exp -> term .)
    LESS_THAN       reduce using rule 65 (exp -> term .)
    MORE_EQUAL      reduce using rule 65 (exp -> term .)
    LESS_EQUAL      reduce using rule 65 (exp -> term .)
    EQUAL           reduce using rule 65 (exp -> term .)
    NOT_EQUAL       reduce using rule 65 (exp -> term .)
    AND             reduce using rule 65 (exp -> term .)
    OR              reduce using rule 65 (exp -> term .)
    DOT_COMMA       reduce using rule 65 (exp -> term .)
    R_PAR           reduce using rule 65 (exp -> term .)
    COMMA           reduce using rule 65 (exp -> term .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80


state 42

    (68) term -> factor .
    (69) term -> factor . TIMES factor
    (70) term -> factor . DIVIDE factor
    (71) term -> factor . MOD factor

    PLUS            reduce using rule 68 (term -> factor .)
    MINUS           reduce using rule 68 (term -> factor .)
    R_KEY           reduce using rule 68 (term -> factor .)
    MORE_THAN       reduce using rule 68 (term -> factor .)
    LESS_THAN       reduce using rule 68 (term -> factor .)
    MORE_EQUAL      reduce using rule 68 (term -> factor .)
    LESS_EQUAL      reduce using rule 68 (term -> factor .)
    EQUAL           reduce using rule 68 (term -> factor .)
    NOT_EQUAL       reduce using rule 68 (term -> factor .)
    AND             reduce using rule 68 (term -> factor .)
    OR              reduce using rule 68 (term -> factor .)
    DOT_COMMA       reduce using rule 68 (term -> factor .)
    R_PAR           reduce using rule 68 (term -> factor .)
    COMMA           reduce using rule 68 (term -> factor .)
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83


state 43

    (72) factor -> NUMBER .

    TIMES           reduce using rule 72 (factor -> NUMBER .)
    DIVIDE          reduce using rule 72 (factor -> NUMBER .)
    MOD             reduce using rule 72 (factor -> NUMBER .)
    PLUS            reduce using rule 72 (factor -> NUMBER .)
    MINUS           reduce using rule 72 (factor -> NUMBER .)
    R_KEY           reduce using rule 72 (factor -> NUMBER .)
    MORE_THAN       reduce using rule 72 (factor -> NUMBER .)
    LESS_THAN       reduce using rule 72 (factor -> NUMBER .)
    MORE_EQUAL      reduce using rule 72 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 72 (factor -> NUMBER .)
    EQUAL           reduce using rule 72 (factor -> NUMBER .)
    NOT_EQUAL       reduce using rule 72 (factor -> NUMBER .)
    AND             reduce using rule 72 (factor -> NUMBER .)
    OR              reduce using rule 72 (factor -> NUMBER .)
    DOT_COMMA       reduce using rule 72 (factor -> NUMBER .)
    R_PAR           reduce using rule 72 (factor -> NUMBER .)
    COMMA           reduce using rule 72 (factor -> NUMBER .)


state 44

    (73) factor -> ALPHANUMERIC .

    TIMES           reduce using rule 73 (factor -> ALPHANUMERIC .)
    DIVIDE          reduce using rule 73 (factor -> ALPHANUMERIC .)
    MOD             reduce using rule 73 (factor -> ALPHANUMERIC .)
    PLUS            reduce using rule 73 (factor -> ALPHANUMERIC .)
    MINUS           reduce using rule 73 (factor -> ALPHANUMERIC .)
    R_KEY           reduce using rule 73 (factor -> ALPHANUMERIC .)
    MORE_THAN       reduce using rule 73 (factor -> ALPHANUMERIC .)
    LESS_THAN       reduce using rule 73 (factor -> ALPHANUMERIC .)
    MORE_EQUAL      reduce using rule 73 (factor -> ALPHANUMERIC .)
    LESS_EQUAL      reduce using rule 73 (factor -> ALPHANUMERIC .)
    EQUAL           reduce using rule 73 (factor -> ALPHANUMERIC .)
    NOT_EQUAL       reduce using rule 73 (factor -> ALPHANUMERIC .)
    AND             reduce using rule 73 (factor -> ALPHANUMERIC .)
    OR              reduce using rule 73 (factor -> ALPHANUMERIC .)
    DOT_COMMA       reduce using rule 73 (factor -> ALPHANUMERIC .)
    R_PAR           reduce using rule 73 (factor -> ALPHANUMERIC .)
    COMMA           reduce using rule 73 (factor -> ALPHANUMERIC .)


state 45

    (74) factor -> CHARACTER .

    TIMES           reduce using rule 74 (factor -> CHARACTER .)
    DIVIDE          reduce using rule 74 (factor -> CHARACTER .)
    MOD             reduce using rule 74 (factor -> CHARACTER .)
    PLUS            reduce using rule 74 (factor -> CHARACTER .)
    MINUS           reduce using rule 74 (factor -> CHARACTER .)
    R_KEY           reduce using rule 74 (factor -> CHARACTER .)
    MORE_THAN       reduce using rule 74 (factor -> CHARACTER .)
    LESS_THAN       reduce using rule 74 (factor -> CHARACTER .)
    MORE_EQUAL      reduce using rule 74 (factor -> CHARACTER .)
    LESS_EQUAL      reduce using rule 74 (factor -> CHARACTER .)
    EQUAL           reduce using rule 74 (factor -> CHARACTER .)
    NOT_EQUAL       reduce using rule 74 (factor -> CHARACTER .)
    AND             reduce using rule 74 (factor -> CHARACTER .)
    OR              reduce using rule 74 (factor -> CHARACTER .)
    DOT_COMMA       reduce using rule 74 (factor -> CHARACTER .)
    R_PAR           reduce using rule 74 (factor -> CHARACTER .)
    COMMA           reduce using rule 74 (factor -> CHARACTER .)


state 46

    (75) factor -> BOOLEAN .

    TIMES           reduce using rule 75 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 75 (factor -> BOOLEAN .)
    MOD             reduce using rule 75 (factor -> BOOLEAN .)
    PLUS            reduce using rule 75 (factor -> BOOLEAN .)
    MINUS           reduce using rule 75 (factor -> BOOLEAN .)
    R_KEY           reduce using rule 75 (factor -> BOOLEAN .)
    MORE_THAN       reduce using rule 75 (factor -> BOOLEAN .)
    LESS_THAN       reduce using rule 75 (factor -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 75 (factor -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 75 (factor -> BOOLEAN .)
    EQUAL           reduce using rule 75 (factor -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 75 (factor -> BOOLEAN .)
    AND             reduce using rule 75 (factor -> BOOLEAN .)
    OR              reduce using rule 75 (factor -> BOOLEAN .)
    DOT_COMMA       reduce using rule 75 (factor -> BOOLEAN .)
    R_PAR           reduce using rule 75 (factor -> BOOLEAN .)
    COMMA           reduce using rule 75 (factor -> BOOLEAN .)


state 47

    (76) factor -> idCall .

    TIMES           reduce using rule 76 (factor -> idCall .)
    DIVIDE          reduce using rule 76 (factor -> idCall .)
    MOD             reduce using rule 76 (factor -> idCall .)
    PLUS            reduce using rule 76 (factor -> idCall .)
    MINUS           reduce using rule 76 (factor -> idCall .)
    R_KEY           reduce using rule 76 (factor -> idCall .)
    MORE_THAN       reduce using rule 76 (factor -> idCall .)
    LESS_THAN       reduce using rule 76 (factor -> idCall .)
    MORE_EQUAL      reduce using rule 76 (factor -> idCall .)
    LESS_EQUAL      reduce using rule 76 (factor -> idCall .)
    EQUAL           reduce using rule 76 (factor -> idCall .)
    NOT_EQUAL       reduce using rule 76 (factor -> idCall .)
    AND             reduce using rule 76 (factor -> idCall .)
    OR              reduce using rule 76 (factor -> idCall .)
    DOT_COMMA       reduce using rule 76 (factor -> idCall .)
    R_PAR           reduce using rule 76 (factor -> idCall .)
    COMMA           reduce using rule 76 (factor -> idCall .)


state 48

    (77) factor -> L_PAR . megaExp R_PAR
    (55) megaExp -> . superExp
    (56) megaExp -> . superExp AND superExp
    (57) megaExp -> . superExp OR superExp
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    megaExp                        shift and go to state 84
    superExp                       shift and go to state 53
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 49

    (78) factor -> functionCall .

    TIMES           reduce using rule 78 (factor -> functionCall .)
    DIVIDE          reduce using rule 78 (factor -> functionCall .)
    MOD             reduce using rule 78 (factor -> functionCall .)
    PLUS            reduce using rule 78 (factor -> functionCall .)
    MINUS           reduce using rule 78 (factor -> functionCall .)
    R_KEY           reduce using rule 78 (factor -> functionCall .)
    MORE_THAN       reduce using rule 78 (factor -> functionCall .)
    LESS_THAN       reduce using rule 78 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 78 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 78 (factor -> functionCall .)
    EQUAL           reduce using rule 78 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 78 (factor -> functionCall .)
    AND             reduce using rule 78 (factor -> functionCall .)
    OR              reduce using rule 78 (factor -> functionCall .)
    R_PAR           reduce using rule 78 (factor -> functionCall .)
    COMMA           reduce using rule 78 (factor -> functionCall .)
    DOT_COMMA       reduce using rule 78 (factor -> functionCall .)


state 50

    (12) variables -> VAR type assignment DOT_COMMA variables .

    FUNCTION        reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    MAIN            reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    ID              reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    IF              reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    WHILE           reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    FOR             reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    PRINT           reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    READ            reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    COMMENT_LINE    reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    VAR             reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)
    R_BRACK         reduce using rule 12 (variables -> VAR type assignment DOT_COMMA variables .)


state 51

    (37) assignment -> idCall ASSIGN megaExp .

    DOT_COMMA       reduce using rule 37 (assignment -> idCall ASSIGN megaExp .)
    R_PAR           reduce using rule 37 (assignment -> idCall ASSIGN megaExp .)


state 52

    (38) assignment -> idCall ASSIGN functionCall .
    (78) factor -> functionCall .

  ! reduce/reduce conflict for DOT_COMMA resolved using rule 38 (assignment -> idCall ASSIGN functionCall .)
  ! reduce/reduce conflict for R_PAR resolved using rule 38 (assignment -> idCall ASSIGN functionCall .)
    DOT_COMMA       reduce using rule 38 (assignment -> idCall ASSIGN functionCall .)
    R_PAR           reduce using rule 38 (assignment -> idCall ASSIGN functionCall .)
    TIMES           reduce using rule 78 (factor -> functionCall .)
    DIVIDE          reduce using rule 78 (factor -> functionCall .)
    MOD             reduce using rule 78 (factor -> functionCall .)
    PLUS            reduce using rule 78 (factor -> functionCall .)
    MINUS           reduce using rule 78 (factor -> functionCall .)
    MORE_THAN       reduce using rule 78 (factor -> functionCall .)
    LESS_THAN       reduce using rule 78 (factor -> functionCall .)
    MORE_EQUAL      reduce using rule 78 (factor -> functionCall .)
    LESS_EQUAL      reduce using rule 78 (factor -> functionCall .)
    EQUAL           reduce using rule 78 (factor -> functionCall .)
    NOT_EQUAL       reduce using rule 78 (factor -> functionCall .)
    AND             reduce using rule 78 (factor -> functionCall .)
    OR              reduce using rule 78 (factor -> functionCall .)

  ! DOT_COMMA       [ reduce using rule 78 (factor -> functionCall .) ]
  ! R_PAR           [ reduce using rule 78 (factor -> functionCall .) ]


state 53

    (55) megaExp -> superExp .
    (56) megaExp -> superExp . AND superExp
    (57) megaExp -> superExp . OR superExp

    DOT_COMMA       reduce using rule 55 (megaExp -> superExp .)
    R_PAR           reduce using rule 55 (megaExp -> superExp .)
    COMMA           reduce using rule 55 (megaExp -> superExp .)
    AND             shift and go to state 85
    OR              shift and go to state 86


state 54

    (41) functionCall -> ID . L_PAR functionCallParams R_PAR
    (79) idCall -> ID .
    (80) idCall -> ID . L_KEY exp R_KEY

    L_PAR           shift and go to state 77
    TIMES           reduce using rule 79 (idCall -> ID .)
    DIVIDE          reduce using rule 79 (idCall -> ID .)
    MOD             reduce using rule 79 (idCall -> ID .)
    PLUS            reduce using rule 79 (idCall -> ID .)
    MINUS           reduce using rule 79 (idCall -> ID .)
    MORE_THAN       reduce using rule 79 (idCall -> ID .)
    LESS_THAN       reduce using rule 79 (idCall -> ID .)
    MORE_EQUAL      reduce using rule 79 (idCall -> ID .)
    LESS_EQUAL      reduce using rule 79 (idCall -> ID .)
    EQUAL           reduce using rule 79 (idCall -> ID .)
    NOT_EQUAL       reduce using rule 79 (idCall -> ID .)
    AND             reduce using rule 79 (idCall -> ID .)
    OR              reduce using rule 79 (idCall -> ID .)
    DOT_COMMA       reduce using rule 79 (idCall -> ID .)
    R_PAR           reduce using rule 79 (idCall -> ID .)
    ASSIGN          reduce using rule 79 (idCall -> ID .)
    INCREMENT       reduce using rule 79 (idCall -> ID .)
    DECREMENT       reduce using rule 79 (idCall -> ID .)
    L_KEY           shift and go to state 31


state 55

    (58) superExp -> exp .
    (59) superExp -> exp . MORE_THAN exp
    (60) superExp -> exp . LESS_THAN exp
    (61) superExp -> exp . MORE_EQUAL exp
    (62) superExp -> exp . LESS_EQUAL exp
    (63) superExp -> exp . EQUAL exp
    (64) superExp -> exp . NOT_EQUAL exp

    AND             reduce using rule 58 (superExp -> exp .)
    OR              reduce using rule 58 (superExp -> exp .)
    DOT_COMMA       reduce using rule 58 (superExp -> exp .)
    R_PAR           reduce using rule 58 (superExp -> exp .)
    COMMA           reduce using rule 58 (superExp -> exp .)
    MORE_THAN       shift and go to state 87
    LESS_THAN       shift and go to state 88
    MORE_EQUAL      shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    EQUAL           shift and go to state 91
    NOT_EQUAL       shift and go to state 92


state 56

    (18) functionsHelp -> type . ID
    (19) functionsHelp -> type . ID COMMA functionsHelp2

    ID              shift and go to state 93


state 57

    (14) functions -> FUNCTION type ID L_PAR functionsHelp . R_PAR L_BRACK variables statements R_BRACK
    (15) functions -> FUNCTION type ID L_PAR functionsHelp . R_PAR L_BRACK statements R_BRACK
    (16) functions -> FUNCTION type ID L_PAR functionsHelp . R_PAR L_BRACK R_BRACK

    R_PAR           shift and go to state 94


state 58

    (6) mainBody -> MAIN L_PAR R_PAR L_BRACK variables . statements R_BRACK
    (27) statements -> .
    (28) statements -> . assignment DOT_COMMA
    (29) statements -> . functionCall DOT_COMMA
    (30) statements -> . ifBlock
    (31) statements -> . whileBlock
    (32) statements -> . forBlock
    (33) statements -> . print DOT_COMMA
    (34) statements -> . read DOT_COMMA
    (35) statements -> . lineComment
    (36) statements -> . arrays DOT_COMMA
    (37) assignment -> . idCall ASSIGN megaExp
    (38) assignment -> . idCall ASSIGN functionCall
    (39) assignment -> . idCall INCREMENT
    (40) assignment -> . idCall DECREMENT
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR
    (48) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (51) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (52) forBlock -> . FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (81) print -> . PRINT L_PAR print_help ALPHANUMERIC R_PAR
    (86) read -> . READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR
    (91) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (13) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    R_BRACK         reduce using rule 27 (statements -> .)
    ID              shift and go to state 54
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    COMMENT_LINE    shift and go to state 76
    VAR             shift and go to state 96

    statements                     shift and go to state 95
    assignment                     shift and go to state 62
    functionCall                   shift and go to state 63
    ifBlock                        shift and go to state 64
    whileBlock                     shift and go to state 65
    forBlock                       shift and go to state 66
    print                          shift and go to state 67
    read                           shift and go to state 68
    lineComment                    shift and go to state 69
    arrays                         shift and go to state 70
    idCall                         shift and go to state 27

state 59

    (7) mainBody -> MAIN L_PAR R_PAR L_BRACK statements . R_BRACK

    R_BRACK         shift and go to state 97


state 60

    (8) mainBody -> MAIN L_PAR R_PAR L_BRACK R_BRACK .

    R_BRACK         reduce using rule 8 (mainBody -> MAIN L_PAR R_PAR L_BRACK R_BRACK .)


state 61

    (11) variables -> VAR . type ID DOT_COMMA variables
    (12) variables -> VAR . type assignment DOT_COMMA variables
    (13) arrays -> VAR . type ID L_KEY NUMBER R_KEY DOT_COMMA
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 98

state 62

    (28) statements -> assignment . DOT_COMMA

    DOT_COMMA       shift and go to state 99


state 63

    (29) statements -> functionCall . DOT_COMMA

    DOT_COMMA       shift and go to state 100


state 64

    (30) statements -> ifBlock .

    R_BRACK         reduce using rule 30 (statements -> ifBlock .)


state 65

    (31) statements -> whileBlock .

    R_BRACK         reduce using rule 31 (statements -> whileBlock .)


state 66

    (32) statements -> forBlock .

    R_BRACK         reduce using rule 32 (statements -> forBlock .)


state 67

    (33) statements -> print . DOT_COMMA

    DOT_COMMA       shift and go to state 101


state 68

    (34) statements -> read . DOT_COMMA

    DOT_COMMA       shift and go to state 102


state 69

    (35) statements -> lineComment .

    R_BRACK         reduce using rule 35 (statements -> lineComment .)


state 70

    (36) statements -> arrays . DOT_COMMA

    DOT_COMMA       shift and go to state 103


state 71

    (48) ifBlock -> IF . L_PAR megaExp R_PAR body optionalElse

    L_PAR           shift and go to state 104


state 72

    (51) whileBlock -> WHILE . L_PAR megaExp R_PAR body

    L_PAR           shift and go to state 105


state 73

    (52) forBlock -> FOR . L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body

    L_PAR           shift and go to state 106


state 74

    (81) print -> PRINT . L_PAR print_help ALPHANUMERIC R_PAR

    L_PAR           shift and go to state 107


state 75

    (86) read -> READ . L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR

    L_PAR           shift and go to state 108


state 76

    (91) lineComment -> COMMENT_LINE . ALPHANUMERIC END_LINE

    ALPHANUMERIC    shift and go to state 109


state 77

    (41) functionCall -> ID L_PAR . functionCallParams R_PAR
    (42) functionCallParams -> . functionCallParamsOptional
    (43) functionCallParams -> . functionCallParamsMultiple
    (44) functionCallParamsOptional -> .
    (45) functionCallParamsOptional -> . megaExp
    (46) functionCallParamsMultiple -> . megaExp
    (47) functionCallParamsMultiple -> . megaExp COMMA functionCallParamsMultiple
    (55) megaExp -> . superExp
    (56) megaExp -> . superExp AND superExp
    (57) megaExp -> . superExp OR superExp
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    R_PAR           reduce using rule 44 (functionCallParamsOptional -> .)
    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    functionCallParams             shift and go to state 110
    functionCallParamsOptional     shift and go to state 111
    functionCallParamsMultiple     shift and go to state 112
    megaExp                        shift and go to state 113
    superExp                       shift and go to state 53
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 78

    (80) idCall -> ID L_KEY exp R_KEY .

    ASSIGN          reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    INCREMENT       reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    DECREMENT       reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    TIMES           reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    DIVIDE          reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    MOD             reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    PLUS            reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    MINUS           reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    R_KEY           reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    MORE_THAN       reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    LESS_THAN       reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    MORE_EQUAL      reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    LESS_EQUAL      reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    EQUAL           reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    NOT_EQUAL       reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    AND             reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    OR              reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    DOT_COMMA       reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    R_PAR           reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    COMMA           reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)
    ALPHANUMERIC    reduce using rule 80 (idCall -> ID L_KEY exp R_KEY .)


state 79

    (66) exp -> term PLUS . term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    term                           shift and go to state 114
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 80

    (67) exp -> term MINUS . term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    term                           shift and go to state 115
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 81

    (69) term -> factor TIMES . factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    factor                         shift and go to state 116
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 82

    (70) term -> factor DIVIDE . factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    factor                         shift and go to state 117
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 83

    (71) term -> factor MOD . factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    factor                         shift and go to state 118
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 84

    (77) factor -> L_PAR megaExp . R_PAR

    R_PAR           shift and go to state 119


state 85

    (56) megaExp -> superExp AND . superExp
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    superExp                       shift and go to state 120
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 86

    (57) megaExp -> superExp OR . superExp
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    superExp                       shift and go to state 121
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 87

    (59) superExp -> exp MORE_THAN . exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    exp                            shift and go to state 122
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 88

    (60) superExp -> exp LESS_THAN . exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    exp                            shift and go to state 123
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 89

    (61) superExp -> exp MORE_EQUAL . exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    exp                            shift and go to state 124
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 90

    (62) superExp -> exp LESS_EQUAL . exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    exp                            shift and go to state 125
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 91

    (63) superExp -> exp EQUAL . exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    exp                            shift and go to state 126
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 92

    (64) superExp -> exp NOT_EQUAL . exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    exp                            shift and go to state 127
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 93

    (18) functionsHelp -> type ID .
    (19) functionsHelp -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 18 (functionsHelp -> type ID .)
    COMMA           shift and go to state 128


state 94

    (14) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR . L_BRACK variables statements R_BRACK
    (15) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR . L_BRACK statements R_BRACK
    (16) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR . L_BRACK R_BRACK

    L_BRACK         shift and go to state 129


state 95

    (6) mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements . R_BRACK

    R_BRACK         shift and go to state 130


state 96

    (13) arrays -> VAR . type ID L_KEY NUMBER R_KEY DOT_COMMA
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 131

state 97

    (7) mainBody -> MAIN L_PAR R_PAR L_BRACK statements R_BRACK .

    R_BRACK         reduce using rule 7 (mainBody -> MAIN L_PAR R_PAR L_BRACK statements R_BRACK .)


state 98

    (11) variables -> VAR type . ID DOT_COMMA variables
    (12) variables -> VAR type . assignment DOT_COMMA variables
    (13) arrays -> VAR type . ID L_KEY NUMBER R_KEY DOT_COMMA
    (37) assignment -> . idCall ASSIGN megaExp
    (38) assignment -> . idCall ASSIGN functionCall
    (39) assignment -> . idCall INCREMENT
    (40) assignment -> . idCall DECREMENT
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 132

    assignment                     shift and go to state 26
    idCall                         shift and go to state 27

state 99

    (28) statements -> assignment DOT_COMMA .

    R_BRACK         reduce using rule 28 (statements -> assignment DOT_COMMA .)


state 100

    (29) statements -> functionCall DOT_COMMA .

    R_BRACK         reduce using rule 29 (statements -> functionCall DOT_COMMA .)


state 101

    (33) statements -> print DOT_COMMA .

    R_BRACK         reduce using rule 33 (statements -> print DOT_COMMA .)


state 102

    (34) statements -> read DOT_COMMA .

    R_BRACK         reduce using rule 34 (statements -> read DOT_COMMA .)


state 103

    (36) statements -> arrays DOT_COMMA .

    R_BRACK         reduce using rule 36 (statements -> arrays DOT_COMMA .)


state 104

    (48) ifBlock -> IF L_PAR . megaExp R_PAR body optionalElse
    (55) megaExp -> . superExp
    (56) megaExp -> . superExp AND superExp
    (57) megaExp -> . superExp OR superExp
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    megaExp                        shift and go to state 133
    superExp                       shift and go to state 53
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 105

    (51) whileBlock -> WHILE L_PAR . megaExp R_PAR body
    (55) megaExp -> . superExp
    (56) megaExp -> . superExp AND superExp
    (57) megaExp -> . superExp OR superExp
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    megaExp                        shift and go to state 134
    superExp                       shift and go to state 53
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 106

    (52) forBlock -> FOR L_PAR . idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 136

    idCall                         shift and go to state 135

state 107

    (81) print -> PRINT L_PAR . print_help ALPHANUMERIC R_PAR
    (82) print_help -> .
    (83) print_help -> . MOD idCall print_help2

    ALPHANUMERIC    reduce using rule 82 (print_help -> .)
    MOD             shift and go to state 138

    print_help                     shift and go to state 137

state 108

    (86) read -> READ L_PAR . MOD type COMMA readHelp idCall readHelp2 R_PAR

    MOD             shift and go to state 139


state 109

    (91) lineComment -> COMMENT_LINE ALPHANUMERIC . END_LINE

    END_LINE        shift and go to state 140


state 110

    (41) functionCall -> ID L_PAR functionCallParams . R_PAR

    R_PAR           shift and go to state 141


state 111

    (42) functionCallParams -> functionCallParamsOptional .

    R_PAR           reduce using rule 42 (functionCallParams -> functionCallParamsOptional .)


state 112

    (43) functionCallParams -> functionCallParamsMultiple .

    R_PAR           reduce using rule 43 (functionCallParams -> functionCallParamsMultiple .)


state 113

    (45) functionCallParamsOptional -> megaExp .
    (46) functionCallParamsMultiple -> megaExp .
    (47) functionCallParamsMultiple -> megaExp . COMMA functionCallParamsMultiple

  ! reduce/reduce conflict for R_PAR resolved using rule 45 (functionCallParamsOptional -> megaExp .)
    R_PAR           reduce using rule 45 (functionCallParamsOptional -> megaExp .)
    COMMA           shift and go to state 142

  ! R_PAR           [ reduce using rule 46 (functionCallParamsMultiple -> megaExp .) ]


state 114

    (66) exp -> term PLUS term .

    R_KEY           reduce using rule 66 (exp -> term PLUS term .)
    MORE_THAN       reduce using rule 66 (exp -> term PLUS term .)
    LESS_THAN       reduce using rule 66 (exp -> term PLUS term .)
    MORE_EQUAL      reduce using rule 66 (exp -> term PLUS term .)
    LESS_EQUAL      reduce using rule 66 (exp -> term PLUS term .)
    EQUAL           reduce using rule 66 (exp -> term PLUS term .)
    NOT_EQUAL       reduce using rule 66 (exp -> term PLUS term .)
    AND             reduce using rule 66 (exp -> term PLUS term .)
    OR              reduce using rule 66 (exp -> term PLUS term .)
    DOT_COMMA       reduce using rule 66 (exp -> term PLUS term .)
    R_PAR           reduce using rule 66 (exp -> term PLUS term .)
    COMMA           reduce using rule 66 (exp -> term PLUS term .)


state 115

    (67) exp -> term MINUS term .

    R_KEY           reduce using rule 67 (exp -> term MINUS term .)
    MORE_THAN       reduce using rule 67 (exp -> term MINUS term .)
    LESS_THAN       reduce using rule 67 (exp -> term MINUS term .)
    MORE_EQUAL      reduce using rule 67 (exp -> term MINUS term .)
    LESS_EQUAL      reduce using rule 67 (exp -> term MINUS term .)
    EQUAL           reduce using rule 67 (exp -> term MINUS term .)
    NOT_EQUAL       reduce using rule 67 (exp -> term MINUS term .)
    AND             reduce using rule 67 (exp -> term MINUS term .)
    OR              reduce using rule 67 (exp -> term MINUS term .)
    DOT_COMMA       reduce using rule 67 (exp -> term MINUS term .)
    R_PAR           reduce using rule 67 (exp -> term MINUS term .)
    COMMA           reduce using rule 67 (exp -> term MINUS term .)


state 116

    (69) term -> factor TIMES factor .

    PLUS            reduce using rule 69 (term -> factor TIMES factor .)
    MINUS           reduce using rule 69 (term -> factor TIMES factor .)
    R_KEY           reduce using rule 69 (term -> factor TIMES factor .)
    MORE_THAN       reduce using rule 69 (term -> factor TIMES factor .)
    LESS_THAN       reduce using rule 69 (term -> factor TIMES factor .)
    MORE_EQUAL      reduce using rule 69 (term -> factor TIMES factor .)
    LESS_EQUAL      reduce using rule 69 (term -> factor TIMES factor .)
    EQUAL           reduce using rule 69 (term -> factor TIMES factor .)
    NOT_EQUAL       reduce using rule 69 (term -> factor TIMES factor .)
    AND             reduce using rule 69 (term -> factor TIMES factor .)
    OR              reduce using rule 69 (term -> factor TIMES factor .)
    DOT_COMMA       reduce using rule 69 (term -> factor TIMES factor .)
    R_PAR           reduce using rule 69 (term -> factor TIMES factor .)
    COMMA           reduce using rule 69 (term -> factor TIMES factor .)


state 117

    (70) term -> factor DIVIDE factor .

    PLUS            reduce using rule 70 (term -> factor DIVIDE factor .)
    MINUS           reduce using rule 70 (term -> factor DIVIDE factor .)
    R_KEY           reduce using rule 70 (term -> factor DIVIDE factor .)
    MORE_THAN       reduce using rule 70 (term -> factor DIVIDE factor .)
    LESS_THAN       reduce using rule 70 (term -> factor DIVIDE factor .)
    MORE_EQUAL      reduce using rule 70 (term -> factor DIVIDE factor .)
    LESS_EQUAL      reduce using rule 70 (term -> factor DIVIDE factor .)
    EQUAL           reduce using rule 70 (term -> factor DIVIDE factor .)
    NOT_EQUAL       reduce using rule 70 (term -> factor DIVIDE factor .)
    AND             reduce using rule 70 (term -> factor DIVIDE factor .)
    OR              reduce using rule 70 (term -> factor DIVIDE factor .)
    DOT_COMMA       reduce using rule 70 (term -> factor DIVIDE factor .)
    R_PAR           reduce using rule 70 (term -> factor DIVIDE factor .)
    COMMA           reduce using rule 70 (term -> factor DIVIDE factor .)


state 118

    (71) term -> factor MOD factor .

    PLUS            reduce using rule 71 (term -> factor MOD factor .)
    MINUS           reduce using rule 71 (term -> factor MOD factor .)
    R_KEY           reduce using rule 71 (term -> factor MOD factor .)
    MORE_THAN       reduce using rule 71 (term -> factor MOD factor .)
    LESS_THAN       reduce using rule 71 (term -> factor MOD factor .)
    MORE_EQUAL      reduce using rule 71 (term -> factor MOD factor .)
    LESS_EQUAL      reduce using rule 71 (term -> factor MOD factor .)
    EQUAL           reduce using rule 71 (term -> factor MOD factor .)
    NOT_EQUAL       reduce using rule 71 (term -> factor MOD factor .)
    AND             reduce using rule 71 (term -> factor MOD factor .)
    OR              reduce using rule 71 (term -> factor MOD factor .)
    DOT_COMMA       reduce using rule 71 (term -> factor MOD factor .)
    R_PAR           reduce using rule 71 (term -> factor MOD factor .)
    COMMA           reduce using rule 71 (term -> factor MOD factor .)


state 119

    (77) factor -> L_PAR megaExp R_PAR .

    TIMES           reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    DIVIDE          reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    MOD             reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    PLUS            reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    MINUS           reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    R_KEY           reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    MORE_THAN       reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    LESS_THAN       reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    MORE_EQUAL      reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    LESS_EQUAL      reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    EQUAL           reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    NOT_EQUAL       reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    AND             reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    OR              reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    DOT_COMMA       reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    R_PAR           reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)
    COMMA           reduce using rule 77 (factor -> L_PAR megaExp R_PAR .)


state 120

    (56) megaExp -> superExp AND superExp .

    DOT_COMMA       reduce using rule 56 (megaExp -> superExp AND superExp .)
    R_PAR           reduce using rule 56 (megaExp -> superExp AND superExp .)
    COMMA           reduce using rule 56 (megaExp -> superExp AND superExp .)


state 121

    (57) megaExp -> superExp OR superExp .

    DOT_COMMA       reduce using rule 57 (megaExp -> superExp OR superExp .)
    R_PAR           reduce using rule 57 (megaExp -> superExp OR superExp .)
    COMMA           reduce using rule 57 (megaExp -> superExp OR superExp .)


state 122

    (59) superExp -> exp MORE_THAN exp .

    AND             reduce using rule 59 (superExp -> exp MORE_THAN exp .)
    OR              reduce using rule 59 (superExp -> exp MORE_THAN exp .)
    DOT_COMMA       reduce using rule 59 (superExp -> exp MORE_THAN exp .)
    R_PAR           reduce using rule 59 (superExp -> exp MORE_THAN exp .)
    COMMA           reduce using rule 59 (superExp -> exp MORE_THAN exp .)


state 123

    (60) superExp -> exp LESS_THAN exp .

    AND             reduce using rule 60 (superExp -> exp LESS_THAN exp .)
    OR              reduce using rule 60 (superExp -> exp LESS_THAN exp .)
    DOT_COMMA       reduce using rule 60 (superExp -> exp LESS_THAN exp .)
    R_PAR           reduce using rule 60 (superExp -> exp LESS_THAN exp .)
    COMMA           reduce using rule 60 (superExp -> exp LESS_THAN exp .)


state 124

    (61) superExp -> exp MORE_EQUAL exp .

    AND             reduce using rule 61 (superExp -> exp MORE_EQUAL exp .)
    OR              reduce using rule 61 (superExp -> exp MORE_EQUAL exp .)
    DOT_COMMA       reduce using rule 61 (superExp -> exp MORE_EQUAL exp .)
    R_PAR           reduce using rule 61 (superExp -> exp MORE_EQUAL exp .)
    COMMA           reduce using rule 61 (superExp -> exp MORE_EQUAL exp .)


state 125

    (62) superExp -> exp LESS_EQUAL exp .

    AND             reduce using rule 62 (superExp -> exp LESS_EQUAL exp .)
    OR              reduce using rule 62 (superExp -> exp LESS_EQUAL exp .)
    DOT_COMMA       reduce using rule 62 (superExp -> exp LESS_EQUAL exp .)
    R_PAR           reduce using rule 62 (superExp -> exp LESS_EQUAL exp .)
    COMMA           reduce using rule 62 (superExp -> exp LESS_EQUAL exp .)


state 126

    (63) superExp -> exp EQUAL exp .

    AND             reduce using rule 63 (superExp -> exp EQUAL exp .)
    OR              reduce using rule 63 (superExp -> exp EQUAL exp .)
    DOT_COMMA       reduce using rule 63 (superExp -> exp EQUAL exp .)
    R_PAR           reduce using rule 63 (superExp -> exp EQUAL exp .)
    COMMA           reduce using rule 63 (superExp -> exp EQUAL exp .)


state 127

    (64) superExp -> exp NOT_EQUAL exp .

    AND             reduce using rule 64 (superExp -> exp NOT_EQUAL exp .)
    OR              reduce using rule 64 (superExp -> exp NOT_EQUAL exp .)
    DOT_COMMA       reduce using rule 64 (superExp -> exp NOT_EQUAL exp .)
    R_PAR           reduce using rule 64 (superExp -> exp NOT_EQUAL exp .)
    COMMA           reduce using rule 64 (superExp -> exp NOT_EQUAL exp .)


state 128

    (19) functionsHelp -> type ID COMMA . functionsHelp2
    (20) functionsHelp2 -> . type ID
    (21) functionsHelp2 -> . type ID COMMA functionsHelp2
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 143
    functionsHelp2                 shift and go to state 144

state 129

    (14) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK . variables statements R_BRACK
    (15) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK . statements R_BRACK
    (16) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK . R_BRACK
    (10) variables -> .
    (11) variables -> . VAR type ID DOT_COMMA variables
    (12) variables -> . VAR type assignment DOT_COMMA variables
    (27) statements -> .
    (28) statements -> . assignment DOT_COMMA
    (29) statements -> . functionCall DOT_COMMA
    (30) statements -> . ifBlock
    (31) statements -> . whileBlock
    (32) statements -> . forBlock
    (33) statements -> . print DOT_COMMA
    (34) statements -> . read DOT_COMMA
    (35) statements -> . lineComment
    (36) statements -> . arrays DOT_COMMA
    (37) assignment -> . idCall ASSIGN megaExp
    (38) assignment -> . idCall ASSIGN functionCall
    (39) assignment -> . idCall INCREMENT
    (40) assignment -> . idCall DECREMENT
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR
    (48) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (51) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (52) forBlock -> . FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (81) print -> . PRINT L_PAR print_help ALPHANUMERIC R_PAR
    (86) read -> . READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR
    (91) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (13) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

  ! shift/reduce conflict for R_BRACK resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for R_BRACK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
    R_BRACK         shift and go to state 147
    VAR             shift and go to state 61
    ID              shift and go to state 54
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    COMMENT_LINE    shift and go to state 76

  ! ID              [ reduce using rule 10 (variables -> .) ]
  ! IF              [ reduce using rule 10 (variables -> .) ]
  ! WHILE           [ reduce using rule 10 (variables -> .) ]
  ! FOR             [ reduce using rule 10 (variables -> .) ]
  ! PRINT           [ reduce using rule 10 (variables -> .) ]
  ! READ            [ reduce using rule 10 (variables -> .) ]
  ! COMMENT_LINE    [ reduce using rule 10 (variables -> .) ]
  ! VAR             [ reduce using rule 10 (variables -> .) ]
  ! R_BRACK         [ reduce using rule 10 (variables -> .) ]
  ! R_BRACK         [ reduce using rule 27 (statements -> .) ]

    variables                      shift and go to state 145
    statements                     shift and go to state 146
    assignment                     shift and go to state 62
    functionCall                   shift and go to state 63
    ifBlock                        shift and go to state 64
    whileBlock                     shift and go to state 65
    forBlock                       shift and go to state 66
    print                          shift and go to state 67
    read                           shift and go to state 68
    lineComment                    shift and go to state 69
    arrays                         shift and go to state 70
    idCall                         shift and go to state 27

state 130

    (6) mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK .

    R_BRACK         reduce using rule 6 (mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK .)


state 131

    (13) arrays -> VAR type . ID L_KEY NUMBER R_KEY DOT_COMMA

    ID              shift and go to state 148


state 132

    (11) variables -> VAR type ID . DOT_COMMA variables
    (13) arrays -> VAR type ID . L_KEY NUMBER R_KEY DOT_COMMA
    (79) idCall -> ID .
    (80) idCall -> ID . L_KEY exp R_KEY

    DOT_COMMA       shift and go to state 30
    L_KEY           shift and go to state 149
    ASSIGN          reduce using rule 79 (idCall -> ID .)
    INCREMENT       reduce using rule 79 (idCall -> ID .)
    DECREMENT       reduce using rule 79 (idCall -> ID .)


state 133

    (48) ifBlock -> IF L_PAR megaExp . R_PAR body optionalElse

    R_PAR           shift and go to state 150


state 134

    (51) whileBlock -> WHILE L_PAR megaExp . R_PAR body

    R_PAR           shift and go to state 151


state 135

    (52) forBlock -> FOR L_PAR idCall . DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body

    DOT_COMMA       shift and go to state 152


state 136

    (79) idCall -> ID .
    (80) idCall -> ID . L_KEY exp R_KEY

    DOT_COMMA       reduce using rule 79 (idCall -> ID .)
    COMMA           reduce using rule 79 (idCall -> ID .)
    ALPHANUMERIC    reduce using rule 79 (idCall -> ID .)
    ASSIGN          reduce using rule 79 (idCall -> ID .)
    INCREMENT       reduce using rule 79 (idCall -> ID .)
    DECREMENT       reduce using rule 79 (idCall -> ID .)
    R_PAR           reduce using rule 79 (idCall -> ID .)
    L_KEY           shift and go to state 31


state 137

    (81) print -> PRINT L_PAR print_help . ALPHANUMERIC R_PAR

    ALPHANUMERIC    shift and go to state 153


state 138

    (83) print_help -> MOD . idCall print_help2
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 136

    idCall                         shift and go to state 154

state 139

    (86) read -> READ L_PAR MOD . type COMMA readHelp idCall readHelp2 R_PAR
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 155

state 140

    (91) lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .

    R_BRACK         reduce using rule 91 (lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE .)


state 141

    (41) functionCall -> ID L_PAR functionCallParams R_PAR .

    TIMES           reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    DIVIDE          reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MOD             reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    PLUS            reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MINUS           reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_KEY           reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    DOT_COMMA       reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_THAN       reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_THAN       reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    MORE_EQUAL      reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    LESS_EQUAL      reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    EQUAL           reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    NOT_EQUAL       reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    AND             reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    OR              reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    R_PAR           reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)
    COMMA           reduce using rule 41 (functionCall -> ID L_PAR functionCallParams R_PAR .)


state 142

    (47) functionCallParamsMultiple -> megaExp COMMA . functionCallParamsMultiple
    (46) functionCallParamsMultiple -> . megaExp
    (47) functionCallParamsMultiple -> . megaExp COMMA functionCallParamsMultiple
    (55) megaExp -> . superExp
    (56) megaExp -> . superExp AND superExp
    (57) megaExp -> . superExp OR superExp
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    megaExp                        shift and go to state 156
    functionCallParamsMultiple     shift and go to state 157
    superExp                       shift and go to state 53
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 143

    (20) functionsHelp2 -> type . ID
    (21) functionsHelp2 -> type . ID COMMA functionsHelp2

    ID              shift and go to state 158


state 144

    (19) functionsHelp -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 19 (functionsHelp -> type ID COMMA functionsHelp2 .)


state 145

    (14) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables . statements R_BRACK
    (27) statements -> .
    (28) statements -> . assignment DOT_COMMA
    (29) statements -> . functionCall DOT_COMMA
    (30) statements -> . ifBlock
    (31) statements -> . whileBlock
    (32) statements -> . forBlock
    (33) statements -> . print DOT_COMMA
    (34) statements -> . read DOT_COMMA
    (35) statements -> . lineComment
    (36) statements -> . arrays DOT_COMMA
    (37) assignment -> . idCall ASSIGN megaExp
    (38) assignment -> . idCall ASSIGN functionCall
    (39) assignment -> . idCall INCREMENT
    (40) assignment -> . idCall DECREMENT
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR
    (48) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (51) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (52) forBlock -> . FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (81) print -> . PRINT L_PAR print_help ALPHANUMERIC R_PAR
    (86) read -> . READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR
    (91) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (13) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    R_BRACK         reduce using rule 27 (statements -> .)
    ID              shift and go to state 54
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    COMMENT_LINE    shift and go to state 76
    VAR             shift and go to state 96

    statements                     shift and go to state 159
    assignment                     shift and go to state 62
    functionCall                   shift and go to state 63
    ifBlock                        shift and go to state 64
    whileBlock                     shift and go to state 65
    forBlock                       shift and go to state 66
    print                          shift and go to state 67
    read                           shift and go to state 68
    lineComment                    shift and go to state 69
    arrays                         shift and go to state 70
    idCall                         shift and go to state 27

state 146

    (15) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK statements . R_BRACK

    R_BRACK         shift and go to state 160


state 147

    (16) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK R_BRACK .

    MAIN            reduce using rule 16 (functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK R_BRACK .)


state 148

    (13) arrays -> VAR type ID . L_KEY NUMBER R_KEY DOT_COMMA

    L_KEY           shift and go to state 161


state 149

    (13) arrays -> VAR type ID L_KEY . NUMBER R_KEY DOT_COMMA
    (80) idCall -> ID L_KEY . exp R_KEY
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 162
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    exp                            shift and go to state 40
    term                           shift and go to state 41
    factor                         shift and go to state 42
    idCall                         shift and go to state 47
    functionCall                   shift and go to state 49

state 150

    (48) ifBlock -> IF L_PAR megaExp R_PAR . body optionalElse
    (9) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 164

    body                           shift and go to state 163

state 151

    (51) whileBlock -> WHILE L_PAR megaExp R_PAR . body
    (9) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 164

    body                           shift and go to state 165

state 152

    (52) forBlock -> FOR L_PAR idCall DOT_COMMA . megaExp DOT_COMMA optionalAssign R_PAR body
    (55) megaExp -> . superExp
    (56) megaExp -> . superExp AND superExp
    (57) megaExp -> . superExp OR superExp
    (58) superExp -> . exp
    (59) superExp -> . exp MORE_THAN exp
    (60) superExp -> . exp LESS_THAN exp
    (61) superExp -> . exp MORE_EQUAL exp
    (62) superExp -> . exp LESS_EQUAL exp
    (63) superExp -> . exp EQUAL exp
    (64) superExp -> . exp NOT_EQUAL exp
    (65) exp -> . term
    (66) exp -> . term PLUS term
    (67) exp -> . term MINUS term
    (68) term -> . factor
    (69) term -> . factor TIMES factor
    (70) term -> . factor DIVIDE factor
    (71) term -> . factor MOD factor
    (72) factor -> . NUMBER
    (73) factor -> . ALPHANUMERIC
    (74) factor -> . CHARACTER
    (75) factor -> . BOOLEAN
    (76) factor -> . idCall
    (77) factor -> . L_PAR megaExp R_PAR
    (78) factor -> . functionCall
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR

    NUMBER          shift and go to state 43
    ALPHANUMERIC    shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    L_PAR           shift and go to state 48
    ID              shift and go to state 39

    idCall                         shift and go to state 47
    megaExp                        shift and go to state 166
    superExp                       shift and go to state 53
    exp                            shift and go to state 55
    term                           shift and go to state 41
    factor                         shift and go to state 42
    functionCall                   shift and go to state 49

state 153

    (81) print -> PRINT L_PAR print_help ALPHANUMERIC . R_PAR

    R_PAR           shift and go to state 167


state 154

    (83) print_help -> MOD idCall . print_help2
    (84) print_help2 -> .
    (85) print_help2 -> . COMMA MOD idCall print_help2

    ALPHANUMERIC    reduce using rule 84 (print_help2 -> .)
    COMMA           shift and go to state 169

    print_help2                    shift and go to state 168

state 155

    (86) read -> READ L_PAR MOD type . COMMA readHelp idCall readHelp2 R_PAR

    COMMA           shift and go to state 170


state 156

    (46) functionCallParamsMultiple -> megaExp .
    (47) functionCallParamsMultiple -> megaExp . COMMA functionCallParamsMultiple

    R_PAR           reduce using rule 46 (functionCallParamsMultiple -> megaExp .)
    COMMA           shift and go to state 142


state 157

    (47) functionCallParamsMultiple -> megaExp COMMA functionCallParamsMultiple .

    R_PAR           reduce using rule 47 (functionCallParamsMultiple -> megaExp COMMA functionCallParamsMultiple .)


state 158

    (20) functionsHelp2 -> type ID .
    (21) functionsHelp2 -> type ID . COMMA functionsHelp2

    R_PAR           reduce using rule 20 (functionsHelp2 -> type ID .)
    COMMA           shift and go to state 171


state 159

    (14) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements . R_BRACK

    R_BRACK         shift and go to state 172


state 160

    (15) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK .

    MAIN            reduce using rule 15 (functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK .)


state 161

    (13) arrays -> VAR type ID L_KEY . NUMBER R_KEY DOT_COMMA

    NUMBER          shift and go to state 173


state 162

    (13) arrays -> VAR type ID L_KEY NUMBER . R_KEY DOT_COMMA
    (72) factor -> NUMBER .

  ! shift/reduce conflict for R_KEY resolved as shift
    R_KEY           shift and go to state 174
    TIMES           reduce using rule 72 (factor -> NUMBER .)
    DIVIDE          reduce using rule 72 (factor -> NUMBER .)
    MOD             reduce using rule 72 (factor -> NUMBER .)
    PLUS            reduce using rule 72 (factor -> NUMBER .)
    MINUS           reduce using rule 72 (factor -> NUMBER .)

  ! R_KEY           [ reduce using rule 72 (factor -> NUMBER .) ]


state 163

    (48) ifBlock -> IF L_PAR megaExp R_PAR body . optionalElse
    (49) optionalElse -> .
    (50) optionalElse -> . ELSE body

    R_BRACK         reduce using rule 49 (optionalElse -> .)
    ELSE            shift and go to state 176

    optionalElse                   shift and go to state 175

state 164

    (9) body -> L_BRACK . statements R_BRACK
    (27) statements -> .
    (28) statements -> . assignment DOT_COMMA
    (29) statements -> . functionCall DOT_COMMA
    (30) statements -> . ifBlock
    (31) statements -> . whileBlock
    (32) statements -> . forBlock
    (33) statements -> . print DOT_COMMA
    (34) statements -> . read DOT_COMMA
    (35) statements -> . lineComment
    (36) statements -> . arrays DOT_COMMA
    (37) assignment -> . idCall ASSIGN megaExp
    (38) assignment -> . idCall ASSIGN functionCall
    (39) assignment -> . idCall INCREMENT
    (40) assignment -> . idCall DECREMENT
    (41) functionCall -> . ID L_PAR functionCallParams R_PAR
    (48) ifBlock -> . IF L_PAR megaExp R_PAR body optionalElse
    (51) whileBlock -> . WHILE L_PAR megaExp R_PAR body
    (52) forBlock -> . FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body
    (81) print -> . PRINT L_PAR print_help ALPHANUMERIC R_PAR
    (86) read -> . READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR
    (91) lineComment -> . COMMENT_LINE ALPHANUMERIC END_LINE
    (13) arrays -> . VAR type ID L_KEY NUMBER R_KEY DOT_COMMA
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    R_BRACK         reduce using rule 27 (statements -> .)
    ID              shift and go to state 54
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    COMMENT_LINE    shift and go to state 76
    VAR             shift and go to state 96

    statements                     shift and go to state 177
    assignment                     shift and go to state 62
    functionCall                   shift and go to state 63
    ifBlock                        shift and go to state 64
    whileBlock                     shift and go to state 65
    forBlock                       shift and go to state 66
    print                          shift and go to state 67
    read                           shift and go to state 68
    lineComment                    shift and go to state 69
    arrays                         shift and go to state 70
    idCall                         shift and go to state 27

state 165

    (51) whileBlock -> WHILE L_PAR megaExp R_PAR body .

    R_BRACK         reduce using rule 51 (whileBlock -> WHILE L_PAR megaExp R_PAR body .)


state 166

    (52) forBlock -> FOR L_PAR idCall DOT_COMMA megaExp . DOT_COMMA optionalAssign R_PAR body

    DOT_COMMA       shift and go to state 178


state 167

    (81) print -> PRINT L_PAR print_help ALPHANUMERIC R_PAR .

    DOT_COMMA       reduce using rule 81 (print -> PRINT L_PAR print_help ALPHANUMERIC R_PAR .)


state 168

    (83) print_help -> MOD idCall print_help2 .

    ALPHANUMERIC    reduce using rule 83 (print_help -> MOD idCall print_help2 .)


state 169

    (85) print_help2 -> COMMA . MOD idCall print_help2

    MOD             shift and go to state 179


state 170

    (86) read -> READ L_PAR MOD type COMMA . readHelp idCall readHelp2 R_PAR
    (87) readHelp -> .
    (88) readHelp -> . MOD type readHelp

    ID              reduce using rule 87 (readHelp -> .)
    MOD             shift and go to state 180

    readHelp                       shift and go to state 181

state 171

    (21) functionsHelp2 -> type ID COMMA . functionsHelp2
    (20) functionsHelp2 -> . type ID
    (21) functionsHelp2 -> . type ID COMMA functionsHelp2
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 143
    functionsHelp2                 shift and go to state 182

state 172

    (14) functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK .

    MAIN            reduce using rule 14 (functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK .)


state 173

    (13) arrays -> VAR type ID L_KEY NUMBER . R_KEY DOT_COMMA

    R_KEY           shift and go to state 174


state 174

    (13) arrays -> VAR type ID L_KEY NUMBER R_KEY . DOT_COMMA

    DOT_COMMA       shift and go to state 183


state 175

    (48) ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .

    R_BRACK         reduce using rule 48 (ifBlock -> IF L_PAR megaExp R_PAR body optionalElse .)


state 176

    (50) optionalElse -> ELSE . body
    (9) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 164

    body                           shift and go to state 184

state 177

    (9) body -> L_BRACK statements . R_BRACK

    R_BRACK         shift and go to state 185


state 178

    (52) forBlock -> FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA . optionalAssign R_PAR body
    (53) optionalAssign -> .
    (54) optionalAssign -> . assignment
    (37) assignment -> . idCall ASSIGN megaExp
    (38) assignment -> . idCall ASSIGN functionCall
    (39) assignment -> . idCall INCREMENT
    (40) assignment -> . idCall DECREMENT
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    R_PAR           reduce using rule 53 (optionalAssign -> .)
    ID              shift and go to state 136

    idCall                         shift and go to state 27
    optionalAssign                 shift and go to state 186
    assignment                     shift and go to state 187

state 179

    (85) print_help2 -> COMMA MOD . idCall print_help2
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 136

    idCall                         shift and go to state 188

state 180

    (88) readHelp -> MOD . type readHelp
    (22) type -> . INT
    (23) type -> . DECIM
    (24) type -> . BOOL
    (25) type -> . CHAR
    (26) type -> . STRING

    INT             shift and go to state 17
    DECIM           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 189

state 181

    (86) read -> READ L_PAR MOD type COMMA readHelp . idCall readHelp2 R_PAR
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 136

    idCall                         shift and go to state 190

state 182

    (21) functionsHelp2 -> type ID COMMA functionsHelp2 .

    R_PAR           reduce using rule 21 (functionsHelp2 -> type ID COMMA functionsHelp2 .)


state 183

    (13) arrays -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA .

    DOT_COMMA       reduce using rule 13 (arrays -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA .)


state 184

    (50) optionalElse -> ELSE body .

    R_BRACK         reduce using rule 50 (optionalElse -> ELSE body .)


state 185

    (9) body -> L_BRACK statements R_BRACK .

    ELSE            reduce using rule 9 (body -> L_BRACK statements R_BRACK .)
    R_BRACK         reduce using rule 9 (body -> L_BRACK statements R_BRACK .)


state 186

    (52) forBlock -> FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign . R_PAR body

    R_PAR           shift and go to state 191


state 187

    (54) optionalAssign -> assignment .

    R_PAR           reduce using rule 54 (optionalAssign -> assignment .)


state 188

    (85) print_help2 -> COMMA MOD idCall . print_help2
    (84) print_help2 -> .
    (85) print_help2 -> . COMMA MOD idCall print_help2

    ALPHANUMERIC    reduce using rule 84 (print_help2 -> .)
    COMMA           shift and go to state 169

    print_help2                    shift and go to state 192

state 189

    (88) readHelp -> MOD type . readHelp
    (87) readHelp -> .
    (88) readHelp -> . MOD type readHelp

    ID              reduce using rule 87 (readHelp -> .)
    MOD             shift and go to state 180

    readHelp                       shift and go to state 193

state 190

    (86) read -> READ L_PAR MOD type COMMA readHelp idCall . readHelp2 R_PAR
    (89) readHelp2 -> .
    (90) readHelp2 -> . COMMA idCall readHelp2

    R_PAR           reduce using rule 89 (readHelp2 -> .)
    COMMA           shift and go to state 194

    readHelp2                      shift and go to state 195

state 191

    (52) forBlock -> FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR . body
    (9) body -> . L_BRACK statements R_BRACK

    L_BRACK         shift and go to state 164

    body                           shift and go to state 196

state 192

    (85) print_help2 -> COMMA MOD idCall print_help2 .

    ALPHANUMERIC    reduce using rule 85 (print_help2 -> COMMA MOD idCall print_help2 .)


state 193

    (88) readHelp -> MOD type readHelp .

    ID              reduce using rule 88 (readHelp -> MOD type readHelp .)


state 194

    (90) readHelp2 -> COMMA . idCall readHelp2
    (79) idCall -> . ID
    (80) idCall -> . ID L_KEY exp R_KEY

    ID              shift and go to state 136

    idCall                         shift and go to state 197

state 195

    (86) read -> READ L_PAR MOD type COMMA readHelp idCall readHelp2 . R_PAR

    R_PAR           shift and go to state 198


state 196

    (52) forBlock -> FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .

    R_BRACK         reduce using rule 52 (forBlock -> FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body .)


state 197

    (90) readHelp2 -> COMMA idCall . readHelp2
    (89) readHelp2 -> .
    (90) readHelp2 -> . COMMA idCall readHelp2

    R_PAR           reduce using rule 89 (readHelp2 -> .)
    COMMA           shift and go to state 194

    readHelp2                      shift and go to state 199

state 198

    (86) read -> READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR .

    DOT_COMMA       reduce using rule 86 (read -> READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR .)


state 199

    (90) readHelp2 -> COMMA idCall readHelp2 .

    R_PAR           reduce using rule 90 (readHelp2 -> COMMA idCall readHelp2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 4 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 30 resolved as shift
WARNING: shift/reduce conflict for VAR in state 32 resolved as shift
WARNING: shift/reduce conflict for R_BRACK in state 37 resolved as shift
WARNING: shift/reduce conflict for VAR in state 37 resolved as shift
WARNING: shift/reduce conflict for R_BRACK in state 37 resolved as shift
WARNING: shift/reduce conflict for ID in state 37 resolved as shift
WARNING: shift/reduce conflict for IF in state 37 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 37 resolved as shift
WARNING: shift/reduce conflict for FOR in state 37 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 37 resolved as shift
WARNING: shift/reduce conflict for READ in state 37 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 37 resolved as shift
WARNING: shift/reduce conflict for R_BRACK in state 129 resolved as shift
WARNING: shift/reduce conflict for VAR in state 129 resolved as shift
WARNING: shift/reduce conflict for R_BRACK in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for IF in state 129 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 129 resolved as shift
WARNING: shift/reduce conflict for FOR in state 129 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 129 resolved as shift
WARNING: shift/reduce conflict for READ in state 129 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 129 resolved as shift
WARNING: shift/reduce conflict for R_KEY in state 162 resolved as shift
WARNING: reduce/reduce conflict in state 52 resolved using rule (assignment -> idCall ASSIGN functionCall)
WARNING: rejected rule (factor -> functionCall) in state 52
WARNING: reduce/reduce conflict in state 113 resolved using rule (functionCallParamsOptional -> megaExp)
WARNING: rejected rule (functionCallParamsMultiple -> megaExp) in state 113
