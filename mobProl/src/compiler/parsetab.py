
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALPHANUMERIC AND ASSIGN BOOL BOOLEAN BOOLEAN CHAR CHARACTER COMMA COMMENT_LINE DECIM DECREMENT DIVIDE DOT_COMMA ELSE END_LINE EQUAL FOR FUNCTION ID IF INCREMENT INT LESS_EQUAL LESS_THAN L_BRACK L_KEY L_PAR MAIN MINUS MOD MORE_EQUAL MORE_THAN NOT_EQUAL NUMBER OR PLUS PRINT PROGRAM READ R_BRACK R_KEY R_PAR STRING TIMES VAR WHILEprogram : PROGRAM ID L_BRACK variables functions mainBody R_BRACKmainBody : MAIN L_PAR R_PAR L_BRACK variables statements R_BRACKbody : L_BRACK statements R_BRACKvariables :\n               | VAR type ID DOT_COMMA variables\n  \t       | VAR type assignment DOT_COMMA variables\n  \t       | VAR type ID L_KEY NUMBER R_KEY DOT_COMMA variablesfunctions :\n               | FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACKfunctionsHelp :\n  \t\t   | type ID\n  \t\t   | type ID COMMA functionsHelp2functionsHelp2 : type ID\n                    | type ID COMMA functionsHelp2type : INT\n  \t  | DECIM\n          | BOOL\n          | CHAR\n          | STRINGstatements :\n                | statement statementsstatement :\n                | assignment DOT_COMMA\n  \t\t| functionCall DOT_COMMA\n                | ifBlock\n                | whileBlock\n                | forBlock\n                | print DOT_COMMA\n                | read DOT_COMMA\n                | lineCommentassignment : idCall ASSIGN megaExp\n                | idCall ASSIGN functionCall\n                | assignIncr\n                | assignDecrassignIncr : idCall INCREMENTassignDecr : idCall DECREMENTfunctionCall : ID L_PAR functionCallParams R_PARfunctionCallParams : functionCallParamsOptionalfunctionCallParamsOptional :\n                                | megaExp functionCallParamsMultiplefunctionCallParamsMultiple :\n                                | COMMA functionCallParamsOptionalifBlock : IF L_PAR megaExp R_PAR body optionalElseoptionalElse : \n  \t\t  | ELSE bodywhileBlock : WHILE L_PAR megaExp R_PAR bodyforBlock : FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR bodyoptionalAssign : \n  \t\t    | assignmentmegaExp : superExp\n             | superExp AND superExp\n             | superExp OR superExpsuperExp : exp\n              | exp MORE_THAN exp\n              | exp LESS_THAN exp\n              | exp MORE_EQUAL exp\n              | exp LESS_EQUAL exp\n              | exp EQUAL exp\n              | exp NOT_EQUAL expexp : term\n          | term PLUS exp\n          | term MINUS expterm : factor\n           | factor TIMES term\n           | factor DIVIDE term\n           | factor MOD termfactor : NUMBER \n             | ALPHANUMERIC \n             | CHARACTER\n             | BOOLEAN\n             | idCall\n             | L_PAR megaExp R_PAR\n             | functionCallidCall : ID\n  \t    | ID L_KEY exp R_KEYprint : PRINT L_PAR print_help R_PARprint_help : \n  \t\t| ALPHANUMERIC\n  \t\t| idCall\n  \t\t| functionCall\n  \t\t| megaExpread : READ L_PAR idCall R_PARlineComment : COMMENT_LINE ALPHANUMERIC END_LINE'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,23,],[0,-1,]),'ID':([2,9,10,11,12,13,14,17,26,27,28,29,34,44,46,53,54,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,80,96,99,100,101,104,112,115,116,119,120,121,122,123,124,125,126,127,129,131,143,148,153,154,155,158,161,162,163,167,],[3,18,-15,-16,-17,-18,-19,25,-4,35,-4,50,-5,35,-6,-4,75,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,50,-4,50,-25,-26,-27,-30,-4,35,-7,-23,-24,-28,-29,35,35,136,35,136,144,50,-83,35,-44,50,-46,-43,136,-45,-3,-47,]),'L_BRACK':([3,32,76,146,147,159,166,],[4,53,112,154,154,154,154,]),'FUNCTION':([4,5,26,28,34,46,80,116,],[-4,8,-4,-4,-5,-6,-4,-7,]),'MAIN':([4,5,7,26,28,34,46,80,116,152,],[-4,-8,16,-4,-4,-5,-6,-4,-7,-9,]),'VAR':([4,26,28,53,80,112,],[6,6,6,6,6,6,]),'INT':([6,8,33,111,151,],[10,10,10,10,10,]),'DECIM':([6,8,33,111,151,],[11,11,11,11,11,]),'BOOL':([6,8,33,111,151,],[12,12,12,12,12,]),'CHAR':([6,8,33,111,151,],[13,13,13,13,13,]),'STRING':([6,8,33,111,151,],[14,14,14,14,14,]),'R_BRACK':([15,26,28,34,46,53,74,80,95,96,99,100,101,104,112,116,117,118,119,120,121,122,131,143,145,153,154,155,158,160,162,163,167,],[23,-4,-4,-5,-6,-4,-20,-4,117,-20,-25,-26,-27,-30,-4,-7,-2,-21,-23,-24,-28,-29,-20,-83,152,-44,-20,-46,-43,163,-45,-3,-47,]),'L_PAR':([16,25,27,29,35,44,50,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,105,106,107,108,109,115,123,124,126,148,],[24,33,44,44,57,44,57,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,123,124,125,126,127,44,44,44,44,44,]),'DOT_COMMA':([18,19,21,22,30,31,35,38,39,40,41,42,43,45,47,48,49,50,51,52,58,59,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,102,103,113,135,149,150,156,],[26,28,-33,-34,-35,-36,-74,-60,-63,-68,-69,-70,-71,-73,-31,-32,-50,-74,-53,-67,80,-75,-61,-62,-64,-65,-66,-72,-51,-52,-54,-55,-56,-57,-58,-59,119,120,121,122,-37,148,-76,-82,161,]),'L_KEY':([18,35,50,136,],[27,56,56,56,]),'ASSIGN':([18,20,50,59,136,],[-74,29,-74,-75,-74,]),'INCREMENT':([18,20,50,59,136,],[-74,30,-74,-75,-74,]),'DECREMENT':([18,20,50,59,136,],[-74,31,-74,-75,-74,]),'R_PAR':([21,22,24,30,31,33,35,38,39,40,41,42,43,45,47,48,49,50,51,52,55,57,59,65,75,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,113,114,115,126,130,132,133,134,136,137,138,139,140,141,142,144,157,161,164,165,],[-33,-34,32,-35,-36,-10,-74,-60,-63,-68,-69,-70,-71,-73,-31,-32,-50,-74,-53,-67,76,-39,-75,86,-11,113,-38,-41,-61,-62,-64,-65,-66,-72,-51,-52,-54,-55,-56,-57,-58,-59,-37,-40,-39,-77,-12,-42,146,147,-74,149,-68,-71,-73,-81,150,-13,-14,-48,-49,166,]),'IF':([26,28,34,46,53,74,80,96,99,100,101,104,112,116,119,120,121,122,131,143,153,154,155,158,162,163,167,],[-4,-4,-5,-6,-4,105,-4,105,-25,-26,-27,-30,-4,-7,-23,-24,-28,-29,105,-83,-44,105,-46,-43,-45,-3,-47,]),'WHILE':([26,28,34,46,53,74,80,96,99,100,101,104,112,116,119,120,121,122,131,143,153,154,155,158,162,163,167,],[-4,-4,-5,-6,-4,106,-4,106,-25,-26,-27,-30,-4,-7,-23,-24,-28,-29,106,-83,-44,106,-46,-43,-45,-3,-47,]),'FOR':([26,28,34,46,53,74,80,96,99,100,101,104,112,116,119,120,121,122,131,143,153,154,155,158,162,163,167,],[-4,-4,-5,-6,-4,107,-4,107,-25,-26,-27,-30,-4,-7,-23,-24,-28,-29,107,-83,-44,107,-46,-43,-45,-3,-47,]),'PRINT':([26,28,34,46,53,74,80,96,99,100,101,104,112,116,119,120,121,122,131,143,153,154,155,158,162,163,167,],[-4,-4,-5,-6,-4,108,-4,108,-25,-26,-27,-30,-4,-7,-23,-24,-28,-29,108,-83,-44,108,-46,-43,-45,-3,-47,]),'READ':([26,28,34,46,53,74,80,96,99,100,101,104,112,116,119,120,121,122,131,143,153,154,155,158,162,163,167,],[-4,-4,-5,-6,-4,109,-4,109,-25,-26,-27,-30,-4,-7,-23,-24,-28,-29,109,-83,-44,109,-46,-43,-45,-3,-47,]),'COMMENT_LINE':([26,28,34,46,53,74,80,96,99,100,101,104,112,116,119,120,121,122,131,143,153,154,155,158,162,163,167,],[-4,-4,-5,-6,-4,110,-4,110,-25,-26,-27,-30,-4,-7,-23,-24,-28,-29,110,-83,-44,110,-46,-43,-45,-3,-47,]),'NUMBER':([27,29,44,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,115,123,124,126,148,],[36,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'ALPHANUMERIC':([27,29,44,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,110,115,123,124,126,148,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,128,40,40,40,138,40,]),'CHARACTER':([27,29,44,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,115,123,124,126,148,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'BOOLEAN':([27,29,44,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,115,123,124,126,148,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'TIMES':([35,36,39,40,41,42,43,45,48,50,52,59,86,113,138,139,140,],[-74,-67,62,-68,-69,-70,-71,-73,-73,-74,-67,-75,-72,-37,-68,-71,-73,]),'DIVIDE':([35,36,39,40,41,42,43,45,48,50,52,59,86,113,138,139,140,],[-74,-67,63,-68,-69,-70,-71,-73,-73,-74,-67,-75,-72,-37,-68,-71,-73,]),'MOD':([35,36,39,40,41,42,43,45,48,50,52,59,86,113,138,139,140,],[-74,-67,64,-68,-69,-70,-71,-73,-73,-74,-67,-75,-72,-37,-68,-71,-73,]),'PLUS':([35,36,38,39,40,41,42,43,45,48,50,52,59,83,84,85,86,113,138,139,140,],[-74,-67,60,-63,-68,-69,-70,-71,-73,-73,-74,-67,-75,-64,-65,-66,-72,-37,-68,-71,-73,]),'MINUS':([35,36,38,39,40,41,42,43,45,48,50,52,59,83,84,85,86,113,138,139,140,],[-74,-67,61,-63,-68,-69,-70,-71,-73,-73,-74,-67,-75,-64,-65,-66,-72,-37,-68,-71,-73,]),'R_KEY':([35,36,37,38,39,40,41,42,43,45,52,59,81,82,83,84,85,86,113,],[-74,58,59,-60,-63,-68,-69,-70,-71,-73,-67,-75,-61,-62,-64,-65,-66,-72,-37,]),'MORE_THAN':([35,38,39,40,41,42,43,45,48,50,51,52,59,81,82,83,84,85,86,113,138,139,140,],[-74,-60,-63,-68,-69,-70,-71,-73,-73,-74,68,-67,-75,-61,-62,-64,-65,-66,-72,-37,-68,-71,-73,]),'LESS_THAN':([35,38,39,40,41,42,43,45,48,50,51,52,59,81,82,83,84,85,86,113,138,139,140,],[-74,-60,-63,-68,-69,-70,-71,-73,-73,-74,69,-67,-75,-61,-62,-64,-65,-66,-72,-37,-68,-71,-73,]),'MORE_EQUAL':([35,38,39,40,41,42,43,45,48,50,51,52,59,81,82,83,84,85,86,113,138,139,140,],[-74,-60,-63,-68,-69,-70,-71,-73,-73,-74,70,-67,-75,-61,-62,-64,-65,-66,-72,-37,-68,-71,-73,]),'LESS_EQUAL':([35,38,39,40,41,42,43,45,48,50,51,52,59,81,82,83,84,85,86,113,138,139,140,],[-74,-60,-63,-68,-69,-70,-71,-73,-73,-74,71,-67,-75,-61,-62,-64,-65,-66,-72,-37,-68,-71,-73,]),'EQUAL':([35,38,39,40,41,42,43,45,48,50,51,52,59,81,82,83,84,85,86,113,138,139,140,],[-74,-60,-63,-68,-69,-70,-71,-73,-73,-74,72,-67,-75,-61,-62,-64,-65,-66,-72,-37,-68,-71,-73,]),'NOT_EQUAL':([35,38,39,40,41,42,43,45,48,50,51,52,59,81,82,83,84,85,86,113,138,139,140,],[-74,-60,-63,-68,-69,-70,-71,-73,-73,-74,73,-67,-75,-61,-62,-64,-65,-66,-72,-37,-68,-71,-73,]),'AND':([35,38,39,40,41,42,43,45,48,49,50,51,52,59,81,82,83,84,85,86,89,90,91,92,93,94,113,138,139,140,],[-74,-60,-63,-68,-69,-70,-71,-73,-73,66,-74,-53,-67,-75,-61,-62,-64,-65,-66,-72,-54,-55,-56,-57,-58,-59,-37,-68,-71,-73,]),'OR':([35,38,39,40,41,42,43,45,48,49,50,51,52,59,81,82,83,84,85,86,89,90,91,92,93,94,113,138,139,140,],[-74,-60,-63,-68,-69,-70,-71,-73,-73,67,-74,-53,-67,-75,-61,-62,-64,-65,-66,-72,-54,-55,-56,-57,-58,-59,-37,-68,-71,-73,]),'COMMA':([35,38,39,40,41,42,43,45,49,51,52,59,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,113,144,],[-74,-60,-63,-68,-69,-70,-71,-73,-50,-53,-67,-75,111,115,-61,-62,-64,-65,-66,-72,-51,-52,-54,-55,-56,-57,-58,-59,-37,151,]),'END_LINE':([128,],[143,]),'ELSE':([153,163,],[159,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variables':([4,26,28,53,80,112,],[5,34,46,74,116,131,]),'functions':([5,],[7,]),'type':([6,8,33,111,151,],[9,17,54,129,129,]),'mainBody':([7,],[15,]),'assignment':([9,74,96,125,131,154,161,],[19,97,97,135,97,97,164,]),'idCall':([9,27,29,44,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,96,115,123,124,125,126,127,131,148,154,161,],[20,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,20,20,43,43,43,20,139,142,20,43,20,20,]),'assignIncr':([9,74,96,125,131,154,161,],[21,21,21,21,21,21,21,]),'assignDecr':([9,74,96,125,131,154,161,],[22,22,22,22,22,22,22,]),'exp':([27,29,44,56,57,60,61,66,67,68,69,70,71,72,73,115,123,124,126,148,],[37,51,51,37,51,81,82,51,51,89,90,91,92,93,94,51,51,51,51,51,]),'term':([27,29,44,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,115,123,124,126,148,],[38,38,38,38,38,38,38,83,84,85,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'factor':([27,29,44,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,115,123,124,126,148,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'functionCall':([27,29,44,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,96,115,123,124,126,131,148,154,],[45,48,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,98,98,45,45,45,140,98,45,98,]),'megaExp':([29,44,57,115,123,124,126,148,],[47,65,79,79,133,134,141,156,]),'superExp':([29,44,57,66,67,115,123,124,126,148,],[49,49,49,87,88,49,49,49,49,49,]),'functionsHelp':([33,],[55,]),'functionCallParams':([57,],[77,]),'functionCallParamsOptional':([57,115,],[78,132,]),'statements':([74,96,131,154,],[95,118,145,160,]),'statement':([74,96,131,154,],[96,96,96,96,]),'ifBlock':([74,96,131,154,],[99,99,99,99,]),'whileBlock':([74,96,131,154,],[100,100,100,100,]),'forBlock':([74,96,131,154,],[101,101,101,101,]),'print':([74,96,131,154,],[102,102,102,102,]),'read':([74,96,131,154,],[103,103,103,103,]),'lineComment':([74,96,131,154,],[104,104,104,104,]),'functionCallParamsMultiple':([79,],[114,]),'functionsHelp2':([111,151,],[130,157,]),'print_help':([126,],[137,]),'body':([146,147,159,166,],[153,155,162,167,]),'optionalElse':([153,],[158,]),'optionalAssign':([161,],[165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID L_BRACK variables functions mainBody R_BRACK','program',7,'p_program','parser.py',14),
  ('mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK','mainBody',7,'p_mainBody','parser.py',19),
  ('body -> L_BRACK statements R_BRACK','body',3,'p_body','parser.py',24),
  ('variables -> <empty>','variables',0,'p_variables','parser.py',29),
  ('variables -> VAR type ID DOT_COMMA variables','variables',5,'p_variables','parser.py',30),
  ('variables -> VAR type assignment DOT_COMMA variables','variables',5,'p_variables','parser.py',31),
  ('variables -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA variables','variables',8,'p_variables','parser.py',32),
  ('functions -> <empty>','functions',0,'p_functions','parser.py',42),
  ('functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK','functions',10,'p_functions','parser.py',43),
  ('functionsHelp -> <empty>','functionsHelp',0,'p_functionsHelp','parser.py',48),
  ('functionsHelp -> type ID','functionsHelp',2,'p_functionsHelp','parser.py',49),
  ('functionsHelp -> type ID COMMA functionsHelp2','functionsHelp',4,'p_functionsHelp','parser.py',50),
  ('functionsHelp2 -> type ID','functionsHelp2',2,'p_functionsHelp2','parser.py',57),
  ('functionsHelp2 -> type ID COMMA functionsHelp2','functionsHelp2',4,'p_functionsHelp2','parser.py',58),
  ('type -> INT','type',1,'p_type','parser.py',68),
  ('type -> DECIM','type',1,'p_type','parser.py',69),
  ('type -> BOOL','type',1,'p_type','parser.py',70),
  ('type -> CHAR','type',1,'p_type','parser.py',71),
  ('type -> STRING','type',1,'p_type','parser.py',72),
  ('statements -> <empty>','statements',0,'p_statements','parser.py',79),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',80),
  ('statement -> <empty>','statement',0,'p_statement','parser.py',88),
  ('statement -> assignment DOT_COMMA','statement',2,'p_statement','parser.py',89),
  ('statement -> functionCall DOT_COMMA','statement',2,'p_statement','parser.py',90),
  ('statement -> ifBlock','statement',1,'p_statement','parser.py',91),
  ('statement -> whileBlock','statement',1,'p_statement','parser.py',92),
  ('statement -> forBlock','statement',1,'p_statement','parser.py',93),
  ('statement -> print DOT_COMMA','statement',2,'p_statement','parser.py',94),
  ('statement -> read DOT_COMMA','statement',2,'p_statement','parser.py',95),
  ('statement -> lineComment','statement',1,'p_statement','parser.py',96),
  ('assignment -> idCall ASSIGN megaExp','assignment',3,'p_assignment','parser.py',101),
  ('assignment -> idCall ASSIGN functionCall','assignment',3,'p_assignment','parser.py',102),
  ('assignment -> assignIncr','assignment',1,'p_assignment','parser.py',103),
  ('assignment -> assignDecr','assignment',1,'p_assignment','parser.py',104),
  ('assignIncr -> idCall INCREMENT','assignIncr',2,'p_assignIncr','parser.py',110),
  ('assignDecr -> idCall DECREMENT','assignDecr',2,'p_assignDecr','parser.py',113),
  ('functionCall -> ID L_PAR functionCallParams R_PAR','functionCall',4,'p_functionCall','parser.py',119),
  ('functionCallParams -> functionCallParamsOptional','functionCallParams',1,'p_functionCallParams','parser.py',123),
  ('functionCallParamsOptional -> <empty>','functionCallParamsOptional',0,'p_functionCallParamsOptional','parser.py',127),
  ('functionCallParamsOptional -> megaExp functionCallParamsMultiple','functionCallParamsOptional',2,'p_functionCallParamsOptional','parser.py',128),
  ('functionCallParamsMultiple -> <empty>','functionCallParamsMultiple',0,'p_functionCallParamsMultiple','parser.py',135),
  ('functionCallParamsMultiple -> COMMA functionCallParamsOptional','functionCallParamsMultiple',2,'p_functionCallParamsMultiple','parser.py',136),
  ('ifBlock -> IF L_PAR megaExp R_PAR body optionalElse','ifBlock',6,'p_ifBlock','parser.py',147),
  ('optionalElse -> <empty>','optionalElse',0,'p_optionalElse','parser.py',154),
  ('optionalElse -> ELSE body','optionalElse',2,'p_optionalElse','parser.py',155),
  ('whileBlock -> WHILE L_PAR megaExp R_PAR body','whileBlock',5,'p_whileBlock','parser.py',160),
  ('forBlock -> FOR L_PAR assignment DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body','forBlock',9,'p_forBlock','parser.py',164),
  ('optionalAssign -> <empty>','optionalAssign',0,'p_optionalAssign','parser.py',171),
  ('optionalAssign -> assignment','optionalAssign',1,'p_optionalAssign','parser.py',172),
  ('megaExp -> superExp','megaExp',1,'p_megaExp','parser.py',179),
  ('megaExp -> superExp AND superExp','megaExp',3,'p_megaExp','parser.py',180),
  ('megaExp -> superExp OR superExp','megaExp',3,'p_megaExp','parser.py',181),
  ('superExp -> exp','superExp',1,'p_superExp','parser.py',188),
  ('superExp -> exp MORE_THAN exp','superExp',3,'p_superExp','parser.py',189),
  ('superExp -> exp LESS_THAN exp','superExp',3,'p_superExp','parser.py',190),
  ('superExp -> exp MORE_EQUAL exp','superExp',3,'p_superExp','parser.py',191),
  ('superExp -> exp LESS_EQUAL exp','superExp',3,'p_superExp','parser.py',192),
  ('superExp -> exp EQUAL exp','superExp',3,'p_superExp','parser.py',193),
  ('superExp -> exp NOT_EQUAL exp','superExp',3,'p_superExp','parser.py',194),
  ('exp -> term','exp',1,'p_exp','parser.py',201),
  ('exp -> term PLUS exp','exp',3,'p_exp','parser.py',202),
  ('exp -> term MINUS exp','exp',3,'p_exp','parser.py',203),
  ('term -> factor','term',1,'p_term','parser.py',210),
  ('term -> factor TIMES term','term',3,'p_term','parser.py',211),
  ('term -> factor DIVIDE term','term',3,'p_term','parser.py',212),
  ('term -> factor MOD term','term',3,'p_term','parser.py',213),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',220),
  ('factor -> ALPHANUMERIC','factor',1,'p_factor','parser.py',221),
  ('factor -> CHARACTER','factor',1,'p_factor','parser.py',222),
  ('factor -> BOOLEAN','factor',1,'p_factor','parser.py',223),
  ('factor -> idCall','factor',1,'p_factor','parser.py',224),
  ('factor -> L_PAR megaExp R_PAR','factor',3,'p_factor','parser.py',225),
  ('factor -> functionCall','factor',1,'p_factor','parser.py',226),
  ('idCall -> ID','idCall',1,'p_idCall','parser.py',235),
  ('idCall -> ID L_KEY exp R_KEY','idCall',4,'p_idCall','parser.py',236),
  ('print -> PRINT L_PAR print_help R_PAR','print',4,'p_print','parser.py',246),
  ('print_help -> <empty>','print_help',0,'p_print_help','parser.py',253),
  ('print_help -> ALPHANUMERIC','print_help',1,'p_print_help','parser.py',254),
  ('print_help -> idCall','print_help',1,'p_print_help','parser.py',255),
  ('print_help -> functionCall','print_help',1,'p_print_help','parser.py',256),
  ('print_help -> megaExp','print_help',1,'p_print_help','parser.py',257),
  ('read -> READ L_PAR idCall R_PAR','read',4,'p_read','parser.py',261),
  ('lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE','lineComment',3,'p_lineComment','parser.py',268),
]
