
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALPHANUMERIC AND ASSIGN BOOL BOOLEAN BOOLEAN CHAR CHARACTER COMMA COMMENT_LINE DECIM DECREMENT DIVIDE DOT_COMMA ELSE END_LINE EQUAL FOR FUNCTION ID IF INCREMENT INT LESS_EQUAL LESS_THAN L_BRACK L_KEY L_PAR MAIN MINUS MOD MORE_EQUAL MORE_THAN NOT_EQUAL NUMBER OR PLUS PRINT PROGRAM READ R_BRACK R_KEY R_PAR STRING TIMES VAR WHILEprogram : PROGRAM ID L_BRACK codeBlock R_BRACKcodeBlock : variables functions mainBody\n  \t       | variables mainBody\n               | functions mainBody\n               | mainBodymainBody : MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK\n  \t      | MAIN L_PAR R_PAR L_BRACK statements R_BRACKbody : L_BRACK statements R_BRACKvariables : VAR type ID DOT_COMMA\n  \t       | VAR type ID assignment DOT_COMMAarrays : VAR type ID L_KEY NUMBER R_KEY DOT_COMMAfunctions : FUNCTION type ID L_PAR type ID functionsHelp R_PAR L_BRACK variables statements R_BRACK\n  \t       | FUNCTION type ID L_PAR type ID functionsHelp R_PAR L_BRACK statements R_BRACKfunctionsHelp : \n  \t\t   | COMMA type ID functionsHelptype : INT\n  \t  | DECIM\n          | BOOL\n          | CHAR\n          | STRINGstatements : assignment DOT_COMMA\n  \t\t| functionCall DOT_COMMA\n                | ifBlock\n                | whileBlock\n                | forBlock\n                | print DOT_COMMA\n                | read DOT_COMMA\n                | lineComment\n                | arrays DOT_COMMAassignment : idCall ASSIGN megaExp\n                | idCall ASSIGN functionCall\n                | idCall INCREMENT \n                | idCall DECREMENTfunctionCall : ID L_PAR megaExp R_PARfunctionCallExtraP : \n  \t\t\t\t\t\t\t\t\t\t\t| COMMA idCall\n                        | COMMA idCall functionCallExtraPifBlock : IF L_PAR megaExp R_PAR body optionalElseoptionalElse : \n  \t\t  | ELSE bodywhileBlock : WHILE L_PAR megaExp R_PAR bodyforBlock : FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR bodyoptionalAssign : \n  \t\t    | assignmentmegaExp : superExp\n             | superExp AND superExp\n             | superExp OR superExpsuperExp : exp\n              | exp MORE_THAN exp\n              | exp LESS_THAN exp\n              | exp MORE_EQUAL exp\n              | exp LESS_EQUAL exp\n              | exp EQUAL exp\n              | exp NOT_EQUAL expexp : term\n          | term PLUS term\n          | term MINUS termterm : factor TIMES factor\n           | factor DIVIDE factor\n           | factor MOD factorfactor : NUMBER \n   \t     \t\t | ALPHANUMERIC \n             | CHARACTER\n             | BOOLEAN\n             | idCall\n             | L_PAR megaExp R_PAR\n             | functionCallidCall : ID\n  \t\t\t\t\t| ID L_BRACK exp R_BRACKprint : PRINT L_PAR print_help ALPHANUMERIC R_PARprint_help : \n  \t\t| MOD idCall print_help2print_help2 : \n  \t\t | COMMA MOD idCall print_help2read : READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PARreadHelp : \n  \t      | MOD type readHelpreadHelp2 : \n  \t       | COMMA idCall readHelp2lineComment : COMMENT_LINE ALPHANUMERIC END_LINE'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'ID':([2,16,17,18,19,20,21,22,25,29,33,34,35,36,39,40,68,78,79,85,86,87,92,93,94,95,96,98,99,100,101,102,103,104,105,109,110,116,134,140,144,148,154,155,162,163,165,174,179,180,],[3,25,-16,-17,-18,-19,-20,26,28,-9,43,59,-10,43,74,43,59,110,59,59,59,28,59,59,59,59,59,59,59,59,59,59,59,59,59,135,28,28,145,59,43,43,-76,43,28,28,28,-76,-77,28,]),'L_BRACK':([3,27,28,43,59,133,138,139,160,177,],[4,33,34,34,34,144,148,148,148,148,]),'VAR':([4,29,33,35,40,144,148,155,],[9,-9,42,-10,76,42,76,76,]),'FUNCTION':([4,6,29,35,],[10,10,-9,-10,]),'MAIN':([4,6,7,13,29,35,167,176,],[11,11,11,11,-9,-10,-13,-12,]),'R_BRACK':([5,8,14,15,24,41,46,47,48,51,59,60,61,63,64,65,66,67,69,75,77,80,81,82,83,84,91,108,118,119,120,121,122,123,124,137,147,149,156,159,161,166,169,170,182,],[12,-5,-3,-4,-2,77,-23,-24,-25,-28,-68,91,-55,-61,-62,-63,-64,-65,-67,108,-7,-21,-22,-26,-27,-29,-69,-6,-80,-56,-57,-58,-59,-60,-66,-34,-39,-41,167,-38,170,176,-40,-8,-42,]),'INT':([9,10,32,42,76,107,117,164,],[17,17,17,17,17,17,17,17,]),'DECIM':([9,10,32,42,76,107,117,164,],[18,18,18,18,18,18,18,18,]),'BOOL':([9,10,32,42,76,107,117,164,],[19,19,19,19,19,19,19,19,]),'CHAR':([9,10,32,42,76,107,117,164,],[20,20,20,20,20,20,20,20,]),'STRING':([9,10,32,42,76,107,117,164,],[21,21,21,21,21,21,21,21,]),'L_PAR':([11,26,34,36,43,53,54,55,56,57,59,68,79,85,86,92,93,94,95,96,98,99,100,101,102,103,104,105,140,],[23,32,68,68,79,85,86,87,88,89,79,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'COMMA':([17,18,19,20,21,28,74,91,142,143,145,173,175,183,],[-16,-17,-18,-19,-20,-68,107,-69,153,154,107,153,180,180,]),'MOD':([17,18,19,20,21,43,59,62,63,64,65,66,67,69,71,88,89,91,124,137,153,154,174,],[-16,-17,-18,-19,-20,-68,-68,96,-61,-62,-63,-64,-65,-67,-67,116,117,-69,-66,-34,163,164,164,]),'R_PAR':([23,28,37,38,59,61,63,64,65,66,67,69,70,71,72,73,74,91,97,106,111,112,113,119,120,121,122,123,124,125,126,127,128,129,130,131,132,137,141,145,157,162,171,172,175,181,183,185,],[27,-68,-32,-33,-68,-55,-61,-62,-63,-64,-65,-67,-30,-31,-45,-48,-14,-69,124,133,137,138,139,-56,-57,-58,-59,-60,-66,-46,-47,-49,-50,-51,-52,-53,-54,-34,151,-14,-15,-43,177,-44,-78,184,-78,-79,]),'DOT_COMMA':([25,28,30,37,38,44,45,49,50,52,59,61,63,64,65,66,67,69,70,71,72,73,91,110,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,137,150,151,158,168,184,],[29,-68,35,-32,-33,80,81,82,83,84,-68,-55,-61,-62,-63,-64,-65,-67,-30,-31,-45,-48,-69,29,140,-56,-57,-58,-59,-60,-66,-46,-47,-49,-50,-51,-52,-53,-54,-34,162,-70,168,-11,-75,]),'ASSIGN':([28,31,43,91,],[-68,36,-68,-69,]),'INCREMENT':([28,31,43,91,],[-68,37,-68,-69,]),'DECREMENT':([28,31,43,91,],[-68,38,-68,-69,]),'ALPHANUMERIC':([28,34,36,58,68,79,85,86,88,91,92,93,94,95,96,98,99,100,101,102,103,104,105,115,140,142,152,173,178,],[-68,64,64,90,64,64,64,64,-71,-69,64,64,64,64,64,64,64,64,64,64,64,64,64,141,64,-73,-72,-73,-74,]),'IF':([29,33,35,40,144,148,155,],[-9,53,-10,53,53,53,53,]),'WHILE':([29,33,35,40,144,148,155,],[-9,54,-10,54,54,54,54,]),'FOR':([29,33,35,40,144,148,155,],[-9,55,-10,55,55,55,55,]),'PRINT':([29,33,35,40,144,148,155,],[-9,56,-10,56,56,56,56,]),'READ':([29,33,35,40,144,148,155,],[-9,57,-10,57,57,57,57,]),'COMMENT_LINE':([29,33,35,40,144,148,155,],[-9,58,-10,58,58,58,58,]),'NUMBER':([34,36,68,79,85,86,92,93,94,95,96,98,99,100,101,102,103,104,105,136,140,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,146,63,]),'CHARACTER':([34,36,68,79,85,86,92,93,94,95,96,98,99,100,101,102,103,104,105,140,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'BOOLEAN':([34,36,68,79,85,86,92,93,94,95,96,98,99,100,101,102,103,104,105,140,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'TIMES':([43,59,62,63,64,65,66,67,69,71,91,124,137,],[-68,-68,94,-61,-62,-63,-64,-65,-67,-67,-69,-66,-34,]),'DIVIDE':([43,59,62,63,64,65,66,67,69,71,91,124,137,],[-68,-68,95,-61,-62,-63,-64,-65,-67,-67,-69,-66,-34,]),'PLUS':([59,61,63,64,65,66,67,69,91,121,122,123,124,137,],[-68,92,-61,-62,-63,-64,-65,-67,-69,-58,-59,-60,-66,-34,]),'MINUS':([59,61,63,64,65,66,67,69,91,121,122,123,124,137,],[-68,93,-61,-62,-63,-64,-65,-67,-69,-58,-59,-60,-66,-34,]),'MORE_THAN':([59,61,63,64,65,66,67,69,73,91,119,120,121,122,123,124,137,],[-68,-55,-61,-62,-63,-64,-65,-67,100,-69,-56,-57,-58,-59,-60,-66,-34,]),'LESS_THAN':([59,61,63,64,65,66,67,69,73,91,119,120,121,122,123,124,137,],[-68,-55,-61,-62,-63,-64,-65,-67,101,-69,-56,-57,-58,-59,-60,-66,-34,]),'MORE_EQUAL':([59,61,63,64,65,66,67,69,73,91,119,120,121,122,123,124,137,],[-68,-55,-61,-62,-63,-64,-65,-67,102,-69,-56,-57,-58,-59,-60,-66,-34,]),'LESS_EQUAL':([59,61,63,64,65,66,67,69,73,91,119,120,121,122,123,124,137,],[-68,-55,-61,-62,-63,-64,-65,-67,103,-69,-56,-57,-58,-59,-60,-66,-34,]),'EQUAL':([59,61,63,64,65,66,67,69,73,91,119,120,121,122,123,124,137,],[-68,-55,-61,-62,-63,-64,-65,-67,104,-69,-56,-57,-58,-59,-60,-66,-34,]),'NOT_EQUAL':([59,61,63,64,65,66,67,69,73,91,119,120,121,122,123,124,137,],[-68,-55,-61,-62,-63,-64,-65,-67,105,-69,-56,-57,-58,-59,-60,-66,-34,]),'AND':([59,61,63,64,65,66,67,69,72,73,91,119,120,121,122,123,124,127,128,129,130,131,132,137,],[-68,-55,-61,-62,-63,-64,-65,-67,98,-48,-69,-56,-57,-58,-59,-60,-66,-49,-50,-51,-52,-53,-54,-34,]),'OR':([59,61,63,64,65,66,67,69,72,73,91,119,120,121,122,123,124,127,128,129,130,131,132,137,],[-68,-55,-61,-62,-63,-64,-65,-67,99,-48,-69,-56,-57,-58,-59,-60,-66,-49,-50,-51,-52,-53,-54,-34,]),'END_LINE':([90,],[118,]),'L_KEY':([110,135,],[136,136,]),'R_KEY':([146,],[158,]),'ELSE':([147,170,],[160,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'codeBlock':([4,],[5,]),'variables':([4,33,144,],[6,40,155,]),'functions':([4,6,],[7,13,]),'mainBody':([4,6,7,13,],[8,14,15,24,]),'type':([9,10,32,42,76,107,117,164,],[16,22,39,78,109,134,143,174,]),'assignment':([25,33,40,110,144,148,155,162,],[30,44,44,30,44,44,44,172,]),'idCall':([25,33,34,36,40,68,79,85,86,87,92,93,94,95,96,98,99,100,101,102,103,104,105,110,116,140,144,148,155,162,163,165,180,],[31,31,67,67,31,67,67,67,67,114,67,67,67,67,67,67,67,67,67,67,67,67,67,31,142,67,31,31,31,31,173,175,183,]),'statements':([33,40,144,148,155,],[41,75,156,161,166,]),'functionCall':([33,34,36,40,68,79,85,86,92,93,94,95,96,98,99,100,101,102,103,104,105,140,144,148,155,],[45,69,71,45,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,45,45,45,]),'ifBlock':([33,40,144,148,155,],[46,46,46,46,46,]),'whileBlock':([33,40,144,148,155,],[47,47,47,47,47,]),'forBlock':([33,40,144,148,155,],[48,48,48,48,48,]),'print':([33,40,144,148,155,],[49,49,49,49,49,]),'read':([33,40,144,148,155,],[50,50,50,50,50,]),'lineComment':([33,40,144,148,155,],[51,51,51,51,51,]),'arrays':([33,40,144,148,155,],[52,52,52,52,52,]),'exp':([34,36,68,79,85,86,98,99,100,101,102,103,104,105,140,],[60,73,73,73,73,73,73,73,127,128,129,130,131,132,73,]),'term':([34,36,68,79,85,86,92,93,98,99,100,101,102,103,104,105,140,],[61,61,61,61,61,61,119,120,61,61,61,61,61,61,61,61,61,]),'factor':([34,36,68,79,85,86,92,93,94,95,96,98,99,100,101,102,103,104,105,140,],[62,62,62,62,62,62,62,62,121,122,123,62,62,62,62,62,62,62,62,62,]),'megaExp':([36,68,79,85,86,140,],[70,97,111,112,113,150,]),'superExp':([36,68,79,85,86,98,99,140,],[72,72,72,72,72,125,126,72,]),'functionsHelp':([74,145,],[106,157,]),'print_help':([88,],[115,]),'body':([138,139,160,177,],[147,149,169,182,]),'print_help2':([142,173,],[152,178,]),'optionalElse':([147,],[159,]),'readHelp':([154,174,],[165,179,]),'optionalAssign':([162,],[171,]),'readHelp2':([175,183,],[181,185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID L_BRACK codeBlock R_BRACK','program',5,'p_program','parser.py',14),
  ('codeBlock -> variables functions mainBody','codeBlock',3,'p_codeBlock','parser.py',19),
  ('codeBlock -> variables mainBody','codeBlock',2,'p_codeBlock','parser.py',20),
  ('codeBlock -> functions mainBody','codeBlock',2,'p_codeBlock','parser.py',21),
  ('codeBlock -> mainBody','codeBlock',1,'p_codeBlock','parser.py',22),
  ('mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK','mainBody',7,'p_mainBody','parser.py',26),
  ('mainBody -> MAIN L_PAR R_PAR L_BRACK statements R_BRACK','mainBody',6,'p_mainBody','parser.py',27),
  ('body -> L_BRACK statements R_BRACK','body',3,'p_body','parser.py',31),
  ('variables -> VAR type ID DOT_COMMA','variables',4,'p_variables','parser.py',35),
  ('variables -> VAR type ID assignment DOT_COMMA','variables',5,'p_variables','parser.py',36),
  ('arrays -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA','arrays',7,'p_arrays','parser.py',42),
  ('functions -> FUNCTION type ID L_PAR type ID functionsHelp R_PAR L_BRACK variables statements R_BRACK','functions',12,'p_functions','parser.py',46),
  ('functions -> FUNCTION type ID L_PAR type ID functionsHelp R_PAR L_BRACK statements R_BRACK','functions',11,'p_functions','parser.py',47),
  ('functionsHelp -> <empty>','functionsHelp',0,'p_functionsHelp','parser.py',51),
  ('functionsHelp -> COMMA type ID functionsHelp','functionsHelp',4,'p_functionsHelp','parser.py',52),
  ('type -> INT','type',1,'p_type','parser.py',58),
  ('type -> DECIM','type',1,'p_type','parser.py',59),
  ('type -> BOOL','type',1,'p_type','parser.py',60),
  ('type -> CHAR','type',1,'p_type','parser.py',61),
  ('type -> STRING','type',1,'p_type','parser.py',62),
  ('statements -> assignment DOT_COMMA','statements',2,'p_statements','parser.py',68),
  ('statements -> functionCall DOT_COMMA','statements',2,'p_statements','parser.py',69),
  ('statements -> ifBlock','statements',1,'p_statements','parser.py',70),
  ('statements -> whileBlock','statements',1,'p_statements','parser.py',71),
  ('statements -> forBlock','statements',1,'p_statements','parser.py',72),
  ('statements -> print DOT_COMMA','statements',2,'p_statements','parser.py',73),
  ('statements -> read DOT_COMMA','statements',2,'p_statements','parser.py',74),
  ('statements -> lineComment','statements',1,'p_statements','parser.py',75),
  ('statements -> arrays DOT_COMMA','statements',2,'p_statements','parser.py',76),
  ('assignment -> idCall ASSIGN megaExp','assignment',3,'p_assignment','parser.py',80),
  ('assignment -> idCall ASSIGN functionCall','assignment',3,'p_assignment','parser.py',81),
  ('assignment -> idCall INCREMENT','assignment',2,'p_assignment','parser.py',82),
  ('assignment -> idCall DECREMENT','assignment',2,'p_assignment','parser.py',83),
  ('functionCall -> ID L_PAR megaExp R_PAR','functionCall',4,'p_functionCall','parser.py',93),
  ('functionCallExtraP -> <empty>','functionCallExtraP',0,'p_functionCallExtraP','parser.py',95),
  ('functionCallExtraP -> COMMA idCall','functionCallExtraP',2,'p_functionCallExtraP','parser.py',96),
  ('functionCallExtraP -> COMMA idCall functionCallExtraP','functionCallExtraP',3,'p_functionCallExtraP','parser.py',97),
  ('ifBlock -> IF L_PAR megaExp R_PAR body optionalElse','ifBlock',6,'p_ifBlock','parser.py',101),
  ('optionalElse -> <empty>','optionalElse',0,'p_optionalElse','parser.py',103),
  ('optionalElse -> ELSE body','optionalElse',2,'p_optionalElse','parser.py',104),
  ('whileBlock -> WHILE L_PAR megaExp R_PAR body','whileBlock',5,'p_whileBlock','parser.py',107),
  ('forBlock -> FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body','forBlock',9,'p_forBlock','parser.py',110),
  ('optionalAssign -> <empty>','optionalAssign',0,'p_optionalAssign','parser.py',112),
  ('optionalAssign -> assignment','optionalAssign',1,'p_optionalAssign','parser.py',113),
  ('megaExp -> superExp','megaExp',1,'p_megaExp','parser.py',119),
  ('megaExp -> superExp AND superExp','megaExp',3,'p_megaExp','parser.py',120),
  ('megaExp -> superExp OR superExp','megaExp',3,'p_megaExp','parser.py',121),
  ('superExp -> exp','superExp',1,'p_superExp','parser.py',124),
  ('superExp -> exp MORE_THAN exp','superExp',3,'p_superExp','parser.py',125),
  ('superExp -> exp LESS_THAN exp','superExp',3,'p_superExp','parser.py',126),
  ('superExp -> exp MORE_EQUAL exp','superExp',3,'p_superExp','parser.py',127),
  ('superExp -> exp LESS_EQUAL exp','superExp',3,'p_superExp','parser.py',128),
  ('superExp -> exp EQUAL exp','superExp',3,'p_superExp','parser.py',129),
  ('superExp -> exp NOT_EQUAL exp','superExp',3,'p_superExp','parser.py',130),
  ('exp -> term','exp',1,'p_exp','parser.py',133),
  ('exp -> term PLUS term','exp',3,'p_exp','parser.py',134),
  ('exp -> term MINUS term','exp',3,'p_exp','parser.py',135),
  ('term -> factor TIMES factor','term',3,'p_term','parser.py',138),
  ('term -> factor DIVIDE factor','term',3,'p_term','parser.py',139),
  ('term -> factor MOD factor','term',3,'p_term','parser.py',140),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',143),
  ('factor -> ALPHANUMERIC','factor',1,'p_factor','parser.py',144),
  ('factor -> CHARACTER','factor',1,'p_factor','parser.py',145),
  ('factor -> BOOLEAN','factor',1,'p_factor','parser.py',146),
  ('factor -> idCall','factor',1,'p_factor','parser.py',147),
  ('factor -> L_PAR megaExp R_PAR','factor',3,'p_factor','parser.py',148),
  ('factor -> functionCall','factor',1,'p_factor','parser.py',149),
  ('idCall -> ID','idCall',1,'p_idCall','parser.py',154),
  ('idCall -> ID L_BRACK exp R_BRACK','idCall',4,'p_idCall','parser.py',155),
  ('print -> PRINT L_PAR print_help ALPHANUMERIC R_PAR','print',5,'p_print','parser.py',162),
  ('print_help -> <empty>','print_help',0,'p_print_help','parser.py',164),
  ('print_help -> MOD idCall print_help2','print_help',3,'p_print_help','parser.py',165),
  ('print_help2 -> <empty>','print_help2',0,'p_print_help2','parser.py',167),
  ('print_help2 -> COMMA MOD idCall print_help2','print_help2',4,'p_print_help2','parser.py',168),
  ('read -> READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR','read',9,'p_read','parser.py',171),
  ('readHelp -> <empty>','readHelp',0,'p_readHelp','parser.py',173),
  ('readHelp -> MOD type readHelp','readHelp',3,'p_readHelp','parser.py',174),
  ('readHelp2 -> <empty>','readHelp2',0,'p_readHelp2','parser.py',176),
  ('readHelp2 -> COMMA idCall readHelp2','readHelp2',3,'p_readHelp2','parser.py',177),
  ('lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE','lineComment',3,'p_lineComment','parser.py',183),
]
