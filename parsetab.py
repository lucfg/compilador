
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALPHANUMERIC AND ASSIGN BOOL BOOLEAN BOOLEAN CHAR CHARACTER COMMA COMMENT_LINE DECIM DECREMENT DIVIDE DOT_COMMA ELSE END_LINE EQUAL FOR FUNCTION ID IF INCREMENT INT LESS_EQUAL LESS_THAN L_BRACK L_KEY L_PAR MAIN MINUS MOD MORE_EQUAL MORE_THAN NOT_EQUAL NUMBER OR PLUS PRINT PROGRAM READ R_BRACK R_KEY R_PAR STRING TIMES VAR WHILEprogram : PROGRAM ID L_BRACK codeBlock R_BRACKcodeBlock : variables functions mainBody\n  \t       | variables mainBody\n               | functions mainBody\n               | mainBodymainBody : MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK\n  \t      | MAIN L_PAR R_PAR L_BRACK statements R_BRACK\n  \t      | MAIN L_PAR R_PAR L_BRACK R_BRACKbody : L_BRACK statements R_BRACKvariables :\n               | VAR type ID DOT_COMMA variables\n  \t       | VAR type assignment DOT_COMMA variablesarrays : VAR type ID L_KEY NUMBER R_KEY DOT_COMMAfunctions : FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK\n  \t       | FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK\n  \t       | FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK R_BRACKfunctionsHelp :\n  \t\t   | type ID\n  \t\t   | type ID COMMA functionsHelp2functionsHelp2 : type ID\n                    | type ID COMMA functionsHelp2type : INT\n  \t  | DECIM\n          | BOOL\n          | CHAR\n          | STRINGstatements :\n                | assignment DOT_COMMA\n  \t\t| functionCall DOT_COMMA\n                | ifBlock\n                | whileBlock\n                | forBlock\n                | print DOT_COMMA\n                | read DOT_COMMA\n                | lineComment\n                | arrays DOT_COMMAassignment : idCall ASSIGN megaExp\n                | idCall ASSIGN functionCall\n                | idCall INCREMENT \n                | idCall DECREMENTfunctionCall : ID L_PAR functionCallParams R_PARfunctionCallParams : functionCallParamsOptional\n                        | functionCallParamsMultiplefunctionCallParamsOptional : \n                                | idCall\n                                | megaExp\n                                | functionCallfunctionCallParamsMultiple : functionCallParamsParam\n                                | functionCallParamsParam COMMA functionCallParamsMultiplefunctionCallParamsParam : idCall\n                             | megaExp\n                             | functionCallifBlock : IF L_PAR megaExp R_PAR body optionalElseoptionalElse : \n  \t\t  | ELSE bodywhileBlock : WHILE L_PAR megaExp R_PAR bodyforBlock : FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR bodyoptionalAssign : \n  \t\t    | assignmentmegaExp : superExp\n             | superExp AND superExp\n             | superExp OR superExpsuperExp : exp\n              | exp MORE_THAN exp\n              | exp LESS_THAN exp\n              | exp MORE_EQUAL exp\n              | exp LESS_EQUAL exp\n              | exp EQUAL exp\n              | exp NOT_EQUAL expexp : term\n          | term PLUS term\n          | term MINUS termterm : factor\n           | factor TIMES factor\n           | factor DIVIDE factor\n           | factor MOD factorfactor : NUMBER \n             | ALPHANUMERIC \n             | CHARACTER\n             | BOOLEAN\n             | idCall\n             | L_PAR megaExp R_PAR\n             | functionCallidCall : ID\n  \t    | ID L_KEY exp R_KEYprint : PRINT L_PAR print_help ALPHANUMERIC R_PARprint_help : \n  \t\t| MOD idCall print_help2print_help2 : \n  \t\t | COMMA MOD idCall print_help2read : READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PARreadHelp : \n  \t      | MOD type readHelpreadHelp2 : \n  \t       | COMMA idCall readHelp2lineComment : COMMENT_LINE ALPHANUMERIC END_LINE'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'ID':([2,16,17,18,19,20,21,22,30,31,32,33,37,38,48,50,56,58,77,79,80,81,82,83,85,86,87,88,89,90,91,92,98,104,105,106,132,134,141,145,146,148,152,155,169,175,183,184,186,194,198,199,],[3,25,-22,-23,-24,-25,-26,28,-10,39,-10,54,54,-11,39,-12,93,54,39,39,39,39,39,39,39,39,39,39,39,39,39,39,135,39,39,139,54,151,139,39,163,54,39,39,54,-92,139,139,139,-92,-93,139,]),'L_BRACK':([3,29,94,153,154,181,196,],[4,37,132,169,169,169,169,]),'FUNCTION':([4,6,30,32,38,50,],[10,10,-10,-10,-11,-12,]),'MAIN':([4,6,7,13,30,32,38,50,150,165,177,],[11,11,11,11,-10,-10,-11,-12,-16,-15,-14,]),'VAR':([4,30,32,37,38,50,58,132,148,169,],[9,9,9,61,-11,-12,96,61,96,96,]),'R_BRACK':([5,8,14,15,24,30,32,37,38,50,58,59,60,64,65,66,69,95,97,99,100,101,102,103,132,133,143,148,149,164,168,169,170,180,182,189,190,201,],[12,-5,-3,-4,-2,-10,-10,60,-11,-12,-27,97,-8,-30,-31,-32,-35,133,-7,-28,-29,-33,-34,-36,150,-6,-96,-27,165,177,-54,-27,-56,-53,190,-55,-9,-57,]),'INT':([9,10,36,61,96,131,142,176,185,],[17,17,17,17,17,17,17,17,17,]),'DECIM':([9,10,36,61,96,131,142,176,185,],[18,18,18,18,18,18,18,18,18,]),'BOOL':([9,10,36,61,96,131,142,176,185,],[19,19,19,19,19,19,19,19,19,]),'CHAR':([9,10,36,61,96,131,142,176,185,],[20,20,20,20,20,20,20,20,20,]),'STRING':([9,10,36,61,96,131,142,176,185,],[21,21,21,21,21,21,21,21,21,]),'L_PAR':([11,28,31,33,39,48,54,71,72,73,74,75,77,79,80,81,82,83,85,86,87,88,89,90,91,92,104,105,145,152,155,],[23,36,48,48,77,48,77,104,105,106,107,108,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'COMMA':([17,18,19,20,21,39,41,42,43,44,45,46,47,49,53,55,78,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,139,144,157,158,160,161,162,163,193,195,202,],[-22,-23,-24,-25,-26,-84,-70,-73,-77,-78,-79,-80,-81,-83,-60,-63,-85,131,-50,-51,-52,145,-71,-72,-74,-75,-76,-82,-61,-62,-64,-65,-66,-67,-68,-69,-84,-41,174,175,-50,-51,-52,176,174,199,199,]),'MOD':([17,18,19,20,21,39,42,43,44,45,46,47,49,52,54,78,107,108,113,115,122,144,160,162,167,174,175,194,],[-22,-23,-24,-25,-26,-84,83,-77,-78,-79,-80,-81,-83,-83,-84,-85,141,142,-81,-83,-82,-41,-81,-83,-77,184,185,185,]),'R_PAR':([23,34,35,36,39,41,42,43,44,45,46,47,49,51,52,53,54,55,57,77,78,84,93,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,136,137,139,144,147,156,159,160,161,162,163,183,187,191,192,195,200,202,204,],[29,-39,-40,-17,-84,-70,-73,-77,-78,-79,-80,-81,-83,-37,-38,-60,-84,-63,94,-44,-85,122,-18,144,-42,-43,-45,-46,-47,-48,-71,-72,-74,-75,-76,-82,-61,-62,-64,-65,-66,-67,-68,-69,153,154,-84,-41,-19,172,-49,-50,-51,-52,-20,-58,-21,196,-59,-94,203,-94,-95,]),'DOT_COMMA':([25,26,34,35,39,41,42,43,44,45,46,47,49,51,52,53,54,55,62,63,67,68,70,78,117,118,119,120,121,122,123,124,125,126,127,128,129,130,135,138,139,144,171,172,179,188,203,],[30,32,-39,-40,-84,-70,-73,-77,-78,-79,-80,-81,-83,-37,-38,-60,-84,-63,99,100,101,102,103,-85,-71,-72,-74,-75,-76,-82,-61,-62,-64,-65,-66,-67,-68,-69,30,155,-84,-41,183,-86,188,-13,-91,]),'ASSIGN':([25,27,54,78,135,139,],[-84,33,-84,-85,-84,-84,]),'INCREMENT':([25,27,54,78,135,139,],[-84,34,-84,-85,-84,-84,]),'DECREMENT':([25,27,54,78,135,139,],[-84,35,-84,-85,-84,-84,]),'L_KEY':([25,39,54,135,139,151,],[31,31,31,152,31,166,]),'IF':([30,32,37,38,50,58,132,148,169,],[-10,-10,71,-11,-12,71,71,71,71,]),'WHILE':([30,32,37,38,50,58,132,148,169,],[-10,-10,72,-11,-12,72,72,72,72,]),'FOR':([30,32,37,38,50,58,132,148,169,],[-10,-10,73,-11,-12,73,73,73,73,]),'PRINT':([30,32,37,38,50,58,132,148,169,],[-10,-10,74,-11,-12,74,74,74,74,]),'READ':([30,32,37,38,50,58,132,148,169,],[-10,-10,75,-11,-12,75,75,75,75,]),'COMMENT_LINE':([30,32,37,38,50,58,132,148,169,],[-10,-10,76,-11,-12,76,76,76,76,]),'NUMBER':([31,33,48,77,79,80,81,82,83,85,86,87,88,89,90,91,92,104,105,145,152,155,166,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,167,43,178,]),'ALPHANUMERIC':([31,33,48,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,104,105,107,139,140,145,152,155,157,173,193,197,],[44,44,44,109,44,-85,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-87,-84,156,44,44,44,-89,-88,-89,-90,]),'CHARACTER':([31,33,48,77,79,80,81,82,83,85,86,87,88,89,90,91,92,104,105,145,152,155,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'BOOLEAN':([31,33,48,77,79,80,81,82,83,85,86,87,88,89,90,91,92,104,105,145,152,155,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'TIMES':([39,42,43,44,45,46,47,49,52,54,78,113,115,122,144,160,162,167,],[-84,81,-77,-78,-79,-80,-81,-83,-83,-84,-85,-81,-83,-82,-41,-81,-83,-77,]),'DIVIDE':([39,42,43,44,45,46,47,49,52,54,78,113,115,122,144,160,162,167,],[-84,82,-77,-78,-79,-80,-81,-83,-83,-84,-85,-81,-83,-82,-41,-81,-83,-77,]),'PLUS':([39,41,42,43,44,45,46,47,49,52,54,78,113,115,119,120,121,122,144,160,162,167,],[-84,79,-73,-77,-78,-79,-80,-81,-83,-83,-84,-85,-81,-83,-74,-75,-76,-82,-41,-81,-83,-77,]),'MINUS':([39,41,42,43,44,45,46,47,49,52,54,78,113,115,119,120,121,122,144,160,162,167,],[-84,80,-73,-77,-78,-79,-80,-81,-83,-83,-84,-85,-81,-83,-74,-75,-76,-82,-41,-81,-83,-77,]),'R_KEY':([39,40,41,42,43,44,45,46,47,49,78,117,118,119,120,121,122,144,167,178,],[-84,78,-70,-73,-77,-78,-79,-80,-81,-83,-85,-71,-72,-74,-75,-76,-82,-41,179,179,]),'MORE_THAN':([39,41,42,43,44,45,46,47,49,52,54,55,78,113,115,117,118,119,120,121,122,144,160,162,],[-84,-70,-73,-77,-78,-79,-80,-81,-83,-83,-84,87,-85,-81,-83,-71,-72,-74,-75,-76,-82,-41,-81,-83,]),'LESS_THAN':([39,41,42,43,44,45,46,47,49,52,54,55,78,113,115,117,118,119,120,121,122,144,160,162,],[-84,-70,-73,-77,-78,-79,-80,-81,-83,-83,-84,88,-85,-81,-83,-71,-72,-74,-75,-76,-82,-41,-81,-83,]),'MORE_EQUAL':([39,41,42,43,44,45,46,47,49,52,54,55,78,113,115,117,118,119,120,121,122,144,160,162,],[-84,-70,-73,-77,-78,-79,-80,-81,-83,-83,-84,89,-85,-81,-83,-71,-72,-74,-75,-76,-82,-41,-81,-83,]),'LESS_EQUAL':([39,41,42,43,44,45,46,47,49,52,54,55,78,113,115,117,118,119,120,121,122,144,160,162,],[-84,-70,-73,-77,-78,-79,-80,-81,-83,-83,-84,90,-85,-81,-83,-71,-72,-74,-75,-76,-82,-41,-81,-83,]),'EQUAL':([39,41,42,43,44,45,46,47,49,52,54,55,78,113,115,117,118,119,120,121,122,144,160,162,],[-84,-70,-73,-77,-78,-79,-80,-81,-83,-83,-84,91,-85,-81,-83,-71,-72,-74,-75,-76,-82,-41,-81,-83,]),'NOT_EQUAL':([39,41,42,43,44,45,46,47,49,52,54,55,78,113,115,117,118,119,120,121,122,144,160,162,],[-84,-70,-73,-77,-78,-79,-80,-81,-83,-83,-84,92,-85,-81,-83,-71,-72,-74,-75,-76,-82,-41,-81,-83,]),'AND':([39,41,42,43,44,45,46,47,49,52,53,54,55,78,113,115,117,118,119,120,121,122,125,126,127,128,129,130,144,160,162,],[-84,-70,-73,-77,-78,-79,-80,-81,-83,-83,85,-84,-63,-85,-81,-83,-71,-72,-74,-75,-76,-82,-64,-65,-66,-67,-68,-69,-41,-81,-83,]),'OR':([39,41,42,43,44,45,46,47,49,52,53,54,55,78,113,115,117,118,119,120,121,122,125,126,127,128,129,130,144,160,162,],[-84,-70,-73,-77,-78,-79,-80,-81,-83,-83,86,-84,-63,-85,-81,-83,-71,-72,-74,-75,-76,-82,-64,-65,-66,-67,-68,-69,-41,-81,-83,]),'END_LINE':([109,],[143,]),'ELSE':([168,190,],[181,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'codeBlock':([4,],[5,]),'variables':([4,30,32,37,132,],[6,38,50,58,148,]),'functions':([4,6,],[7,13,]),'mainBody':([4,6,7,13,],[8,14,15,24,]),'type':([9,10,36,61,96,131,142,176,185,],[16,22,56,98,134,146,158,146,194,]),'assignment':([16,37,58,98,132,148,169,183,],[26,62,62,26,62,62,62,192,]),'idCall':([16,31,33,37,48,58,77,79,80,81,82,83,85,86,87,88,89,90,91,92,98,104,105,106,132,141,145,148,152,155,169,183,184,186,199,],[27,47,47,27,47,27,113,47,47,47,47,47,47,47,47,47,47,47,47,47,27,47,47,138,27,157,160,27,47,47,27,27,193,195,202,]),'exp':([31,33,48,77,85,86,87,88,89,90,91,92,104,105,145,152,155,],[40,55,55,55,55,55,125,126,127,128,129,130,55,55,55,40,55,]),'term':([31,33,48,77,79,80,85,86,87,88,89,90,91,92,104,105,145,152,155,],[41,41,41,41,117,118,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'factor':([31,33,48,77,79,80,81,82,83,85,86,87,88,89,90,91,92,104,105,145,152,155,],[42,42,42,42,42,42,119,120,121,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'functionCall':([31,33,37,48,58,77,79,80,81,82,83,85,86,87,88,89,90,91,92,104,105,132,145,148,152,155,169,],[49,52,63,49,63,115,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,63,162,63,49,49,63,]),'megaExp':([33,48,77,104,105,145,155,],[51,84,114,136,137,161,171,]),'superExp':([33,48,77,85,86,104,105,145,155,],[53,53,53,123,124,53,53,53,53,]),'functionsHelp':([36,],[57,]),'statements':([37,58,132,148,169,],[59,95,149,164,182,]),'ifBlock':([37,58,132,148,169,],[64,64,64,64,64,]),'whileBlock':([37,58,132,148,169,],[65,65,65,65,65,]),'forBlock':([37,58,132,148,169,],[66,66,66,66,66,]),'print':([37,58,132,148,169,],[67,67,67,67,67,]),'read':([37,58,132,148,169,],[68,68,68,68,68,]),'lineComment':([37,58,132,148,169,],[69,69,69,69,69,]),'arrays':([37,58,132,148,169,],[70,70,70,70,70,]),'functionCallParams':([77,],[110,]),'functionCallParamsOptional':([77,],[111,]),'functionCallParamsMultiple':([77,145,],[112,159,]),'functionCallParamsParam':([77,145,],[116,116,]),'print_help':([107,],[140,]),'functionsHelp2':([131,176,],[147,187,]),'body':([153,154,181,196,],[168,170,189,201,]),'print_help2':([157,193,],[173,197,]),'optionalElse':([168,],[180,]),'readHelp':([175,194,],[186,198,]),'optionalAssign':([183,],[191,]),'readHelp2':([195,202,],[200,204,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID L_BRACK codeBlock R_BRACK','program',5,'p_program','parser.py',14),
  ('codeBlock -> variables functions mainBody','codeBlock',3,'p_codeBlock','parser.py',19),
  ('codeBlock -> variables mainBody','codeBlock',2,'p_codeBlock','parser.py',20),
  ('codeBlock -> functions mainBody','codeBlock',2,'p_codeBlock','parser.py',21),
  ('codeBlock -> mainBody','codeBlock',1,'p_codeBlock','parser.py',22),
  ('mainBody -> MAIN L_PAR R_PAR L_BRACK variables statements R_BRACK','mainBody',7,'p_mainBody','parser.py',26),
  ('mainBody -> MAIN L_PAR R_PAR L_BRACK statements R_BRACK','mainBody',6,'p_mainBody','parser.py',27),
  ('mainBody -> MAIN L_PAR R_PAR L_BRACK R_BRACK','mainBody',5,'p_mainBody','parser.py',28),
  ('body -> L_BRACK statements R_BRACK','body',3,'p_body','parser.py',32),
  ('variables -> <empty>','variables',0,'p_variables','parser.py',36),
  ('variables -> VAR type ID DOT_COMMA variables','variables',5,'p_variables','parser.py',37),
  ('variables -> VAR type assignment DOT_COMMA variables','variables',5,'p_variables','parser.py',38),
  ('arrays -> VAR type ID L_KEY NUMBER R_KEY DOT_COMMA','arrays',7,'p_arrays','parser.py',44),
  ('functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK variables statements R_BRACK','functions',10,'p_functions','parser.py',48),
  ('functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK statements R_BRACK','functions',9,'p_functions','parser.py',49),
  ('functions -> FUNCTION type ID L_PAR functionsHelp R_PAR L_BRACK R_BRACK','functions',8,'p_functions','parser.py',50),
  ('functionsHelp -> <empty>','functionsHelp',0,'p_functionsHelp','parser.py',54),
  ('functionsHelp -> type ID','functionsHelp',2,'p_functionsHelp','parser.py',55),
  ('functionsHelp -> type ID COMMA functionsHelp2','functionsHelp',4,'p_functionsHelp','parser.py',56),
  ('functionsHelp2 -> type ID','functionsHelp2',2,'p_functionsHelp2','parser.py',59),
  ('functionsHelp2 -> type ID COMMA functionsHelp2','functionsHelp2',4,'p_functionsHelp2','parser.py',60),
  ('type -> INT','type',1,'p_type','parser.py',66),
  ('type -> DECIM','type',1,'p_type','parser.py',67),
  ('type -> BOOL','type',1,'p_type','parser.py',68),
  ('type -> CHAR','type',1,'p_type','parser.py',69),
  ('type -> STRING','type',1,'p_type','parser.py',70),
  ('statements -> <empty>','statements',0,'p_statements','parser.py',76),
  ('statements -> assignment DOT_COMMA','statements',2,'p_statements','parser.py',77),
  ('statements -> functionCall DOT_COMMA','statements',2,'p_statements','parser.py',78),
  ('statements -> ifBlock','statements',1,'p_statements','parser.py',79),
  ('statements -> whileBlock','statements',1,'p_statements','parser.py',80),
  ('statements -> forBlock','statements',1,'p_statements','parser.py',81),
  ('statements -> print DOT_COMMA','statements',2,'p_statements','parser.py',82),
  ('statements -> read DOT_COMMA','statements',2,'p_statements','parser.py',83),
  ('statements -> lineComment','statements',1,'p_statements','parser.py',84),
  ('statements -> arrays DOT_COMMA','statements',2,'p_statements','parser.py',85),
  ('assignment -> idCall ASSIGN megaExp','assignment',3,'p_assignment','parser.py',89),
  ('assignment -> idCall ASSIGN functionCall','assignment',3,'p_assignment','parser.py',90),
  ('assignment -> idCall INCREMENT','assignment',2,'p_assignment','parser.py',91),
  ('assignment -> idCall DECREMENT','assignment',2,'p_assignment','parser.py',92),
  ('functionCall -> ID L_PAR functionCallParams R_PAR','functionCall',4,'p_functionCall','parser.py',100),
  ('functionCallParams -> functionCallParamsOptional','functionCallParams',1,'p_functionCallParams','parser.py',102),
  ('functionCallParams -> functionCallParamsMultiple','functionCallParams',1,'p_functionCallParams','parser.py',103),
  ('functionCallParamsOptional -> <empty>','functionCallParamsOptional',0,'p_functionCallParamsOptional','parser.py',105),
  ('functionCallParamsOptional -> idCall','functionCallParamsOptional',1,'p_functionCallParamsOptional','parser.py',106),
  ('functionCallParamsOptional -> megaExp','functionCallParamsOptional',1,'p_functionCallParamsOptional','parser.py',107),
  ('functionCallParamsOptional -> functionCall','functionCallParamsOptional',1,'p_functionCallParamsOptional','parser.py',108),
  ('functionCallParamsMultiple -> functionCallParamsParam','functionCallParamsMultiple',1,'p_functionCallParamsMultiple','parser.py',110),
  ('functionCallParamsMultiple -> functionCallParamsParam COMMA functionCallParamsMultiple','functionCallParamsMultiple',3,'p_functionCallParamsMultiple','parser.py',111),
  ('functionCallParamsParam -> idCall','functionCallParamsParam',1,'p_functionCallParamsParam','parser.py',113),
  ('functionCallParamsParam -> megaExp','functionCallParamsParam',1,'p_functionCallParamsParam','parser.py',114),
  ('functionCallParamsParam -> functionCall','functionCallParamsParam',1,'p_functionCallParamsParam','parser.py',115),
  ('ifBlock -> IF L_PAR megaExp R_PAR body optionalElse','ifBlock',6,'p_ifBlock','parser.py',119),
  ('optionalElse -> <empty>','optionalElse',0,'p_optionalElse','parser.py',121),
  ('optionalElse -> ELSE body','optionalElse',2,'p_optionalElse','parser.py',122),
  ('whileBlock -> WHILE L_PAR megaExp R_PAR body','whileBlock',5,'p_whileBlock','parser.py',125),
  ('forBlock -> FOR L_PAR idCall DOT_COMMA megaExp DOT_COMMA optionalAssign R_PAR body','forBlock',9,'p_forBlock','parser.py',128),
  ('optionalAssign -> <empty>','optionalAssign',0,'p_optionalAssign','parser.py',130),
  ('optionalAssign -> assignment','optionalAssign',1,'p_optionalAssign','parser.py',131),
  ('megaExp -> superExp','megaExp',1,'p_megaExp','parser.py',137),
  ('megaExp -> superExp AND superExp','megaExp',3,'p_megaExp','parser.py',138),
  ('megaExp -> superExp OR superExp','megaExp',3,'p_megaExp','parser.py',139),
  ('superExp -> exp','superExp',1,'p_superExp','parser.py',142),
  ('superExp -> exp MORE_THAN exp','superExp',3,'p_superExp','parser.py',143),
  ('superExp -> exp LESS_THAN exp','superExp',3,'p_superExp','parser.py',144),
  ('superExp -> exp MORE_EQUAL exp','superExp',3,'p_superExp','parser.py',145),
  ('superExp -> exp LESS_EQUAL exp','superExp',3,'p_superExp','parser.py',146),
  ('superExp -> exp EQUAL exp','superExp',3,'p_superExp','parser.py',147),
  ('superExp -> exp NOT_EQUAL exp','superExp',3,'p_superExp','parser.py',148),
  ('exp -> term','exp',1,'p_exp','parser.py',151),
  ('exp -> term PLUS term','exp',3,'p_exp','parser.py',152),
  ('exp -> term MINUS term','exp',3,'p_exp','parser.py',153),
  ('term -> factor','term',1,'p_term','parser.py',156),
  ('term -> factor TIMES factor','term',3,'p_term','parser.py',157),
  ('term -> factor DIVIDE factor','term',3,'p_term','parser.py',158),
  ('term -> factor MOD factor','term',3,'p_term','parser.py',159),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',162),
  ('factor -> ALPHANUMERIC','factor',1,'p_factor','parser.py',163),
  ('factor -> CHARACTER','factor',1,'p_factor','parser.py',164),
  ('factor -> BOOLEAN','factor',1,'p_factor','parser.py',165),
  ('factor -> idCall','factor',1,'p_factor','parser.py',166),
  ('factor -> L_PAR megaExp R_PAR','factor',3,'p_factor','parser.py',167),
  ('factor -> functionCall','factor',1,'p_factor','parser.py',168),
  ('idCall -> ID','idCall',1,'p_idCall','parser.py',173),
  ('idCall -> ID L_KEY exp R_KEY','idCall',4,'p_idCall','parser.py',174),
  ('print -> PRINT L_PAR print_help ALPHANUMERIC R_PAR','print',5,'p_print','parser.py',181),
  ('print_help -> <empty>','print_help',0,'p_print_help','parser.py',183),
  ('print_help -> MOD idCall print_help2','print_help',3,'p_print_help','parser.py',184),
  ('print_help2 -> <empty>','print_help2',0,'p_print_help2','parser.py',186),
  ('print_help2 -> COMMA MOD idCall print_help2','print_help2',4,'p_print_help2','parser.py',187),
  ('read -> READ L_PAR MOD type COMMA readHelp idCall readHelp2 R_PAR','read',9,'p_read','parser.py',190),
  ('readHelp -> <empty>','readHelp',0,'p_readHelp','parser.py',192),
  ('readHelp -> MOD type readHelp','readHelp',3,'p_readHelp','parser.py',193),
  ('readHelp2 -> <empty>','readHelp2',0,'p_readHelp2','parser.py',195),
  ('readHelp2 -> COMMA idCall readHelp2','readHelp2',3,'p_readHelp2','parser.py',196),
  ('lineComment -> COMMENT_LINE ALPHANUMERIC END_LINE','lineComment',3,'p_lineComment','parser.py',202),
]
